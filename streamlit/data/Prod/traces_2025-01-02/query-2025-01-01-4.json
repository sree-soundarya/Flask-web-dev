{"data": [{"traceID": "58dd9a710336d56a", "spans": [{"traceID": "58dd9a710336d56a", "spanID": "58dd9a710336d56a", "flags": 1, "operationName": "Agent.graphQLHandler", "references": [], "startTime": 1735684590231420, "duration": 4466634, "tags": [{"key": "component", "type": "string", "value": "eureka-agent"}, {"key": "x.request.id", "type": "string", "value": "5e688e04-a560-4ef6-a9fe-8a27cdf1d705"}, {"key": "user.id", "type": "string", "value": "61b37746-a9bc-4433-b0cb-7a0e03225932"}, {"key": "sampler.type", "type": "string", "value": "const"}, {"key": "sampler.param", "type": "bool", "value": true}, {"key": "org.id", "type": "string", "value": "0"}, {"key": "self.ip", "type": "string", "value": "ip-10-228-137-136.us-west-2.compute.internal/10.228.137.136"}, {"key": "tenant.id", "type": "string", "value": "6a4a1b7d-3f5a-11eb-85f4-32ca5"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "a408c292d92926f1", "flags": 1, "operationName": "handleGraphQLReqEnrichment", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "58dd9a710336d56a"}], "startTime": 1735684590232975, "duration": 59052, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684590232987, "fields": [{"key": "event.log", "type": "string", "value": "Enriching message class com.thoughtspot.convassist.SendMessageRequest"}]}, {"timestamp": 1735684590233386, "fields": [{"key": "event.log", "type": "string", "value": "Enriching SendMessageRequest"}]}, {"timestamp": 1735684590233407, "fields": [{"key": "event.log", "type": "string", "value": "SendMessageRequest: conv_id: \"7185ebba-bb7b-4886-a5e8-19ce0a6b48d6\"\nmsg {\n  msg_id: \"75025dfd-27d4-44a9-9d0a-bbbf5af3cde9\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"sales by year\"\n      nls_data {\n        worksheet_id: \"38399c50-02f1-4310-804b-214b81f25333\"\n        question_type: ANSWER_SPEC_GENERATION\n      }\n    }\n  }\n}\nruntime_params {\n}\n"}]}, {"timestamp": 1735684590233560, "fields": [{"key": "event.log", "type": "string", "value": "Enriching USER_COMMAND message payload"}]}, {"timestamp": 1735684590291966, "fields": [{"key": "event.log", "type": "string", "value": "Returning SendMessageReq conv_id: \"7185ebba-bb7b-4886-a5e8-19ce0a6b48d6\"\nmsg {\n  msg_id: \"75025dfd-27d4-44a9-9d0a-bbbf5af3cde9\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"sales by year\"\n      nls_data {\n        query_hypothesis_columns {\n          column_name: \"Sales\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n          guid: \"c45803c9-0c30-4e41-a5ae-3d385cd915bf\"\n        }\n        query_hypothesis_columns {\n          column_name: \"Salesid\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n          guid: \"62b9883a-5600-4537-b473-3836869cde2d\"\n        }\n        query_hypothesis_columns {\n          column_name: \"Date\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n          guid: \"fc2e527b-cd75-471a-8f04-669a8736feef\"\n        }\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: 2078675017\n        permission_guids: 1842962668\n        permission_guids: 1753570625\n        permission_guids: 1232745556\n        permission_guids: 727117363\n        non_sharable: false\n        worksheet_id: \"38399c50-02f1-4310-804b-214b81f25333\"\n        question_type: ANSWER_SPEC_GENERATION\n      }\n    }\n  }\n}\nruntime_params {\n}\n"}]}], "processID": "p1", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "0f5a7499e5d3a5c1", "flags": 1, "operationName": "getResponseBodyFromCloud", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "58dd9a710336d56a"}], "startTime": 1735684590292187, "duration": 3972849, "tags": [{"key": "proxy.eurekaCloudApiLatency", "type": "string", "value": "3972"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "2a88cbdc941d3200", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "0f5a7499e5d3a5c1"}], "startTime": 1735684590292499, "duration": 3972365, "tags": [{"key": "component", "type": "string", "value": "apache-httpclient"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "b9690ccd2f23364f", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "2a88cbdc941d3200"}], "startTime": 1735684590292502, "duration": 3972280, "tags": [{"key": "http.status_code", "type": "int64", "value": 200}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "http.url", "type": "string", "value": "https://eureka.thoughtspot.cloud/graphql"}, {"key": "peer.hostname", "type": "string", "value": "eureka.thoughtspot.cloud"}, {"key": "peer.port", "type": "int64", "value": 443}, {"key": "http.method", "type": "string", "value": "POST"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "ca9ec6154d0dabe1", "flags": 1, "operationName": "handle", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "b9690ccd2f23364f"}], "startTime": 1735684590527000, "duration": 3703654, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-57db89b787-x4mxm"}, {"key": "x.request.id", "type": "string", "value": "5e688e04-a560-4ef6-a9fe-8a27cdf1d705"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-57db89b787-x4mxm/10.252.241.110"}, {"key": "tenant.id", "type": "string", "value": "6a4a1b7d-3f5a-11eb-85f4-32ca5"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "79de3d59b0f77fea", "flags": 1, "operationName": "handleGraphQl", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "ca9ec6154d0dabe1"}], "startTime": 1735684590527000, "duration": 3703596, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-57db89b787-x4mxm"}, {"key": "x.request.id", "type": "string", "value": "5e688e04-a560-4ef6-a9fe-8a27cdf1d705"}, {"key": "user.id", "type": "string", "value": "61b37746-a9bc-4433-b0cb-7a0e03225932"}, {"key": "x.thought.spot.orgs", "type": "string", "value": "0"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-57db89b787-x4mxm/10.252.241.110"}, {"key": "tenant.id", "type": "string", "value": "6a4a1b7d-3f5a-11eb-85f4-32ca5"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "b81494825e985f86", "flags": 1, "operationName": "convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "79de3d59b0f77fea"}], "startTime": 1735684590530000, "duration": 3699327, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "aedbb8bac2544cd0", "flags": 1, "operationName": "/convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "b9690ccd2f23364f"}], "startTime": 1735684590540378, "duration": 3689202, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "peer.ipv4", "type": "string", "value": "10.252.241.110"}, {"key": "peer.port", "type": "string", "value": "55960"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684590540415, "fields": [{"key": "request", "type": "string", "value": "conv_id: \"7185ebba-bb7b-4886-a5e8-19ce0a6b48d6\"\nmsg {\n  msg_id: \"75025dfd-27d4-44a9-9d0a-bbbf5af3cde9\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"sales by year\"\n      nls_data {\n        query_hypothesis_columns {\n          guid: \"c45803c9-0c30-4e41-a5ae-3d385cd915bf\"\n          column_name: \"Sales\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n        }\n        query_hypothesis_columns {\n          guid: \"62b9883a-5600-4537-b473-3836869cde2d\"\n          column_name: \"Salesid\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n        }\n        query_hypothesis_columns {\n          guid: \"fc2e527b-cd75-471a-8f04-669a8736feef\"\n          column_name: \"Date\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n        }\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: 2078675017\n        permission_guids: 1842962668\n        permission_guids: 1753570625\n        permis"}]}, {"timestamp": 1735684594229518, "fields": [{"key": "response", "type": "string", "value": "responses {\n  msg_id: \"b906de02-dc83-43b6-ae4c-693128878152\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"38399c50-02f1-4310-804b-214b81f25333\"\n          tokens: \"sum Sales Date.yearly\"\n          title: \"\"\n          tml_tokens: \"sum [Sales] [Date].yearly\"\n          cached: false\n          sql_query: \"\"\n          visualization_suggestion {\n            display_mode: UNDEFINED\n            chart_type: NONE\n            users_viz_intent_applied: false\n          }\n          is_partial: false\n          llm_reasoning {\n            assumptions: \"The query is asking for the total sales aggregated by year.\"\n          }\n        }\n        nl_to_sql_mapping_ids: -908361171\n        debug_info {\n          few_shot_examples {\n            id: -908361171\n            mapping_id: -908361171\n            nl_query: \"sales by region year on year\"\n            tml: \"sum [Sales] [Region]\"\n            sage_query: \"\"\n            sql: \"s"}]}], "processID": "p3", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "7e970358ce1a245e", "flags": 1, "operationName": "SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "aedbb8bac2544cd0"}], "startTime": 1735684590540506, "duration": 3688948, "tags": [{"key": "x.request.id", "type": "string", "value": "5e688e04-a560-4ef6-a9fe-8a27cdf1d705"}, {"key": "tenant.id", "type": "string", "value": "6a4a1b7d-3f5a-11eb-85f4-32ca5"}, {"key": "user.id", "type": "string", "value": "61b37746-a9bc-4433-b0cb-7a0e03225932"}, {"key": "org.id", "type": "string", "value": "0"}, {"key": "locale", "type": "string", "value": "en-us"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684590542694, "fields": [{"key": "event", "type": "string", "value": "User Query"}, {"key": "value", "type": "string", "value": "User Query: sales by year"}]}], "processID": "p3", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "a28c20209ca465ad", "flags": 1, "operationName": "get_conv", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "7e970358ce1a245e"}], "startTime": 1735684590541077, "duration": 1193, "tags": [{"key": "conv.id", "type": "string", "value": "7185ebba-bb7b-4886-a5e8-19ce0a6b48d6"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "3382d2d84c1a3988", "flags": 1, "operationName": "find_tool", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "7e970358ce1a245e"}], "startTime": 1735684590542759, "duration": 270, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684590543002, "fields": [{"key": "event", "type": "string", "value": "Find Tool is not enabled. Returning NLSTool."}]}], "processID": "p3", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "e83dca4f81d5bf9e", "flags": 1, "operationName": "_get_tool_response", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "7e970358ce1a245e"}], "startTime": 1735684590543089, "duration": 3613912, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "bcf885f6dc5f8686", "flags": 1, "operationName": "get_response_from_nls", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "e83dca4f81d5bf9e"}], "startTime": 1735684590543471, "duration": 3613502, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "9dd10539f6458069", "flags": 1, "operationName": "get_response_latest", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "bcf885f6dc5f8686"}], "startTime": 1735684590544358, "duration": 3612507, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "e51ab85afcafc081", "flags": 1, "operationName": "/eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "9dd10539f6458069"}], "startTime": 1735684590544708, "duration": 3610605, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684590544749, "fields": [{"key": "request", "type": "string", "value": "msg_payload {\n  msg_id: \"75025dfd-27d4-44a9-9d0a-bbbf5af3cde9\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"sales by year\"\n      nls_data {\n        query_hypothesis_columns {\n          guid: \"c45803c9-0c30-4e41-a5ae-3d385cd915bf\"\n          column_name: \"Sales\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n        }\n        query_hypothesis_columns {\n          guid: \"62b9883a-5600-4537-b473-3836869cde2d\"\n          column_name: \"Salesid\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n        }\n        query_hypothesis_columns {\n          guid: \"fc2e527b-cd75-471a-8f04-669a8736feef\"\n          column_name: \"Date\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n        }\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: 2078675017\n        permission_guids: 1842962668\n        permission_guids: 1753570625\n        permission_guids: 1232745556\n        permissio"}]}, {"timestamp": 1735684594155206, "fields": [{"key": "response", "type": "string", "value": "tool: TS_NLS\nmessages {\n  msg_id: \"b906de02-dc83-43b6-ae4c-693128878152\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"38399c50-02f1-4310-804b-214b81f25333\"\n          tokens: \"sum Sales Date.yearly\"\n          title: \"\"\n          tml_tokens: \"sum [Sales] [Date].yearly\"\n          cached: false\n          sql_query: \"\"\n          visualization_suggestion {\n            display_mode: UNDEFINED\n            chart_type: NONE\n            users_viz_intent_applied: false\n          }\n          is_partial: false\n          llm_reasoning {\n            assumptions: \"The query is asking for the total sales aggregated by year.\"\n          }\n        }\n        nl_to_sql_mapping_ids: -908361171\n        debug_info {\n          few_shot_examples {\n            id: -908361171\n            mapping_id: -908361171\n            nl_query: \"sales by region year on year\"\n            tml: \"sum [Sales] [Region]\"\n            sage_query: \"\"\n       "}]}], "processID": "p3", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "871242bc5d679a96", "flags": 1, "operationName": "eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "e51ab85afcafc081"}], "startTime": 1735684590548000, "duration": 3606385, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.EurekaGrpcService/ConvAssistNLSearch"}, {"key": "peer.address", "type": "string", "value": "10.252.242.11:50484"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "528da345a85482a5", "flags": 1, "operationName": "NLInstructionsHandler.createIndex", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "2e0d47ea456153fe"}], "startTime": 1735684590549000, "duration": 68084, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "ff7b417c3b8a62e9", "flags": 1, "operationName": "hasIndex", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "d57b8fcba935f953"}], "startTime": 1735684590549000, "duration": 63126, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "2e0d47ea456153fe", "flags": 1, "operationName": "convAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "871242bc5d679a96"}], "startTime": 1735684590549000, "duration": 3605880, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "x.request.id", "type": "string", "value": "5e688e04-a560-4ef6-a9fe-8a27cdf1d705"}, {"key": "user.id", "type": "string", "value": "61b37746-a9bc-4433-b0cb-7a0e03225932"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "tenant.id", "type": "string", "value": "6a4a1b7d-3f5a-11eb-85f4-32ca5"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "d57b8fcba935f953", "flags": 1, "operationName": "createIndex", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "528da345a85482a5"}], "startTime": 1735684590549000, "duration": 67940, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "a3df9b9e7a3402e5", "flags": 1, "operationName": "updateDefaultIngestPipeline", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "d57b8fcba935f953"}], "startTime": 1735684590612000, "duration": 4228, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "711239bf3c224a0e", "flags": 1, "operationName": "getConvAssistResult", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "2e0d47ea456153fe"}], "startTime": 1735684590618000, "duration": 3536089, "tags": [{"key": "user.command", "type": "string", "value": "sales by year"}, {"key": "_debugInfo.eureka.ConvAssistDebugInfo", "type": "string", "value": "{\n  \"tenantId\": \"6a4a1b7d-3f5a-11eb-85f4-32ca5\",\n  \"userId\": \"61b37746-a9bc-4433-b0cb-7a0e03225932\",\n  \"userName\": \"\",\n  \"convId\": \"7185ebba-bb7b-4886-a5e8-19ce0a6b48d6\",\n  \"userMsgId\": \"75025dfd-27d4-44a9-9d0a-bbbf5af3cde9\",\n  \"datasourceId\": \"38399c50-02f1-4310-804b-214b81f25333\",\n  \"userQuery\": \"sales by year\",\n  \"generatedTmlTokens\": \"sum [Sales] [Date].yearly\",\n  \"generatedSql\": \"\",\n  \"userFeedback\": \"NEUTRAL\",\n  \"timestamp\": \"1735684594153\",\n  \"orgId\": \"0\",\n  \"requestId\": \"5e688e04-a560-4ef6-a9fe-8a27cdf1d705\",\n  \"userMessageCount\": \"1\",\n  \"datasourceName\": \"[Sample] Retail Apparel Worksheet\",\n  \"asstMsgId\": \"b906de02-dc83-43b6-ae4c-693128878152\"\n}"}, {"key": "query.id", "type": "string", "value": ""}, {"key": "query", "type": "string", "value": "sales by year"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "585136c747cfe269", "flags": 1, "operationName": "getNLSResults", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "711239bf3c224a0e"}], "startTime": 1735684590619000, "duration": 3533888, "tags": [{"key": "empty_nl_query", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684590619000, "fields": [{"key": "event.log", "type": "string", "value": "Number of worksheet columns = 15"}]}, {"timestamp": 1735684590619000, "fields": [{"key": "event.log", "type": "string", "value": "clientRequest = ctx {\n  init_ctx {\n    worksheet {\n      worksheet_id: \"38399c50-02f1-4310-804b-214b81f25333\"\n      worksheet_name: \"[Sample] Retail Apparel Worksheet\"\n      column_details {\n        column_name: \"Date\"\n        data_type: DATE\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"sales\"\n        guid: \"fc2e527b-cd75-471a-8f04-669a8736feef\"\n        column_description: \"Date of the sales transaction\"\n        table_name: \"FACT_RETAPP_SALES\"\n        base_column_id: \"a6a47c61-0ce2-4687-af5d-215726fc49bb\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Sales\"\n        data_type: DOUBLE\n        referenced_by_query_hypothesis: true\n        col_type: MEASURE\n        source_query_term: \"sales\"\n        guid: \"c45803c9-0c30-4e41-a5ae-3d385cd915bf\"\n        column_description: \"Total revenue generated from each transaction\"\n        table_name: \"FACT_RETAPP_SALES\"\n        base_column_id: \"e1f7c314-9001-46a7-97d2-3a8b1e991567\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Quantity Sold\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"1cc17a7b-5c74-46c3-9306-694d55c79ded\"\n        column_description: \"Total basket quantity from each transaction\"\n        table_name: \"FACT_RETAPP_SALES\"\n        base_column_id: \"88d69731-fe3e-422f-9313-e5531040ae78\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Product Type\"\n        data_type: VARCHAR\n        sample_values: \"jackets\"\n        sample_values: \"Dresses\"\n        sample_values: \"Bags\"\n        col_type: ATTRIBUTE\n        guid: \"11abbaaf-7d79-4eee-a111-883936681b7d\"\n        column_description: \"Product Category of each item\"\n        table_name: \"DIM_RETAPP_PRODUCTS\"\n        base_column_id: \"5c5fb061-749f-48b4-97bb-1722c77bed72\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Product\"\n        data_type: VARCHAR\n        sample_values: \"cotton board shorts\"\n        sample_values: \"hi-tech hw mountaineering socks\"\n        sample_values: \"falcon t-shirt\"\n        col_type: ATTRIBUTE\n        guid: \"c3c7e3a2-8595-42b3-a802-432e4677632d\"\n        column_description: \"Product name for the SKU\"\n        table_name: \"DIM_RETAPP_PRODUCTS\"\n        base_column_id: \"45e6518f-b1f7-4760-935e-ddabece88401\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Region\"\n        data_type: VARCHAR\n        sample_values: \"midwest\"\n        sample_values: \"east\"\n        sample_values: \"west\"\n        col_type: ATTRIBUTE\n        guid: \"d2302654-a5b8-474d-9915-e2049d9afe4e\"\n        column_description: \"Region the store falls under\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"7f521834-80b7-422b-b20d-5abbd49895a3\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Store\"\n        data_type: VARCHAR\n        sample_values: \"iowa (50266)\"\n        sample_values: \"idaho (83704)\"\n        sample_values: \"nevada (89052)\"\n        col_type: ATTRIBUTE\n        guid: \"db1f1100-1d05-4600-8f45-a0546667f664\"\n        column_description: \"Store name\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"7a89b5d5-d7da-49a2-8fe9-79010542e18b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"City\"\n        data_type: VARCHAR\n        sample_values: \"Berkeley\"\n        sample_values: \"boise\"\n        sample_values: \"boston\"\n        col_type: ATTRIBUTE\n        guid: \"c1a770a9-d7a7-4bea-9836-cc633b551f48\"\n        column_description: \"State of the store location\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"c621c619-bf76-45d8-af60-da3109991995\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"State\"\n        data_type: VARCHAR\n        sample_values: \"iowa\"\n        sample_values: \"idaho\"\n        sample_values: \"nevada\"\n        col_type: ATTRIBUTE\n        guid: \"fbb9da4d-85f2-4352-9cfb-4e4954b83795\"\n        column_description: \"City of the store\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"54076a3b-5276-493f-af15-fd362c9bcc06\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"County\"\n        data_type: VARCHAR\n        sample_values: \"Ada County\"\n        sample_values: \"Alameda County\"\n        sample_values: \"Polk County\"\n        col_type: ATTRIBUTE\n        guid: \"69655f93-fb24-4956-9592-12094cd67984\"\n        column_description: \"County of the store\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"77311ed6-1d6c-48fd-ad73-e0186520cacd\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Salesid\"\n        data_type: INT64\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"sales\"\n        guid: \"62b9883a-5600-4537-b473-3836869cde2d\"\n        table_name: \"FACT_RETAPP_SALES\"\n        base_column_id: \"373a9dca-4724-47e7-92d0-561f3db9dc82\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Latitude\"\n        data_type: DOUBLE\n        col_type: ATTRIBUTE\n        guid: \"e5a7e8a6-80fb-4312-b202-ed93f3f8b5f9\"\n        column_description: \"Coordinates of the store\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"5ab70760-539f-4c46-8d0c-44b597768457\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Longitude\"\n        data_type: DOUBLE\n        col_type: ATTRIBUTE\n        guid: \"4a75fc56-5dae-42e5-a72b-f0fe72350eec\"\n        column_description: \"Coordinates of the store\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"f7c29673-1cea-4f30-8fbf-5ccf60555d73\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Zip Code\"\n        data_type: VARCHAR\n        sample_values: \"01701\"\n        sample_values: \"02215\"\n        sample_values: \"03860\"\n        col_type: ATTRIBUTE\n        guid: \"d87db983-3edc-49e3-8f89-2e3fb066c992\"\n        column_description: \"Zipcode of the store\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"1051a4d9-c62a-491e-9207-ee8ba01ba375\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"SKU\"\n        data_type: INT64\n        col_type: ATTRIBUTE\n        guid: \"b549f05f-8f40-4a3c-ab11-4f44d6ad47a3\"\n        column_description: \"Stock Keeping Unit\"\n        table_name: \"DIM_RETAPP_PRODUCTS\"\n        base_column_id: \"1506b6d7-4f17-4971-b986-3466a49287e9\"\n        is_group_aggregate: false\n      }\n    }\n  }\n}\nquery: \"sales by year\"\nnl_handler_version: LATEST\n"}]}, {"timestamp": 1735684590619000, "fields": [{"key": "event.log", "type": "string", "value": "nlHandlerVersion = LATEST"}]}, {"timestamp": 1735684590619000, "fields": [{"key": "event.log", "type": "string", "value": "worksheetFacetPayload = worksheet_id: \"38399c50-02f1-4310-804b-214b81f25333\"\nworksheet_name: \"[Sample] Retail Apparel Worksheet\"\ncolumn_details {\n  column_name: \"Date\"\n  data_type: DATE\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"sales\"\n  guid: \"fc2e527b-cd75-471a-8f04-669a8736feef\"\n  column_description: \"Date of the sales transaction\"\n  table_name: \"FACT_RETAPP_SALES\"\n  base_column_id: \"a6a47c61-0ce2-4687-af5d-215726fc49bb\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Sales\"\n  data_type: DOUBLE\n  referenced_by_query_hypothesis: true\n  col_type: MEASURE\n  source_query_term: \"sales\"\n  guid: \"c45803c9-0c30-4e41-a5ae-3d385cd915bf\"\n  column_description: \"Total revenue generated from each transaction\"\n  table_name: \"FACT_RETAPP_SALES\"\n  base_column_id: \"e1f7c314-9001-46a7-97d2-3a8b1e991567\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Quantity Sold\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"1cc17a7b-5c74-46c3-9306-694d55c79ded\"\n  column_description: \"Total basket quantity from each transaction\"\n  table_name: \"FACT_RETAPP_SALES\"\n  base_column_id: \"88d69731-fe3e-422f-9313-e5531040ae78\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Product Type\"\n  data_type: VARCHAR\n  sample_values: \"jackets\"\n  sample_values: \"Dresses\"\n  sample_values: \"Bags\"\n  col_type: ATTRIBUTE\n  guid: \"11abbaaf-7d79-4eee-a111-883936681b7d\"\n  column_description: \"Product Category of each item\"\n  table_name: \"DIM_RETAPP_PRODUCTS\"\n  base_column_id: \"5c5fb061-749f-48b4-97bb-1722c77bed72\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Product\"\n  data_type: VARCHAR\n  sample_values: \"cotton board shorts\"\n  sample_values: \"hi-tech hw mountaineering socks\"\n  sample_values: \"falcon t-shirt\"\n  col_type: ATTRIBUTE\n  guid: \"c3c7e3a2-8595-42b3-a802-432e4677632d\"\n  column_description: \"Product name for the SKU\"\n  table_name: \"DIM_RETAPP_PRODUCTS\"\n  base_column_id: \"45e6518f-b1f7-4760-935e-ddabece88401\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Region\"\n  data_type: VARCHAR\n  sample_values: \"midwest\"\n  sample_values: \"east\"\n  sample_values: \"west\"\n  col_type: ATTRIBUTE\n  guid: \"d2302654-a5b8-474d-9915-e2049d9afe4e\"\n  column_description: \"Region the store falls under\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"7f521834-80b7-422b-b20d-5abbd49895a3\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Store\"\n  data_type: VARCHAR\n  sample_values: \"iowa (50266)\"\n  sample_values: \"idaho (83704)\"\n  sample_values: \"nevada (89052)\"\n  col_type: ATTRIBUTE\n  guid: \"db1f1100-1d05-4600-8f45-a0546667f664\"\n  column_description: \"Store name\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"7a89b5d5-d7da-49a2-8fe9-79010542e18b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"City\"\n  data_type: VARCHAR\n  sample_values: \"Berkeley\"\n  sample_values: \"boise\"\n  sample_values: \"boston\"\n  col_type: ATTRIBUTE\n  guid: \"c1a770a9-d7a7-4bea-9836-cc633b551f48\"\n  column_description: \"State of the store location\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"c621c619-bf76-45d8-af60-da3109991995\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"State\"\n  data_type: VARCHAR\n  sample_values: \"iowa\"\n  sample_values: \"idaho\"\n  sample_values: \"nevada\"\n  col_type: ATTRIBUTE\n  guid: \"fbb9da4d-85f2-4352-9cfb-4e4954b83795\"\n  column_description: \"City of the store\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"54076a3b-5276-493f-af15-fd362c9bcc06\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"County\"\n  data_type: VARCHAR\n  sample_values: \"Ada County\"\n  sample_values: \"Alameda County\"\n  sample_values: \"Polk County\"\n  col_type: ATTRIBUTE\n  guid: \"69655f93-fb24-4956-9592-12094cd67984\"\n  column_description: \"County of the store\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"77311ed6-1d6c-48fd-ad73-e0186520cacd\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Salesid\"\n  data_type: INT64\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"sales\"\n  guid: \"62b9883a-5600-4537-b473-3836869cde2d\"\n  table_name: \"FACT_RETAPP_SALES\"\n  base_column_id: \"373a9dca-4724-47e7-92d0-561f3db9dc82\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Latitude\"\n  data_type: DOUBLE\n  col_type: ATTRIBUTE\n  guid: \"e5a7e8a6-80fb-4312-b202-ed93f3f8b5f9\"\n  column_description: \"Coordinates of the store\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"5ab70760-539f-4c46-8d0c-44b597768457\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Longitude\"\n  data_type: DOUBLE\n  col_type: ATTRIBUTE\n  guid: \"4a75fc56-5dae-42e5-a72b-f0fe72350eec\"\n  column_description: \"Coordinates of the store\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"f7c29673-1cea-4f30-8fbf-5ccf60555d73\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Zip Code\"\n  data_type: VARCHAR\n  sample_values: \"01701\"\n  sample_values: \"02215\"\n  sample_values: \"03860\"\n  col_type: ATTRIBUTE\n  guid: \"d87db983-3edc-49e3-8f89-2e3fb066c992\"\n  column_description: \"Zipcode of the store\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"1051a4d9-c62a-491e-9207-ee8ba01ba375\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"SKU\"\n  data_type: INT64\n  col_type: ATTRIBUTE\n  guid: \"b549f05f-8f40-4a3c-ab11-4f44d6ad47a3\"\n  column_description: \"Stock Keeping Unit\"\n  table_name: \"DIM_RETAPP_PRODUCTS\"\n  base_column_id: \"1506b6d7-4f17-4971-b986-3466a49287e9\"\n  is_group_aggregate: false\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "cf7189e061815b0e", "flags": 1, "operationName": "lambda$getAnswerSuggestionFuture$33", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "2e0d47ea456153fe"}], "startTime": 1735684590620000, "duration": 3532985, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684594153000, "fields": [{"key": "event.log", "type": "string", "value": "Sage TML token list = [sum [Sales] [Date].yearly]"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "8209124e24ffb680", "flags": 1, "operationName": "getSageQueryGenResults", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "cf7189e061815b0e"}], "startTime": 1735684590620000, "duration": 3532545, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684590621000, "fields": [{"key": "event.log", "type": "string", "value": "Couldnt find cache value for key: 6a4a1b7d-3f5a-11eb-85f4-32ca5_38399c50-02f1-4310-804b-214b81f25333"}]}, {"timestamp": 1735684590621000, "fields": [{"key": "event.log", "type": "string", "value": "Populated properties in WorksheetFacetPayload"}]}, {"timestamp": 1735684590761000, "fields": [{"key": "event.log", "type": "string", "value": "Sage query gen cache hit = false"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "021d389d59b8ea04", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "86886a7669ca379a"}], "startTime": 1735684590621000, "duration": 26, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "dc16ecd5b41f0db6", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "86886a7669ca379a"}], "startTime": 1735684590621000, "duration": 139386, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "53050c2d03c3be4f", "flags": 1, "operationName": "getCachedSageQueryGenResultFromElastic", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "8209124e24ffb680"}], "startTime": 1735684590621000, "duration": 139895, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "86886a7669ca379a", "flags": 1, "operationName": "fetch", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "53050c2d03c3be4f"}], "startTime": 1735684590621000, "duration": 139857, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684590621000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=61b37746-a9bc-4433-b0cb-7a0e03225932 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"38399c50-02f1-4310-804b-214b81f25333\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"6a4a1b7d-3f5a-11eb-85f4-32ca5\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"match_phrase\":{\"NL_QUERY\":{\"query\":\"sales by year\"}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 1\"}}},{\"term\":{\"ORG_ID\":{\"value\":\"0\"}}},{\"bool\":{\"minimum_should_match\":\"1\",\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"61b37746-a9bc-4433-b0cb-7a0e03225932\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}}]}},\"size\":10}"}]}, {"timestamp": 1735684590761000, "fields": [{"key": "event.log", "type": "string", "value": "search-response : SearchResponse: {\"took\":136,\"timed_out\":false,\"_shards\":{\"failed\":0.0,\"successful\":1.0,\"total\":1.0,\"skipped\":0.0},\"hits\":{\"total\":{\"relation\":\"eq\",\"value\":0},\"hits\":[],\"max_score\":null}}"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "04ddfa392bf7c24e", "flags": 1, "operationName": "getSchema", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "b6c8989c84b79cd6"}], "startTime": 1735684590761000, "duration": 807752, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684591569000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from NL-to-SQL map: Sales,Region"}]}, {"timestamp": 1735684591569000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Query Hypothesis: Salesid,Sales,Date"}]}, {"timestamp": 1735684591569000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from KNN search on saved answers: Date,Product,Sales"}]}, {"timestamp": 1735684591569000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Semantic Value Search: "}]}, {"timestamp": 1735684591569000, "fields": [{"key": "event.log", "type": "string", "value": "Query Hypothesis column, sample values: {Sales=[], Salesid=[], Date=[]}"}]}, {"timestamp": 1735684591569000, "fields": [{"key": "event.log", "type": "string", "value": "Final Ranked Query Relevant Columns: Sales,Region,Date,Product,Salesid"}]}, {"timestamp": 1735684591569000, "fields": [{"key": "event.log", "type": "string", "value": "Final Query relevant column, sample values: {Sales=[], Product=[cotton board shorts, hi-tech hw mountaineering socks, falcon t-shirt], Region=[midwest, east, west], Salesid=[], Date=[]}"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "61ea7f6e568af521", "flags": 1, "operationName": "getSchemaFromDescriptors", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "04ddfa392bf7c24e"}], "startTime": 1735684590761000, "duration": 807166, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "b6c8989c84b79cd6", "flags": 1, "operationName": "generateSageQueries", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "8209124e24ffb680"}], "startTime": 1735684590761000, "duration": 3389722, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684590761000, "fields": [{"key": "event.log", "type": "string", "value": "NLPConfig: NLPConfig(dateTokenExtractionHeuristics=false, dateSQLFunctionHeuristics=true, dateSQLFunctionDefinitionV2=false, nl2TMLPromptGeneration=false, comparisonHeuristic=true, dateAggregationHeuristic=true, nlHandlerVersion=STABLE, removeOverlappingColumnDetailSampleValues=false, includeColumnSynonymsInPrompt=true, generateColumnMap=false, includeColumnValueSynonymsInPrompt=false, forEachHeuristic=true, seasonHeuristic=true, bypassCache=false, isColdStart=false, useZeroShotTMLPromptGeneration=true, includeColumnTableInfo=true, literacyPromptingEnabled=true, noSage=false, doNotReplaceWildcard=false, maxNumSelectItems=5, cotPromptingEnabled=false)"}]}, {"timestamp": 1735684594151000, "fields": [{"key": "event.log", "type": "string", "value": "UsedColumns-QUERY_HYPOTHESIS: 2"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "f4c36426d95943b3", "flags": 1, "operationName": "getSchemaFromQH", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "cf7189e061815b0e"}], "startTime": 1735684590762000, "duration": 47, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "2af4d1ce7322156c", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "b601c489e9e01981"}], "startTime": 1735684590762000, "duration": 296, "tags": [{"key": "NLSqlMappingRequest.worksheet", "type": "string", "value": "38399c50-02f1-4310-804b-214b81f25333"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "d4ee01316e29b623", "flags": 1, "operationName": "KNNSearch", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "d532616360fefd4b"}], "startTime": 1735684590762000, "duration": 805590, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684590762000, "fields": [{"key": "event.log", "type": "string", "value": "Fetching KNN for query: sales by year"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "8c14be8e251d46e4", "flags": 1, "operationName": "fetchNLSqlMappingsForQuery", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "cf7189e061815b0e"}], "startTime": 1735684590762000, "duration": 7854, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "1bf88581e6e2b260", "flags": 1, "operationName": "fetchSchemaFromConvContext", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "cf7189e061815b0e"}], "startTime": 1735684590762000, "duration": 22, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "b601c489e9e01981", "flags": 1, "operationName": "ElasticNLSqlMappingFetcher.fetch", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "646896eed8d3bace"}], "startTime": 1735684590762000, "duration": 7178, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684590763000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=61b37746-a9bc-4433-b0cb-7a0e03225932 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"38399c50-02f1-4310-804b-214b81f25333\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"6a4a1b7d-3f5a-11eb-85f4-32ca5\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"bool\":{\"minimum_should_match\":\"1\",\"must\":[{\"bool\":{\"minimum_should_match\":\"1\",\"should\":[{\"term\":{\"ORG_ID\":{\"value\":\"0\"}}},{\"bool\":{\"must_not\":[{\"exists\":{\"field\":\"ORG_ID\"}}]}}]}}],\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"61b37746-a9bc-4433-b0cb-7a0e03225932\"}}},{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"WORKSHEET_USER\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}},{\"range\":{\"UP_VOTES\":{\"gte\":1}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 0\"}}}],\"minimum_should_match\":\"1\",\"should\":[{\"match\":{\"PARENT_QUERY\":{\"query\":\"sales by year\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"year\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"sales\"}}}]}},\"size\":20,\"track_scores\":true}"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "646896eed8d3bace", "flags": 1, "operationName": "fetchRelevantFeedbackForQuery", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "8c14be8e251d46e4"}], "startTime": 1735684590762000, "duration": 7322, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "abb727e9f68f14f8", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "d4ee01316e29b623"}], "startTime": 1735684590762000, "duration": 15758, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "d6e6c37574468f79", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "646896eed8d3bace"}], "startTime": 1735684590762000, "duration": 97, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "d532616360fefd4b", "flags": 1, "operationName": "fetchKnnEntries", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "cf7189e061815b0e"}], "startTime": 1735684590762000, "duration": 806300, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684591568000, "fields": [{"key": "event.log", "type": "string", "value": "Feedback Column scores: "}]}, {"timestamp": 1735684591568000, "fields": [{"key": "event.log", "type": "string", "value": "Columns dropped from Knn Search "}]}, {"timestamp": 1735684591568000, "fields": [{"key": "event.log", "type": "string", "value": "Final Column scores: PRODUCTNAME_45e6518f-b1f7-4760-935e-ddabece88401=0.76657095, Product_c3c7e3a2-8595-42b3-a802-432e4677632d=0.76657095, RECORDDATE_a6a47c61-0ce2-4687-af5d-215726fc49bb=0.76657095, Date_fc2e527b-cd75-471a-8f04-669a8736feef=1.082813615, Sales_c45803c9-0c30-4e41-a5ae-3d385cd915bf=0.316242665"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "45802894cf0df54a", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "b601c489e9e01981"}], "startTime": 1735684590763000, "duration": 5877, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "bbb2091cd96cb1e2", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "b601c489e9e01981"}], "startTime": 1735684590769000, "duration": 81, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "ea6b9dd91ac31a9e", "flags": 1, "operationName": "searchByEmbedding", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "d4ee01316e29b623"}], "startTime": 1735684590778000, "duration": 789587, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "x.request.id", "type": "string", "value": "5e688e04-a560-4ef6-a9fe-8a27cdf1d705"}, {"key": "user.id", "type": "string", "value": "61b37746-a9bc-4433-b0cb-7a0e03225932"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "tenant.id", "type": "string", "value": "6a4a1b7d-3f5a-11eb-85f4-32ca5"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "654e8d627bbc167b", "flags": 1, "operationName": "applyImpressionWeightedFiltering", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "d532616360fefd4b"}], "startTime": 1735684591567000, "duration": 73, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684591567000, "fields": [{"key": "event.log", "type": "string", "value": "Total Answers Filtered out: 0"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "35ef355382852c14", "flags": 1, "operationName": "fetchSemanticValueMatches", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "cf7189e061815b0e"}], "startTime": 1735684591568000, "duration": 23, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "99806c150e2e6a0b", "flags": 1, "operationName": "mergeSchemas", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "04ddfa392bf7c24e"}], "startTime": 1735684591569000, "duration": 141, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "1aaee834c5123bdc", "flags": 1, "operationName": "filterColumnDetails", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "b6c8989c84b79cd6"}], "startTime": 1735684591569000, "duration": 242, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684591569000, "fields": [{"key": "event.log", "type": "string", "value": "Original Column Details: Salesid,Sales,SKU,Zip Code,Longitude,Latitude,County,State,City,Store,Region,Product,Product Type,Quantity Sold,Date"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "f7ffc156dda815bd", "flags": 1, "operationName": "selectColumns", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "1aaee834c5123bdc"}], "startTime": 1735684591569000, "duration": 42, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "d841f14a50a25823", "flags": 1, "operationName": "generateResponse", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "d2478c5a14d6555a"}], "startTime": 1735684591570000, "duration": 2580882, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "d2478c5a14d6555a", "flags": 1, "operationName": "generateTMLResponse", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "517db1687384fac2"}], "startTime": 1735684591570000, "duration": 2580915, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "517db1687384fac2", "flags": 1, "operationName": "generateQueries", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "b6c8989c84b79cd6"}], "startTime": 1735684591570000, "duration": 2580935, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "0ef44f1ca09df505", "flags": 1, "operationName": "getFewShotExamples", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "d841f14a50a25823"}], "startTime": 1735684591570000, "duration": 530266, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684592100000, "fields": [{"key": "event.log", "type": "string", "value": "Few-shot examples: \n'''\n\nRelevant keywords for phrase tokens are given below that can be used if needed (NOT relevant for formula expressions, as they have different functions), do not use any other keywords:\n{\"function\":\"top|bottom n\",\"description\":\"Generates the top (or bottom) n items from a sorted result. Substitute 'n' with number specified by the user in query. When 'sort by' is used with 'top', it automatically implies sorting is done in descending order. If 'bottom' is used with 'sort by', then it is in ascending order by default.\",\"example\":[\"top 10 [Region] sort by [Sales]\",\"bottom 25 [Region] sort by count [Region]\"]}\n{\"function\":\"sort by\",\"example\":[\"sort by [Sales] ascending\",\"sort by count [Region] descending\"]}\n{\"function\":\"by\",\"description\":\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\",\"example\":[\"by [Sales]\"]}\n{\"function\":\"begins|ends with\",\"description\":\"Returns all column values that begins or ends with a value defined in quotes.\",\"example\":[\"[Region] begins with 'midwest'\",\"[Region] ends with 'midwest'\"]}\n{\"function\":\"contains|not contains\",\"description\":\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\",\"example\":[\"[Region] contains 'midwest'\",\"[Region] contains 'midwest' 'east'\",\"[Region] not contains 'midwest'\"]}\n{\"function\":\"vs\",\"description\":\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = 'east' vs [region] = 'west'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = 'value1' vs [attribute] = 'value2'\",\"example\":[\"[Sales] [Region] = 'midwest' vs [Region] = 'east'\",\"[Sales] [Date] = 'this year' vs [Date] = 'last year'\",\"[Quantity Sold] [Product] = 'cotton board shorts' vs [Product] = 'hi-tech hw mountaineering socks' vs [Product] = 'falcon t-shirt'\"]}\n{\"function\":\"growth of\",\"description\":\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\",\"example\":[\"growth of [Sales] by [Date] [Date].'daily'\"]}\n{\"function\":\"unique count\",\"description\":\"Similar to SQL's SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"unique count [Region]\"]}\n{\"function\":\"count\",\"description\":\"Similar to SQL's SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"count [Region]\"]}\n{\"function\":\"in|not in\",\"description\":\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user's query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using 'in' or 'not in' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn't support use of 'vs' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where 'subsearch' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using 'not in'.\",\"example\":[\"[Region] in ([Region] [Region] begins with 'midwest' [Sales] > 100 top 10 [Region] sort by [Quantity Sold] descending)\",\"[Region] not in ([Region] [Region] begins with 'midwest' [Sales] > 100 top 10 [Region] sort by [Quantity Sold] descending)\"]}\n{\"function\":\"sum|average|min|max\",\"description\":\"Similar to SQL's SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\",\"example\":[\"sum [Sales]\",\"average [Sales]\"]}\n{\"function\":\"for each\",\"description\":\"Used on attributes i.e. columns with type text.\",\"example\":[\"for each [Region]\"]}\n\nYou can use the following function references with examples that are valid only for formula expressions. Use only relevant functions, if required:\n{\"function\":\"average\",\"description\":\"Returns the average of all the values of a column.\",\"example\":[\"average ( Sales )\"]}\n{\"function\":\"count\",\"description\":\"Returns the number of rows in the table containing the column.\",\"example\":[\"count ( Region )\"]}\n{\"function\":\"count_if\",\"description\":\"Returns the number of rows in the table containing the column that meet a given criteria.\",\"example\":[\"count_if ( (Sales > 10), Region )\",\"count_if ( (Sales > 10) , month ( Date ) )\"]}\n{\"function\":\"cumulative_average\",\"description\":\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_average (Sales, Region, Product)\"]}\n{\"function\":\"cumulative_sum\",\"description\":\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_sum (Sales, Region)\"]}\n{\"function\":\"group_aggregate\",\"description\":\"**Summary of the `group_aggregate` Function**\n\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\n\n**Function Syntax:**\n```\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\n```\n\n**Parameters:**\n\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\n   - `sum(measure0)`\n   - `count(attribute0)`\n   - `unique count (attribute0)`\n   - `average(measure1)`\n   - `avg(measure1)`\n\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\n   - **`query_groups()`**: Includes all groupings from the main query.\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\n\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\n   - **`query_filters()`**: Includes all filters from the main query.\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\n\n**Usage Notes:**\n\n- **Grouping Modifications:**\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\n\n- **Filter Modifications:**\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\n    - Example: `query_filters() + {attribute0 = 'value'}` adds a new filter condition.\n\n- **Process `grouping_set`**:\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\n  - **`query_groups()`**: Use the groupings defined in the main query.\n  - **Modify Groupings with `+` and `-`**:\n    - **Adding Groupings**: Combine main query groupings with additional columns.\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\n\n- **Process `filter_set`**:\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\n  - **`query_filters()`**: Use filters defined in the main query.\n  - **Modify Filters with `+` and `-`**:\n    - **Adding Filters**: Include additional filter conditions.\n    - **Excluding Filters**: Remove filters related to specific columns.\n\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\n\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\n\n**Key Concepts:**\n\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\n\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\n\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\n\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\n\n**Summary of Operators:**\n\n- **Groupings**:\n  - **`{ }`**: No groupings.\n  - **`query_groups()`**: Use main query groupings.\n  - **`+ {columns}`**: Add columns to groupings.\n  - **`- {columns}`**: Remove columns from groupings.\n\n- **Filters**:\n  - **`{ }`**: No filters.\n  - **`query_filters()`**: Use main query filters.\n  - **`+ {conditions}`**: Add filter conditions.\n  - **`- {columns}`**: Remove filters on columns.\n\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\",\"example\":[\"group_aggregate ( sum ( Sales ) , { Region } , { } )\",\"group_aggregate ( stddev ( Sales ) , { } , { } )\",\"group_aggregate ( variance ( Sales ), { Region , Product }, { day_of_week ( Date ) = 'friday' } )\",\"group_aggregate ( average ( Quantity Sold ), query_groups ( ), query_filters ( ) )\",\"group_aggregate ( count ( Product ), query_groups ( ) + { Region }, query_filters ( ) - { Product } )\",\"group_aggregate ( unique count ( Product ) , query_groups ( ) + { Region }, query_filters ( ) + { Product != 'cotton board shorts' } )\"]}\n{\"function\":\"max\",\"description\":\"Returns the maximum value of a column.\",\"example\":[\"max ( Sales )\"]}\n{\"function\":\"min\",\"description\":\"Returns the minimum value of a column.\",\"example\":[\"min (Sales)\"]}\n{\"function\":\"moving_average\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\",\"example\":[\"moving_average (Sales, 2, 1, Region)\"]}\n{\"function\":\"moving_sum\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\u2026Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\",\"example\":[\"moving_sum ( Sales, 2, 1, Region )\"]}\n{\"function\":\"percentile\",\"description\":\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\",\"example\":[\"percentile ( Sales , 99 , 'asc' )\",\"percentile ( Sales , 95 , 'desc' )\"]}\n{\"function\":\"stddev\",\"description\":\"Returns the standard deviation of all values of a column.\",\"example\":[\"stddev ( Sales )\"]}\n{\"function\":\"sum\",\"description\":\"Returns the sum of all the values of a numeric column i.e. measure.\",\"example\":[\"sum ( Sales )\"]}\n{\"function\":\"unique count\",\"description\":\"Returns the number of unique values of a column.\",\"example\":[\"unique count ( Region )\"]}\n{\"function\":\"unique_count_if\",\"description\":\"Returns the number of unique values of a column provided it meets a criteria.\",\"example\":[\"unique_count_if ( (Sales > 10) , Region )\",\"unique_count_if ( (Sales > 10) , month ( Date ) )\"]}\n{\"function\":\"variance\",\"description\":\"Returns the variance of all the values of a column.\",\"example\":[\"variance ( Sales )\"]}\n{\"function\":\"in|not in\",\"description\":\"Function that takes a column name and a list of values, used in 'formulas' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\",\"example\":[\"Region in { 'midwest' , 'east' }\",\"Region not in { 'midwest' , 'east' ,'west' }\"]}\n{\"function\":\"to_date\",\"description\":\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like 'march 2024' in formula language, since 'march 2024' is not a valid formula keyword but only valid in main tokens query.\",\"example\":[\"to_date ('2024-05-16', '%Y-%m-%d')\",\"Date >= to_date ('03/01/2024', '%m/%d/%Y') and Date <= to_date ('03/31/2024', '%m/%d/%Y')\"]}\n{\"function\":\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\",\"description\":\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords 'this year', 'this day', 'last year', 'last 2 quarters', so on in formula language.\",\"example\":[\"diff_days ( Date, today ( ) ) = 0\",\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\",\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\"]}\n{\"function\":\"if-else\",\"description\":\"if-else statements similar to the ones in programming languages, only use them in 'formulas' field.\",\"example\":[\"if ( Sales > 100 ) then 'High' else 'Low'\",\"if ( Sales > 100 ) then 'High' else if ( Quantity Sold > 100 and Region = 'midwest' ) then 'Medium' else 'Low'\"]}\n{\"function\":\"year|month|day\",\"description\":\"Functions below that are used to extract year, month, and day from a date column or even today() function.\",\"example\":[\"year ( Date ) = 2024\",\"month ( Date ) = 'June'\",\"day ( today ( ) ) = 2\"]}\n\n\nBelow are some examples of NL to phrase tokens translation, including usages of formulas. These examples are synthetic and are not derived from user feedback.\nThey are just for understanding of when & how to use the keywords and formula functions defined above:\n\n{\"query\":\"how many Sales were taken this year compared to last year, year to date\",\"tokens\":\"[Sales] [Date] = 'this year' vs [Date] = 'last year' [Date] = 'year to date'\"}\n{\"query\":\"I want to see Sales up to the end of March, comparing this year to last year\",\"desc\":\"Comparing Sales from the beginning of the year up to the end of March for `this year` with the same period in `last year`. The `in` query filter `[Date] in ( [Date] [Date].'day of year' [Date].'january' [Date].'february' [Date].'march' )` selects dates corresponding to January, February, and March. By using `[Date].'day of year'`, we ensure that we are matching the exact same days of the year. The `vs` keyword facilitates the comparison between these matching periods across `this year` and `last year`. This approach effectively calculates the 'same period last year' by filtering dates in `last year` that fall within the same range (January to March), allowing for a direct comparison of Sales between the two years for that specific period.\",\"tokens\":\"[Sales] [Date] in ( [Date] [Date].'day of year' [Date] = 'january' [Date] = 'february' [Date] = 'march' ) [Date] = 'this year' vs [Date] = 'last year'\"}\n{\"query\":\"for my top 10 Region last year, what are the monthly Sales this year\",\"desc\":\"First, use a top sub-query to find the top 10 attributes last year. Then, use that attribute in the main query to find their monthly measure this year.\",\"tokens\":\"[Region] [Date].monthly [Sales] [Date] = 'this year' [Region] in ( [Region] [Date] = 'last year' top 10 [Region] sort by [Sales] )\"}\n{\"query\":\"I want to compare Sales for this year up to today with the same period last year\",\"desc\":\"Comparing year-to-date Sales up to today for `this year` with the same period from `last year`. The `in` query filter `[Date] in ( [Date] [Date].'day of year' [Date] before [Date].'today' )` selects all dates from the beginning of the year up to today in `this year`. By using `vs` with `[Date] = 'last year'`, we compare these dates with the matching period in `last year`. The phrase `same period last year` is thus calculated by filtering dates in `last year` that are in the same 'day of year' range as in `this year` up to today.\",\"tokens\":\"[Sales] [Date] in ( [Date] [Date].'day of year' [Date] before [Date] = 'today' ) [Date] = 'this year' vs [Date] = 'last year' [Date] = 'year to date'\"}\n{\"query\":\"what is cumulative/running Sales for this year\",\"desc\":\"This template is for calculating the cumulative or running sum of a Sales for this year. It is always accompanied by date bucket/aggregation like monthly if accumulation of metric is done on a date column\",\"tokens\":\"[cumulative Sales] [Date].monthly [Date] = 'this year'\",\"formulas\":[{\"name\":\"cumulative Sales\",\"expression\":\"cumulative_sum ( Sales , Date )\"}]}\n{\"query\":\"what is the Sales over the past 2 years to date\",\"desc\":\"When the query asks for past/last n years from current date, then use between operator with exact dates, example below assuming current date is 4th November 2024 in mm/dd/yyyy format (use locale format when returning answers). Subtracting 2 years from current date would give 11/04/2022\",\"tokens\":\"[Sales] [Date] between '11/04/2022' and '11/04/2024'\"}\n{\"query\":\"Compare Sales for this month with the same month last year\",\"desc\":\"Comparing Sales for the current month with the same month from last year. The `in` query filter `[Date] in ( [Date] [Date].'month of year' [Date].'this month' )` selects all dates that fall in the same month across all years, effectively isolating the month of interest using 'month of year'. By applying `[Date].'this year'` and `[Date].'last year'`, we limit the data to the current year and the previous year. The `vs` keyword is used to compare the Sales for these dates between `this year` and `last year`, enabling a direct comparison of the same month across the two years.\",\"tokens\":\"[Sales] [Date] in ( [Date] [Date].'month of year' [Date] = 'this month' ) [Date] = 'this year' vs [Date] = 'last year'\"}\n{\"query\":\"calculate average of Sales in last to last year\",\"tokens\":\"average [Sales] [Date] = '2 years ago'\"}\n{\"query\":\"Sales sold in oct, nov, dec last year compared with 2 years ago for midwests\",\"tokens\":\"[Sales] [Date] = 'october' [Date] = 'november' [Date] = 'december' [Date] = 'last year' vs [Date] = '2 years ago' [Date].'month of year' [Region] = 'midwest'\"}\n{\"query\":\"show me a kpi chart showing year to date Sales for this year comparing it with Sales from the last year for the same period\",\"tokens\":\"[Sales] [Date] [Date] = 'year to date' [Date] = 'this year' vs [Date] = 'last year'\"}\n{\"query\":\"For every year, which Region had largest Sales.\",\"desc\":\"'for each' phrase is used when using 'top x' phrase with a date bucketing filter.\",\"tokens\":\"top 10 [Region] sort by sum [Sales] for each [Date] [Date].yearly\"}\n{\"query\":\"what is the average Sales per month since October 2024\",\"tokens\":\"average [Sales] [Date].monthly [Date] >= 'october 2024'\"}\n{\"query\":\"what is the total Sales in winter months\",\"desc\":\"For total Sales just return the output column [Sales] & it internally calculates sum of the values.\",\"tokens\":\"[Sales] [Date] = 'december' [Date] = 'january' [Date] = 'february'\"}\n{\"query\":\"show me month on month Sales growth for midwest in 2022\",\"tokens\":\"growth of sum [Sales] by [Date] [Date].monthly [Region] = 'midwest' [Date] = '2022'\"}\n{\"query\":\"how has the Sales changed over the years for the top 5 Region by Sales\",\"desc\":\"First, find the top 5 Region by Sales. Then, for these Region, display their Sales per year to show how it has changed over the years by using IN sub-query to join with the main query.\",\"tokens\":\"[Region] [Sales] [Date].yearly [Region] in ( [Region] top 5 [Region] sort by sum [Sales] )\"}\n\nBelow are examples from user feedback that map queries to phrase tokens and/or formulas:\n\n- **Focus on relevant numeric, text, or date columns and their filters.**\n- **Prefer user feedback values over schema values if conflicts arise.**\n- **For columns not in the schema, use formulas from user examples.**\n- **Ensure formula expressions match the current query's columns and filters.**\n- **Include relevant formula names in the tokens field, encapsulated in `[]` brackets.**\n- **When creating multiple formulas with dependencies, include all of them in the formulas list.**\n- **In case of conflicts between user feedback and synthetic examples, user feedback should take precedence.**\n\n**Examples from user feedback below:**\n{\"query\":\"sales by region year on year\",\"tokens\":\"sum [Sales] [Region]\"}\n\n'''\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "22768934187623be", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "0ef44f1ca09df505"}], "startTime": 1735684591578000, "duration": 13044, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "21dc4d89a6eed8c2", "flags": 1, "operationName": "getEmbeddingScoresForExamples", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "0ef44f1ca09df505"}], "startTime": 1735684591597000, "duration": 503276, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "7612af5e20eb20fc", "flags": 1, "operationName": "batchEncode", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "21dc4d89a6eed8c2"}], "startTime": 1735684591597000, "duration": 502236, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "b9041fb13c14935c", "flags": 1, "operationName": "getTMLResponseInfoTranslation", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "d841f14a50a25823"}], "startTime": 1735684592100000, "duration": 2049493, "tags": [{"key": "x.request.id", "type": "string", "value": "5e688e04-a560-4ef6-a9fe-8a27cdf1d705"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684594150000, "fields": [{"key": "event.log", "type": "string", "value": "LLM response = {\n  \"reasoning\": {\n    \"assumptions\": \"The query is asking for the total sales aggregated by year.\"\n  },\n  \"tokens\": \"sum [Sales] [Date].yearly\",\n  \"formulas\": []\n}"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "31fc8092a0ee6e46", "flags": 1, "operationName": "LLMGatewayNLPService::getResponsesFromLLM", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "b9041fb13c14935c"}], "startTime": 1735684592102000, "duration": 2047736, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684592103000, "fields": [{"key": "event.log", "type": "string", "value": "Chat Completion prompt = \nSYSTEM:\nYour task is to generate the phrase tokens (a new simple keyword based language) for a natural language query.\nYou are given the following:\n 1. Definition & rules of the language\n 2. References for which functions and date keywords to use with examples.\n 3. Table Schema with column names, their data type, synonyms & sample values.\n 4. Examples of similar queries & their tokens from users feedback mappings.\n\nThe response should be well-formatted JSON as shown below:\n{\n  \"reasoning\": {\"assumptions\":\"\"},\n  \"tokens\": \"\",\n  \"formulas\":[{\"name\":\"\", \"expression\":\"\"}]\n}\nRemember the following types of columns:\n 1. measure: columns with numeric data type: int, double, long, float.\n 2. attribute: columns with categorical type: text, bool or date.\nWhat are 'output columns'?:\nColumn names that are only encapsulated in [] brackets without any filters applied. They are essentially columns used in SELECT clauses.\nIn phrase tokens, column names are present inside [] brackets and the filters applied on them are present in quotes.\nRules to generate the response:\n1. When generating formula names that are used in 'tokens' field, ensure the name is a relevant substring of the current user query.\n2. Formula expressions DO NOT contain column names in quotes [], it has a different syntax that you can infer from the users' examples and function references for formulas.\n3. If from the current query, you are not able to find any column in schema or formula name in users' examples, select a best effort column from the table schema. Do not return an empty answer & do not hallucinate column names.\n4. If in the final tokens there are only filters present, add a relevant 'output column' to the final tokens, because only filters present in 'tokens' output is not a valid answer. Choose the output column based on the context of the query. Example: {\"tokens\": \"[column1] = 'value1' [column2] = 'value2'\"} is not a valid answer, this:\n{\"tokens\": \"[column1] = 'value1' [column2] = 'value2' [column2]\"} is because it has an output column.\n5. Any occurrences of 'jan', 'feb' or related short forms of month names in natural language needs to be expanded to complete name of the month when used as date filters in phrase tokens. However, do not expand them if they are used as filter values in non-date columns.\n6. Only use keywords and formula functions that are present in the provided reference examples and users' usage/feedback history.\n7. If there is a filter on null value, always encapsulate it in quotes and curly brackets '{}' like '{null}'. Example: column_name != '{null}'\n8. count or unique count keywords (or formula functions) are only allowed on attributes i.e. text or date type columns, do not apply them on measure or numeric columns.\n9. In phrase tokens language, values applied on the same column like:\n[column] = 'value1' [column] = 'value2' behave as OR filters, whereas values applied on different columns like: [column1] = 'value1' [column2] = 'value2' behave as AND filters\n10. Comparison between numeric (i.e measure) columns can only be done in formulas. eg: 'measure > sum [measure]' in tokens field is INVALID, but 'measure > sum(measure)' is valid in formula expressions.\n11. When generating formulas, ensure that all dependent formulas are included in the formulas field. A dependent formula is defined as any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\n12. Avoid generating redundant formulas, example: {tokens:\"[Revenue]\",formulas: [{\"name\":\"total revenue\",\"expression\":\"sum(Revenue)\"}], where token: [Revenue] is same as formula name 'total revenue' as [Revenue] is internally evaluated with default aggregation of 'sum'.\n13. In formula expressions, date filters like 'last month' should be represented using formula functions that calculate the date range, such as `diff_months` or `to_date`.\n14. DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \"unique users\", expression: \"unique count ( user id )\",then you cannot apply sum ( unique users ) because it is already aggregated in formula language i.e. \"group_aggregate ( sum ( unique users ) , { } , { } )\" is incorrect because it will fail formula grammar check. The correct expression should be: \"group_aggregate ( unique users , { } , { } )\" i.e. without any aggregation function applied on aggregated formula/column.\n\n\nYou can use the following date keywords only in 'tokens' field (NOT VALID for formula expressions):\n{\"function\":\"last|next month\",\"example\":[\"[Date] = 'last month'\"]}\n{\"function\":\"last|next n days\",\"example\":[\"[Date] = 'last 7 days'\",\"[Date] = 'next 7 days'\"]}\n{\"function\":\"last|next n months\",\"example\":[\"[Date] = 'last 12 months'\"]}\n{\"function\":\"last|next n quarters\",\"example\":[\"[Date] = 'last 12 quarters'\"]}\n{\"function\":\"last|next n weeks\",\"example\":[\"[Date] = 'last 12 weeks'\"]}\n{\"function\":\"last|next n years\",\"example\":[\"[Date] = 'last 12 years'\"]}\n{\"function\":\"last|next quarter\",\"example\":[\"[Date] = 'last quarter'\"]}\n{\"function\":\"last|next week\",\"example\":[\"[Date] = 'last week'\"]}\n{\"function\":\"last|next year\",\"example\":[\"[Date] = 'last year'\"]}\n{\"function\":\"<month>\",\"example\":[\"[Date] = 'march'\",\"[Date] = 'april'\"]}\n{\"function\":\"<year>\",\"example\":[\"[Date] = '2024'\"]}\n{\"function\":\"<weekday>\",\"example\":[\"[Date] = 'Saturday'\",\"[Date] = 'Monday'\"]}\n{\"function\":\"<month_year>\",\"example\":[\"[Date] = 'march 2024'\",\"[Date] = 'april 2024'\"]}\n{\"function\":\"this day|month|year|quarter|week\",\"example\":[\"[Date] = 'this day'\",\"[Date] = 'this quarter'\"]}\n{\"function\":\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\",\"example\":[\"[Date] = 'last 2 quarters for each year'\",\"[Date] = 'last 10 weeks for each month'\"]}\n{\"function\":\"yearly|quarterly|monthly|weekly|daily|hourly\",\"description\":\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\",\"example\":[\"[Date].yearly\",\"[Date].quarterly\",\"[Date].monthly\",\"[Date].weekly\",\"[Date].daily\"]}\n{\"function\":\"between ... and ...\",\"description\":\"Selects records where the date is between the two specified dates. The dates must be in the format 'MM/dd/yyyy'. 'january 2024' type of dates are not supported, they have to be in a date format.\",\"example\":[\"[Date] between '01/30/2012' and '01/30/2014'\"]}\n{\"function\":\"month over month|quarter over quarter|year over year|week over week\",\"description\":\"Only used with 'growth of' keyword. The 'year over year' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The 'month over month' keyword compares data between the same time period from different months.\",\"example\":[\"growth of [Sales] by [Date] [Date].daily month over month\",\"growth of [Sales] by [Date] [Date].monthly year over year\",\"growth of [Sales] by [Date] [Date].monthly quarter over quarter\"]}\n{\"function\":\"day|week of month|quarter|year\",\"description\":\"Returns the day|week number of the month quarter or year for the date value. Example, 'day of month' for 13th Jan would be 13. 'day of year' for 13th Jan would be 13. 'week of month' for 13th Jan would be 2.\",\"example\":[\"[Date].'day of month'\",\"[Date].'month of year'\",\"[Date].'week of year'\"]}\n{\"function\":\"n months|weeks|days|quarters|years ago\",\"example\":[\"[Date] = '10 months ago'\",\"[Date] = '5 years ago'\"]}\n{\"function\":\"detailed\",\"description\":\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\",\"example\":[\"[Date] detailed\"]}\nFor reference today's date in MM/dd/yyyy format: 12/31/2024\n\n\nUSER:\nCREATE TABLE [Sample] Retail Apparel Worksheet (\nSales double /*Desc: Total revenue generated from each transaction. Group: FACT_RETAPP_SALES.*/,\nRegion text /*Desc: Region the store falls under Values: 'east', 'midwest', 'west'. Group: DIM_RETAPP_STORES.*/,\nDate date /*Desc: Date of the sales transaction Current year is 2024.. Group: FACT_RETAPP_SALES.*/,\nProduct text /*Desc: Product name for the SKU Values: 'cotton board shorts', 'falcon t-shirt', 'hi-tech hw mountaineering socks'. Group: DIM_RETAPP_PRODUCTS.*/,\nSalesid int /*. Group: FACT_RETAPP_SALES.*/,\nSKU int /*Desc: Stock Keeping Unit. Group: DIM_RETAPP_PRODUCTS.*/,\nZip Code text /*Desc: Zipcode of the store Values: '01701', '02215', '03860'. Group: DIM_RETAPP_STORES.*/,\nLongitude double /*Desc: Coordinates of the store. Group: DIM_RETAPP_STORES.*/,\nLatitude double /*Desc: Coordinates of the store. Group: DIM_RETAPP_STORES.*/,\nCounty text /*Desc: County of the store Values: 'ada county', 'alameda county', 'polk county'. Group: DIM_RETAPP_STORES.*/,\nState text /*Desc: City of the store Values: 'idaho', 'iowa', 'nevada'. Group: DIM_RETAPP_STORES.*/,\nCity text /*Desc: State of the store location Values: 'berkeley', 'boise', 'boston'. Group: DIM_RETAPP_STORES.*/,\nStore text /*Desc: Store name Values: 'idaho (83704)', 'iowa (50266)', 'nevada (89052)'. Group: DIM_RETAPP_STORES.*/,\nProduct Type text /*Desc: Product Category of each item Values: 'bags', 'dresses', 'jackets'. Group: DIM_RETAPP_PRODUCTS.*/,\nQuantity Sold int /*Desc: Total basket quantity from each transaction. Group: FACT_RETAPP_SALES.*/)\n\n'''\n\nRelevant keywords for phrase tokens are given below that can be used if needed (NOT relevant for formula expressions, as they have different functions), do not use any other keywords:\n{\"function\":\"top|bottom n\",\"description\":\"Generates the top (or bottom) n items from a sorted result. Substitute 'n' with number specified by the user in query. When 'sort by' is used with 'top', it automatically implies sorting is done in descending order. If 'bottom' is used with 'sort by', then it is in ascending order by default.\",\"example\":[\"top 10 [Region] sort by [Sales]\",\"bottom 25 [Region] sort by count [Region]\"]}\n{\"function\":\"sort by\",\"example\":[\"sort by [Sales] ascending\",\"sort by count [Region] descending\"]}\n{\"function\":\"by\",\"description\":\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\",\"example\":[\"by [Sales]\"]}\n{\"function\":\"begins|ends with\",\"description\":\"Returns all column values that begins or ends with a value defined in quotes.\",\"example\":[\"[Region] begins with 'midwest'\",\"[Region] ends with 'midwest'\"]}\n{\"function\":\"contains|not contains\",\"description\":\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\",\"example\":[\"[Region] contains 'midwest'\",\"[Region] contains 'midwest' 'east'\",\"[Region] not contains 'midwest'\"]}\n{\"function\":\"vs\",\"description\":\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = 'east' vs [region] = 'west'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = 'value1' vs [attribute] = 'value2'\",\"example\":[\"[Sales] [Region] = 'midwest' vs [Region] = 'east'\",\"[Sales] [Date] = 'this year' vs [Date] = 'last year'\",\"[Quantity Sold] [Product] = 'cotton board shorts' vs [Product] = 'hi-tech hw mountaineering socks' vs [Product] = 'falcon t-shirt'\"]}\n{\"function\":\"growth of\",\"description\":\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\",\"example\":[\"growth of [Sales] by [Date] [Date].'daily'\"]}\n{\"function\":\"unique count\",\"description\":\"Similar to SQL's SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"unique count [Region]\"]}\n{\"function\":\"count\",\"description\":\"Similar to SQL's SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"count [Region]\"]}\n{\"function\":\"in|not in\",\"description\":\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user's query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using 'in' or 'not in' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn't support use of 'vs' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where 'subsearch' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using 'not in'.\",\"example\":[\"[Region] in ([Region] [Region] begins with 'midwest' [Sales] > 100 top 10 [Region] sort by [Quantity Sold] descending)\",\"[Region] not in ([Region] [Region] begins with 'midwest' [Sales] > 100 top 10 [Region] sort by [Quantity Sold] descending)\"]}\n{\"function\":\"sum|average|min|max\",\"description\":\"Similar to SQL's SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\",\"example\":[\"sum [Sales]\",\"average [Sales]\"]}\n{\"function\":\"for each\",\"description\":\"Used on attributes i.e. columns with type text.\",\"example\":[\"for each [Region]\"]}\n\nYou can use the following function references with examples that are valid only for formula expressions. Use only relevant functions, if required:\n{\"function\":\"average\",\"description\":\"Returns the average of all the values of a column.\",\"example\":[\"average ( Sales )\"]}\n{\"function\":\"count\",\"description\":\"Returns the number of rows in the table containing the column.\",\"example\":[\"count ( Region )\"]}\n{\"function\":\"count_if\",\"description\":\"Returns the number of rows in the table containing the column that meet a given criteria.\",\"example\":[\"count_if ( (Sales > 10), Region )\",\"count_if ( (Sales > 10) , month ( Date ) )\"]}\n{\"function\":\"cumulative_average\",\"description\":\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_average (Sales, Region, Product)\"]}\n{\"function\":\"cumulative_sum\",\"description\":\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_sum (Sales, Region)\"]}\n{\"function\":\"group_aggregate\",\"description\":\"**Summary of the `group_aggregate` Function**\n\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\n\n**Function Syntax:**\n```\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\n```\n\n**Parameters:**\n\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\n   - `sum(measure0)`\n   - `count(attribute0)`\n   - `unique count (attribute0)`\n   - `average(measure1)`\n   - `avg(measure1)`\n\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\n   - **`query_groups()`**: Includes all groupings from the main query.\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\n\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\n   - **`query_filters()`**: Includes all filters from the main query.\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\n\n**Usage Notes:**\n\n- **Grouping Modifications:**\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\n\n- **Filter Modifications:**\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\n    - Example: `query_filters() + {attribute0 = 'value'}` adds a new filter condition.\n\n- **Process `grouping_set`**:\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\n  - **`query_groups()`**: Use the groupings defined in the main query.\n  - **Modify Groupings with `+` and `-`**:\n    - **Adding Groupings**: Combine main query groupings with additional columns.\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\n\n- **Process `filter_set`**:\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\n  - **`query_filters()`**: Use filters defined in the main query.\n  - **Modify Filters with `+` and `-`**:\n    - **Adding Filters**: Include additional filter conditions.\n    - **Excluding Filters**: Remove filters related to specific columns.\n\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\n\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\n\n**Key Concepts:**\n\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\n\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\n\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\n\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\n\n**Summary of Operators:**\n\n- **Groupings**:\n  - **`{ }`**: No groupings.\n  - **`query_groups()`**: Use main query groupings.\n  - **`+ {columns}`**: Add columns to groupings.\n  - **`- {columns}`**: Remove columns from groupings.\n\n- **Filters**:\n  - **`{ }`**: No filters.\n  - **`query_filters()`**: Use main query filters.\n  - **`+ {conditions}`**: Add filter conditions.\n  - **`- {columns}`**: Remove filters on columns.\n\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\",\"example\":[\"group_aggregate ( sum ( Sales ) , { Region } , { } )\",\"group_aggregate ( stddev ( Sales ) , { } , { } )\",\"group_aggregate ( variance ( Sales ), { Region , Product }, { day_of_week ( Date ) = 'friday' } )\",\"group_aggregate ( average ( Quantity Sold ), query_groups ( ), query_filters ( ) )\",\"group_aggregate ( count ( Product ), query_groups ( ) + { Region }, query_filters ( ) - { Product } )\",\"group_aggregate ( unique count ( Product ) , query_groups ( ) + { Region }, query_filters ( ) + { Product != 'cotton board shorts' } )\"]}\n{\"function\":\"max\",\"description\":\"Returns the maximum value of a column.\",\"example\":[\"max ( Sales )\"]}\n{\"function\":\"min\",\"description\":\"Returns the minimum value of a column.\",\"example\":[\"min (Sales)\"]}\n{\"function\":\"moving_average\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\",\"example\":[\"moving_average (Sales, 2, 1, Region)\"]}\n{\"function\":\"moving_sum\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\u2026Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\",\"example\":[\"moving_sum ( Sales, 2, 1, Region )\"]}\n{\"function\":\"percentile\",\"description\":\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\",\"example\":[\"percentile ( Sales , 99 , 'asc' )\",\"percentile ( Sales , 95 , 'desc' )\"]}\n{\"function\":\"stddev\",\"description\":\"Returns the standard deviation of all values of a column.\",\"example\":[\"stddev ( Sales )\"]}\n{\"function\":\"sum\",\"description\":\"Returns the sum of all the values of a numeric column i.e. measure.\",\"example\":[\"sum ( Sales )\"]}\n{\"function\":\"unique count\",\"description\":\"Returns the number of unique values of a column.\",\"example\":[\"unique count ( Region )\"]}\n{\"function\":\"unique_count_if\",\"description\":\"Returns the number of unique values of a column provided it meets a criteria.\",\"example\":[\"unique_count_if ( (Sales > 10) , Region )\",\"unique_count_if ( (Sales > 10) , month ( Date ) )\"]}\n{\"function\":\"variance\",\"description\":\"Returns the variance of all the values of a column.\",\"example\":[\"variance ( Sales )\"]}\n{\"function\":\"in|not in\",\"description\":\"Function that takes a column name and a list of values, used in 'formulas' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\",\"example\":[\"Region in { 'midwest' , 'east' }\",\"Region not in { 'midwest' , 'east' ,'west' }\"]}\n{\"function\":\"to_date\",\"description\":\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like 'march 2024' in formula language, since 'march 2024' is not a valid formula keyword but only valid in main tokens query.\",\"example\":[\"to_date ('2024-05-16', '%Y-%m-%d')\",\"Date >= to_date ('03/01/2024', '%m/%d/%Y') and Date <= to_date ('03/31/2024', '%m/%d/%Y')\"]}\n{\"function\":\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\",\"description\":\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords 'this year', 'this day', 'last year', 'last 2 quarters', so on in formula language.\",\"example\":[\"diff_days ( Date, today ( ) ) = 0\",\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\",\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\"]}\n{\"function\":\"if-else\",\"description\":\"if-else statements similar to the ones in programming languages, only use them in 'formulas' field.\",\"example\":[\"if ( Sales > 100 ) then 'High' else 'Low'\",\"if ( Sales > 100 ) then 'High' else if ( Quantity Sold > 100 and Region = 'midwest' ) then 'Medium' else 'Low'\"]}\n{\"function\":\"year|month|day\",\"description\":\"Functions below that are used to extract year, month, and day from a date column or even today() function.\",\"example\":[\"year ( Date ) = 2024\",\"month ( Date ) = 'June'\",\"day ( today ( ) ) = 2\"]}\n\n\nBelow are some examples of NL to phrase tokens translation, including usages of formulas. These examples are synthetic and are not derived from user feedback.\nThey are just for understanding of when & how to use the keywords and formula functions defined above:\n\n{\"query\":\"how many Sales were taken this year compared to last year, year to date\",\"tokens\":\"[Sales] [Date] = 'this year' vs [Date] = 'last year' [Date] = 'year to date'\"}\n{\"query\":\"I want to see Sales up to the end of March, comparing this year to last year\",\"desc\":\"Comparing Sales from the beginning of the year up to the end of March for `this year` with the same period in `last year`. The `in` query filter `[Date] in ( [Date] [Date].'day of year' [Date].'january' [Date].'february' [Date].'march' )` selects dates corresponding to January, February, and March. By using `[Date].'day of year'`, we ensure that we are matching the exact same days of the year. The `vs` keyword facilitates the comparison between these matching periods across `this year` and `last year`. This approach effectively calculates the 'same period last year' by filtering dates in `last year` that fall within the same range (January to March), allowing for a direct comparison of Sales between the two years for that specific period.\",\"tokens\":\"[Sales] [Date] in ( [Date] [Date].'day of year' [Date] = 'january' [Date] = 'february' [Date] = 'march' ) [Date] = 'this year' vs [Date] = 'last year'\"}\n{\"query\":\"for my top 10 Region last year, what are the monthly Sales this year\",\"desc\":\"First, use a top sub-query to find the top 10 attributes last year. Then, use that attribute in the main query to find their monthly measure this year.\",\"tokens\":\"[Region] [Date].monthly [Sales] [Date] = 'this year' [Region] in ( [Region] [Date] = 'last year' top 10 [Region] sort by [Sales] )\"}\n{\"query\":\"I want to compare Sales for this year up to today with the same period last year\",\"desc\":\"Comparing year-to-date Sales up to today for `this year` with the same period from `last year`. The `in` query filter `[Date] in ( [Date] [Date].'day of year' [Date] before [Date].'today' )` selects all dates from the beginning of the year up to today in `this year`. By using `vs` with `[Date] = 'last year'`, we compare these dates with the matching period in `last year`. The phrase `same period last year` is thus calculated by filtering dates in `last year` that are in the same 'day of year' range as in `this year` up to today.\",\"tokens\":\"[Sales] [Date] in ( [Date] [Date].'day of year' [Date] before [Date] = 'today' ) [Date] = 'this year' vs [Date] = 'last year' [Date] = 'year to date'\"}\n{\"query\":\"what is cumulative/running Sales for this year\",\"desc\":\"This template is for calculating the cumulative or running sum of a Sales for this year. It is always accompanied by date bucket/aggregation like monthly if accumulation of metric is done on a date column\",\"tokens\":\"[cumulative Sales] [Date].monthly [Date] = 'this year'\",\"formulas\":[{\"name\":\"cumulative Sales\",\"expression\":\"cumulative_sum ( Sales , Date )\"}]}\n{\"query\":\"what is the Sales over the past 2 years to date\",\"desc\":\"When the query asks for past/last n years from current date, then use between operator with exact dates, example below assuming current date is 4th November 2024 in mm/dd/yyyy format (use locale format when returning answers). Subtracting 2 years from current date would give 11/04/2022\",\"tokens\":\"[Sales] [Date] between '11/04/2022' and '11/04/2024'\"}\n{\"query\":\"Compare Sales for this month with the same month last year\",\"desc\":\"Comparing Sales for the current month with the same month from last year. The `in` query filter `[Date] in ( [Date] [Date].'month of year' [Date].'this month' )` selects all dates that fall in the same month across all years, effectively isolating the month of interest using 'month of year'. By applying `[Date].'this year'` and `[Date].'last year'`, we limit the data to the current year and the previous year. The `vs` keyword is used to compare the Sales for these dates between `this year` and `last year`, enabling a direct comparison of the same month across the two years.\",\"tokens\":\"[Sales] [Date] in ( [Date] [Date].'month of year' [Date] = 'this month' ) [Date] = 'this year' vs [Date] = 'last year'\"}\n{\"query\":\"calculate average of Sales in last to last year\",\"tokens\":\"average [Sales] [Date] = '2 years ago'\"}\n{\"query\":\"Sales sold in oct, nov, dec last year compared with 2 years ago for midwests\",\"tokens\":\"[Sales] [Date] = 'october' [Date] = 'november' [Date] = 'december' [Date] = 'last year' vs [Date] = '2 years ago' [Date].'month of year' [Region] = 'midwest'\"}\n{\"query\":\"show me a kpi chart showing year to date Sales for this year comparing it with Sales from the last year for the same period\",\"tokens\":\"[Sales] [Date] [Date] = 'year to date' [Date] = 'this year' vs [Date] = 'last year'\"}\n{\"query\":\"For every year, which Region had largest Sales.\",\"desc\":\"'for each' phrase is used when using 'top x' phrase with a date bucketing filter.\",\"tokens\":\"top 10 [Region] sort by sum [Sales] for each [Date] [Date].yearly\"}\n{\"query\":\"what is the average Sales per month since October 2024\",\"tokens\":\"average [Sales] [Date].monthly [Date] >= 'october 2024'\"}\n{\"query\":\"what is the total Sales in winter months\",\"desc\":\"For total Sales just return the output column [Sales] & it internally calculates sum of the values.\",\"tokens\":\"[Sales] [Date] = 'december' [Date] = 'january' [Date] = 'february'\"}\n{\"query\":\"show me month on month Sales growth for midwest in 2022\",\"tokens\":\"growth of sum [Sales] by [Date] [Date].monthly [Region] = 'midwest' [Date] = '2022'\"}\n{\"query\":\"how has the Sales changed over the years for the top 5 Region by Sales\",\"desc\":\"First, find the top 5 Region by Sales. Then, for these Region, display their Sales per year to show how it has changed over the years by using IN sub-query to join with the main query.\",\"tokens\":\"[Region] [Sales] [Date].yearly [Region] in ( [Region] top 5 [Region] sort by sum [Sales] )\"}\n\nBelow are examples from user feedback that map queries to phrase tokens and/or formulas:\n\n- **Focus on relevant numeric, text, or date columns and their filters.**\n- **Prefer user feedback values over schema values if conflicts arise.**\n- **For columns not in the schema, use formulas from user examples.**\n- **Ensure formula expressions match the current query's columns and filters.**\n- **Include relevant formula names in the tokens field, encapsulated in `[]` brackets.**\n- **When creating multiple formulas with dependencies, include all of them in the formulas list.**\n- **In case of conflicts between user feedback and synthetic examples, user feedback should take precedence.**\n\n**Examples from user feedback below:**\n{\"query\":\"sales by region year on year\",\"tokens\":\"sum [Sales] [Region]\"}\n\n'''\n\nIMPORTANT: Column names below separated by comma (,) co-occur with each other and form a use-case/group. When trying to select column names relevant for current user query, prefer the co-occurring/neighboring columns for answering the question. Columns from across the groups are not generally used together.\n\nGroup 0 Sales,Product,Date\n\n\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\u2014never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query's intent.\n**Include Formula Names in Tokens for Display**: - If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI.\n\nThe response should be well-formatted JSON as shown below:\n{ \"reasoning\": {\"assumptions\":\"\"}, \"tokens\": \"\", \"formulas\":[{\"name\":\"\", \"expression\":\"\"}]}\nEnsure the assumptions is short & concise.\nQuestion: sales by year\n"}]}, {"timestamp": 1735684592104000, "fields": [{"key": "event.log", "type": "string", "value": "Completion Request = headers {\n  tenant_id: \"6a4a1b7d-3f5a-11eb-85f4-32ca5\"\n  client_id: \"eureka-searcher\"\n  request_id: \"5e688e04-a560-4ef6-a9fe-8a27cdf1d705\"\n  org_id: \"0\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"Your task is to generate the phrase tokens (a new simple keyword based language) for a natural language query.\\nYou are given the following:\\n 1. Definition & rules of the language\\n 2. References for which functions and date keywords to use with examples.\\n 3. Table Schema with column names, their data type, synonyms & sample values.\\n 4. Examples of similar queries & their tokens from users feedback mappings.\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"reasoning\\\": {\\\"assumptions\\\":\\\"\\\"},\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\":[{\\\"name\\\":\\\"\\\", \\\"expression\\\":\\\"\\\"}]\\n}\\nRemember the following types of columns:\\n 1. measure: columns with numeric data type: int, double, long, float.\\n 2. attribute: columns with categorical type: text, bool or date.\\nWhat are \\'output columns\\'?:\\nColumn names that are only encapsulated in [] brackets without any filters applied. They are essentially columns used in SELECT clauses.\\nIn phrase tokens, column names are present inside [] brackets and the filters applied on them are present in quotes.\\nRules to generate the response:\\n1. When generating formula names that are used in \\'tokens\\' field, ensure the name is a relevant substring of the current user query.\\n2. Formula expressions DO NOT contain column names in quotes [], it has a different syntax that you can infer from the users\\' examples and function references for formulas.\\n3. If from the current query, you are not able to find any column in schema or formula name in users\\' examples, select a best effort column from the table schema. Do not return an empty answer & do not hallucinate column names.\\n4. If in the final tokens there are only filters present, add a relevant \\'output column\\' to the final tokens, because only filters present in \\'tokens\\' output is not a valid answer. Choose the output column based on the context of the query. Example: {\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"} is not a valid answer, this:\\n{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column2]\\\"} is because it has an output column.\\n5. Any occurrences of \\'jan\\', \\'feb\\' or related short forms of month names in natural language needs to be expanded to complete name of the month when used as date filters in phrase tokens. However, do not expand them if they are used as filter values in non-date columns.\\n6. Only use keywords and formula functions that are present in the provided reference examples and users\\' usage/feedback history.\\n7. If there is a filter on null value, always encapsulate it in quotes and curly brackets \\'{}\\' like \\'{null}\\'. Example: column_name != \\'{null}\\'\\n8. count or unique count keywords (or formula functions) are only allowed on attributes i.e. text or date type columns, do not apply them on measure or numeric columns.\\n9. In phrase tokens language, values applied on the same column like:\\n[column] = \\'value1\\' [column] = \\'value2\\' behave as OR filters, whereas values applied on different columns like: [column1] = \\'value1\\' [column2] = \\'value2\\' behave as AND filters\\n10. Comparison between numeric (i.e measure) columns can only be done in formulas. eg: \\'measure > sum [measure]\\' in tokens field is INVALID, but \\'measure > sum(measure)\\' is valid in formula expressions.\\n11. When generating formulas, ensure that all dependent formulas are included in the formulas field. A dependent formula is defined as any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n12. Avoid generating redundant formulas, example: {tokens:\\\"[Revenue]\\\",formulas: [{\\\"name\\\":\\\"total revenue\\\",\\\"expression\\\":\\\"sum(Revenue)\\\"}], where token: [Revenue] is same as formula name \\'total revenue\\' as [Revenue] is internally evaluated with default aggregation of \\'sum\\'.\\n13. In formula expressions, date filters like \\'last month\\' should be represented using formula functions that calculate the date range, such as `diff_months` or `to_date`.\\n14. DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\",then you cannot apply sum ( unique users ) because it is already aggregated in formula language i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n\\nYou can use the following date keywords only in \\'tokens\\' field (NOT VALID for formula expressions):\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Date] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Date] = \\'last 7 days\\'\\\",\\\"[Date] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Date] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Date] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Date] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Date] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Date] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Date] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Date] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Date] = \\'march\\'\\\",\\\"[Date] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Date] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Date] = \\'Saturday\\'\\\",\\\"[Date] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Date] = \\'march 2024\\'\\\",\\\"[Date] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Date] = \\'this day\\'\\\",\\\"[Date] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Date] = \\'last 2 quarters for each year\\'\\\",\\\"[Date] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Date].yearly\\\",\\\"[Date].quarterly\\\",\\\"[Date].monthly\\\",\\\"[Date].weekly\\\",\\\"[Date].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Date] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Sales] by [Date] [Date].daily month over month\\\",\\\"growth of [Sales] by [Date] [Date].monthly year over year\\\",\\\"growth of [Sales] by [Date] [Date].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Date].\\'day of month\\'\\\",\\\"[Date].\\'month of year\\'\\\",\\\"[Date].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Date] = \\'10 months ago\\'\\\",\\\"[Date] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Date] detailed\\\"]}\\nFor reference today\\'s date in MM/dd/yyyy format: 12/31/2024\\n\"\n}\nchat_messages {\n  role: USER\n  content: \"CREATE TABLE [Sample] Retail Apparel Worksheet (\\nSales double /*Desc: Total revenue generated from each transaction. Group: FACT_RETAPP_SALES.*/,\\nRegion text /*Desc: Region the store falls under Values: \\'east\\', \\'midwest\\', \\'west\\'. Group: DIM_RETAPP_STORES.*/,\\nDate date /*Desc: Date of the sales transaction Current year is 2024.. Group: FACT_RETAPP_SALES.*/,\\nProduct text /*Desc: Product name for the SKU Values: \\'cotton board shorts\\', \\'falcon t-shirt\\', \\'hi-tech hw mountaineering socks\\'. Group: DIM_RETAPP_PRODUCTS.*/,\\nSalesid int /*. Group: FACT_RETAPP_SALES.*/,\\nSKU int /*Desc: Stock Keeping Unit. Group: DIM_RETAPP_PRODUCTS.*/,\\nZip Code text /*Desc: Zipcode of the store Values: \\'01701\\', \\'02215\\', \\'03860\\'. Group: DIM_RETAPP_STORES.*/,\\nLongitude double /*Desc: Coordinates of the store. Group: DIM_RETAPP_STORES.*/,\\nLatitude double /*Desc: Coordinates of the store. Group: DIM_RETAPP_STORES.*/,\\nCounty text /*Desc: County of the store Values: \\'ada county\\', \\'alameda county\\', \\'polk county\\'. Group: DIM_RETAPP_STORES.*/,\\nState text /*Desc: City of the store Values: \\'idaho\\', \\'iowa\\', \\'nevada\\'. Group: DIM_RETAPP_STORES.*/,\\nCity text /*Desc: State of the store location Values: \\'berkeley\\', \\'boise\\', \\'boston\\'. Group: DIM_RETAPP_STORES.*/,\\nStore text /*Desc: Store name Values: \\'idaho (83704)\\', \\'iowa (50266)\\', \\'nevada (89052)\\'. Group: DIM_RETAPP_STORES.*/,\\nProduct Type text /*Desc: Product Category of each item Values: \\'bags\\', \\'dresses\\', \\'jackets\\'. Group: DIM_RETAPP_PRODUCTS.*/,\\nQuantity Sold int /*Desc: Total basket quantity from each transaction. Group: FACT_RETAPP_SALES.*/)\\n\\n\\'\\'\\'\\n\\nRelevant keywords for phrase tokens are given below that can be used if needed (NOT relevant for formula expressions, as they have different functions), do not use any other keywords:\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [Region] sort by [Sales]\\\",\\\"bottom 25 [Region] sort by count [Region]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Sales] ascending\\\",\\\"sort by count [Region] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Sales]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[Region] begins with \\'midwest\\'\\\",\\\"[Region] ends with \\'midwest\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[Region] contains \\'midwest\\'\\\",\\\"[Region] contains \\'midwest\\' \\'east\\'\\\",\\\"[Region] not contains \\'midwest\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Sales] [Region] = \\'midwest\\' vs [Region] = \\'east\\'\\\",\\\"[Sales] [Date] = \\'this year\\' vs [Date] = \\'last year\\'\\\",\\\"[Quantity Sold] [Product] = \\'cotton board shorts\\' vs [Product] = \\'hi-tech hw mountaineering socks\\' vs [Product] = \\'falcon t-shirt\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Sales] by [Date] [Date].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [Region]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [Region]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[Region] in ([Region] [Region] begins with \\'midwest\\' [Sales] > 100 top 10 [Region] sort by [Quantity Sold] descending)\\\",\\\"[Region] not in ([Region] [Region] begins with \\'midwest\\' [Sales] > 100 top 10 [Region] sort by [Quantity Sold] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Sales]\\\",\\\"average [Sales]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [Region]\\\"]}\\n\\nYou can use the following function references with examples that are valid only for formula expressions. Use only relevant functions, if required:\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Sales )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( Region )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Sales > 10), Region )\\\",\\\"count_if ( (Sales > 10) , month ( Date ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Sales, Region, Product)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Sales, Region)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Sales ) , { Region } , { } )\\\",\\\"group_aggregate ( stddev ( Sales ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Sales ), { Region , Product }, { day_of_week ( Date ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Quantity Sold ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( Product ), query_groups ( ) + { Region }, query_filters ( ) - { Product } )\\\",\\\"group_aggregate ( unique count ( Product ) , query_groups ( ) + { Region }, query_filters ( ) + { Product != \\'cotton board shorts\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Sales )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Sales)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Sales, 2, 1, Region)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Sales, 2, 1, Region )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Sales , 99 , \\'asc\\' )\\\",\\\"percentile ( Sales , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Sales )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Sales )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( Region )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Sales > 10) , Region )\\\",\\\"unique_count_if ( (Sales > 10) , month ( Date ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Sales )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"Region in { \\'midwest\\' , \\'east\\' }\\\",\\\"Region not in { \\'midwest\\' , \\'east\\' ,\\'west\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Date >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Date <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Date, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Sales > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Sales > 100 ) then \\'High\\' else if ( Quantity Sold > 100 and Region = \\'midwest\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Date ) = 2024\\\",\\\"month ( Date ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\nBelow are some examples of NL to phrase tokens translation, including usages of formulas. These examples are synthetic and are not derived from user feedback.\\nThey are just for understanding of when & how to use the keywords and formula functions defined above:\\n\\n{\\\"query\\\":\\\"how many Sales were taken this year compared to last year, year to date\\\",\\\"tokens\\\":\\\"[Sales] [Date] = \\'this year\\' vs [Date] = \\'last year\\' [Date] = \\'year to date\\'\\\"}\\n{\\\"query\\\":\\\"I want to see Sales up to the end of March, comparing this year to last year\\\",\\\"desc\\\":\\\"Comparing Sales from the beginning of the year up to the end of March for `this year` with the same period in `last year`. The `in` query filter `[Date] in ( [Date] [Date].\\'day of year\\' [Date].\\'january\\' [Date].\\'february\\' [Date].\\'march\\' )` selects dates corresponding to January, February, and March. By using `[Date].\\'day of year\\'`, we ensure that we are matching the exact same days of the year. The `vs` keyword facilitates the comparison between these matching periods across `this year` and `last year`. This approach effectively calculates the \\'same period last year\\' by filtering dates in `last year` that fall within the same range (January to March), allowing for a direct comparison of Sales between the two years for that specific period.\\\",\\\"tokens\\\":\\\"[Sales] [Date] in ( [Date] [Date].\\'day of year\\' [Date] = \\'january\\' [Date] = \\'february\\' [Date] = \\'march\\' ) [Date] = \\'this year\\' vs [Date] = \\'last year\\'\\\"}\\n{\\\"query\\\":\\\"for my top 10 Region last year, what are the monthly Sales this year\\\",\\\"desc\\\":\\\"First, use a top sub-query to find the top 10 attributes last year. Then, use that attribute in the main query to find their monthly measure this year.\\\",\\\"tokens\\\":\\\"[Region] [Date].monthly [Sales] [Date] = \\'this year\\' [Region] in ( [Region] [Date] = \\'last year\\' top 10 [Region] sort by [Sales] )\\\"}\\n{\\\"query\\\":\\\"I want to compare Sales for this year up to today with the same period last year\\\",\\\"desc\\\":\\\"Comparing year-to-date Sales up to today for `this year` with the same period from `last year`. The `in` query filter `[Date] in ( [Date] [Date].\\'day of year\\' [Date] before [Date].\\'today\\' )` selects all dates from the beginning of the year up to today in `this year`. By using `vs` with `[Date] = \\'last year\\'`, we compare these dates with the matching period in `last year`. The phrase `same period last year` is thus calculated by filtering dates in `last year` that are in the same \\'day of year\\' range as in `this year` up to today.\\\",\\\"tokens\\\":\\\"[Sales] [Date] in ( [Date] [Date].\\'day of year\\' [Date] before [Date] = \\'today\\' ) [Date] = \\'this year\\' vs [Date] = \\'last year\\' [Date] = \\'year to date\\'\\\"}\\n{\\\"query\\\":\\\"what is cumulative/running Sales for this year\\\",\\\"desc\\\":\\\"This template is for calculating the cumulative or running sum of a Sales for this year. It is always accompanied by date bucket/aggregation like monthly if accumulation of metric is done on a date column\\\",\\\"tokens\\\":\\\"[cumulative Sales] [Date].monthly [Date] = \\'this year\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"cumulative Sales\\\",\\\"expression\\\":\\\"cumulative_sum ( Sales , Date )\\\"}]}\\n{\\\"query\\\":\\\"what is the Sales over the past 2 years to date\\\",\\\"desc\\\":\\\"When the query asks for past/last n years from current date, then use between operator with exact dates, example below assuming current date is 4th November 2024 in mm/dd/yyyy format (use locale format when returning answers). Subtracting 2 years from current date would give 11/04/2022\\\",\\\"tokens\\\":\\\"[Sales] [Date] between \\'11/04/2022\\' and \\'11/04/2024\\'\\\"}\\n{\\\"query\\\":\\\"Compare Sales for this month with the same month last year\\\",\\\"desc\\\":\\\"Comparing Sales for the current month with the same month from last year. The `in` query filter `[Date] in ( [Date] [Date].\\'month of year\\' [Date].\\'this month\\' )` selects all dates that fall in the same month across all years, effectively isolating the month of interest using \\'month of year\\'. By applying `[Date].\\'this year\\'` and `[Date].\\'last year\\'`, we limit the data to the current year and the previous year. The `vs` keyword is used to compare the Sales for these dates between `this year` and `last year`, enabling a direct comparison of the same month across the two years.\\\",\\\"tokens\\\":\\\"[Sales] [Date] in ( [Date] [Date].\\'month of year\\' [Date] = \\'this month\\' ) [Date] = \\'this year\\' vs [Date] = \\'last year\\'\\\"}\\n{\\\"query\\\":\\\"calculate average of Sales in last to last year\\\",\\\"tokens\\\":\\\"average [Sales] [Date] = \\'2 years ago\\'\\\"}\\n{\\\"query\\\":\\\"Sales sold in oct, nov, dec last year compared with 2 years ago for midwests\\\",\\\"tokens\\\":\\\"[Sales] [Date] = \\'october\\' [Date] = \\'november\\' [Date] = \\'december\\' [Date] = \\'last year\\' vs [Date] = \\'2 years ago\\' [Date].\\'month of year\\' [Region] = \\'midwest\\'\\\"}\\n{\\\"query\\\":\\\"show me a kpi chart showing year to date Sales for this year comparing it with Sales from the last year for the same period\\\",\\\"tokens\\\":\\\"[Sales] [Date] [Date] = \\'year to date\\' [Date] = \\'this year\\' vs [Date] = \\'last year\\'\\\"}\\n{\\\"query\\\":\\\"For every year, which Region had largest Sales.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [Region] sort by sum [Sales] for each [Date] [Date].yearly\\\"}\\n{\\\"query\\\":\\\"what is the average Sales per month since October 2024\\\",\\\"tokens\\\":\\\"average [Sales] [Date].monthly [Date] >= \\'october 2024\\'\\\"}\\n{\\\"query\\\":\\\"what is the total Sales in winter months\\\",\\\"desc\\\":\\\"For total Sales just return the output column [Sales] & it internally calculates sum of the values.\\\",\\\"tokens\\\":\\\"[Sales] [Date] = \\'december\\' [Date] = \\'january\\' [Date] = \\'february\\'\\\"}\\n{\\\"query\\\":\\\"show me month on month Sales growth for midwest in 2022\\\",\\\"tokens\\\":\\\"growth of sum [Sales] by [Date] [Date].monthly [Region] = \\'midwest\\' [Date] = \\'2022\\'\\\"}\\n{\\\"query\\\":\\\"how has the Sales changed over the years for the top 5 Region by Sales\\\",\\\"desc\\\":\\\"First, find the top 5 Region by Sales. Then, for these Region, display their Sales per year to show how it has changed over the years by using IN sub-query to join with the main query.\\\",\\\"tokens\\\":\\\"[Region] [Sales] [Date].yearly [Region] in ( [Region] top 5 [Region] sort by sum [Sales] )\\\"}\\n\\nBelow are examples from user feedback that map queries to phrase tokens and/or formulas:\\n\\n- **Focus on relevant numeric, text, or date columns and their filters.**\\n- **Prefer user feedback values over schema values if conflicts arise.**\\n- **For columns not in the schema, use formulas from user examples.**\\n- **Ensure formula expressions match the current query\\'s columns and filters.**\\n- **Include relevant formula names in the tokens field, encapsulated in `[]` brackets.**\\n- **When creating multiple formulas with dependencies, include all of them in the formulas list.**\\n- **In case of conflicts between user feedback and synthetic examples, user feedback should take precedence.**\\n\\n**Examples from user feedback below:**\\n{\\\"query\\\":\\\"sales by region year on year\\\",\\\"tokens\\\":\\\"sum [Sales] [Region]\\\"}\\n\\n\\'\\'\\'\\n\\nIMPORTANT: Column names below separated by comma (,) co-occur with each other and form a use-case/group. When trying to select column names relevant for current user query, prefer the co-occurring/neighboring columns for answering the question. Columns from across the groups are not generally used together.\\n\\nGroup 0 Sales,Product,Date\\n\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: - If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI.\\n\\nThe response should be well-formatted JSON as shown below:\\n{ \\\"reasoning\\\": {\\\"assumptions\\\":\\\"\\\"}, \\\"tokens\\\": \\\"\\\", \\\"formulas\\\":[{\\\"name\\\":\\\"\\\", \\\"expression\\\":\\\"\\\"}]}\\nEnsure the assumptions is short & concise.\\nQuestion: sales by year\"\n}\n"}]}, {"timestamp": 1735684594150000, "fields": [{"key": "event.log", "type": "string", "value": "Response from LLM Gateway:\ncompletions {\n  id: \"chatcmpl-Akf8jDrYQXnRTCv11wzDEyGu0YAwH\"\n  created: 1735684593\n  choices {\n    text: \"{\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The query is asking for the total sales aggregated by year.\\\"\\n  },\\n  \\\"tokens\\\": \\\"sum [Sales] [Date].yearly\\\",\\n  \\\"formulas\\\": []\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 50\n    prompt_tokens: 8065\n    total_tokens: 8115\n  }\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "9d6608b3dc7f76d9", "flags": 1, "operationName": "getResponseFromTimedRPCCall", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "cf7189e061815b0e"}], "startTime": 1735684592106000, "duration": 2043807, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "2e54b8404ab1b987", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "9d6608b3dc7f76d9"}], "startTime": 1735684592106000, "duration": 2043762, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "96f50b15690108ec", "flags": 1, "operationName": "complete", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "17457c628b790874"}], "startTime": 1735684592107000, "duration": 2041634, "tags": [{"key": "component", "type": "string", "value": "eureka-llm-gateway"}, {"key": "pod.name", "type": "string", "value": "eureka-llmgateway-75fccffb49-8r6fn"}, {"key": "x.request.id", "type": "string", "value": "5e688e04-a560-4ef6-a9fe-8a27cdf1d705"}, {"key": "self.ip", "type": "string", "value": "eureka-llmgateway-75fccffb49-8r6fn/10.252.242.171"}, {"key": "client.name", "type": "string", "value": "eureka-searcher"}, {"key": "tenant.id", "type": "string", "value": "6a4a1b7d-3f5a-11eb-85f4-32ca5"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684594149000, "fields": [{"key": "event.log", "type": "string", "value": "Completions response = completions {\n  id: \"chatcmpl-Akf8jDrYQXnRTCv11wzDEyGu0YAwH\"\n  created: 1735684593\n  choices {\n    text: \"{\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The query is asking for the total sales aggregated by year.\\\"\\n  },\\n  \\\"tokens\\\": \\\"sum [Sales] [Date].yearly\\\",\\n  \\\"formulas\\\": []\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 50\n    prompt_tokens: 8065\n    total_tokens: 8115\n  }\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "17457c628b790874", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "2e54b8404ab1b987"}], "startTime": 1735684592107000, "duration": 2042564, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.llmgateway.LLMCompletionsService/Complete"}, {"key": "peer.address", "type": "string", "value": "10.252.242.59:45862"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "0ff0215d500a2525", "flags": 1, "operationName": "getLLMConfigMap", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "1140da4c862bd5a3"}], "startTime": 1735684592108000, "duration": 207, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "1140da4c862bd5a3", "flags": 1, "operationName": "getProtoResponseWithCustomModel", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "96f50b15690108ec"}], "startTime": 1735684592108000, "duration": 2041153, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684592109000, "fields": [{"key": "event.log", "type": "string", "value": "Completions proto request: headers {\n  tenant_id: \"6a4a1b7d-3f5a-11eb-85f4-32ca5\"\n  client_id: \"eureka-searcher\"\n  request_id: \"5e688e04-a560-4ef6-a9fe-8a27cdf1d705\"\n  org_id: \"0\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"Your task is to generate the phrase tokens (a new simple keyword based language) for a natural language query.\\nYou are given the following:\\n 1. Definition & rules of the language\\n 2. References for which functions and date keywords to use with examples.\\n 3. Table Schema with column names, their data type, synonyms & sample values.\\n 4. Examples of similar queries & their tokens from users feedback mappings.\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"reasoning\\\": {\\\"assumptions\\\":\\\"\\\"},\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\":[{\\\"name\\\":\\\"\\\", \\\"expression\\\":\\\"\\\"}]\\n}\\nRemember the following types of columns:\\n 1. measure: columns with numeric data type: int, double, long, float.\\n 2. attribute: columns with categorical type: text, bool or date.\\nWhat are \\'output columns\\'?:\\nColumn names that are only encapsulated in [] brackets without any filters applied. They are essentially columns used in SELECT clauses.\\nIn phrase tokens, column names are present inside [] brackets and the filters applied on them are present in quotes.\\nRules to generate the response:\\n1. When generating formula names that are used in \\'tokens\\' field, ensure the name is a relevant substring of the current user query.\\n2. Formula expressions DO NOT contain column names in quotes [], it has a different syntax that you can infer from the users\\' examples and function references for formulas.\\n3. If from the current query, you are not able to find any column in schema or formula name in users\\' examples, select a best effort column from the table schema. Do not return an empty answer & do not hallucinate column names.\\n4. If in the final tokens there are only filters present, add a relevant \\'output column\\' to the final tokens, because only filters present in \\'tokens\\' output is not a valid answer. Choose the output column based on the context of the query. Example: {\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"} is not a valid answer, this:\\n{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column2]\\\"} is because it has an output column.\\n5. Any occurrences of \\'jan\\', \\'feb\\' or related short forms of month names in natural language needs to be expanded to complete name of the month when used as date filters in phrase tokens. However, do not expand them if they are used as filter values in non-date columns.\\n6. Only use keywords and formula functions that are present in the provided reference examples and users\\' usage/feedback history.\\n7. If there is a filter on null value, always encapsulate it in quotes and curly brackets \\'{}\\' like \\'{null}\\'. Example: column_name != \\'{null}\\'\\n8. count or unique count keywords (or formula functions) are only allowed on attributes i.e. text or date type columns, do not apply them on measure or numeric columns.\\n9. In phrase tokens language, values applied on the same column like:\\n[column] = \\'value1\\' [column] = \\'value2\\' behave as OR filters, whereas values applied on different columns like: [column1] = \\'value1\\' [column2] = \\'value2\\' behave as AND filters\\n10. Comparison between numeric (i.e measure) columns can only be done in formulas. eg: \\'measure > sum [measure]\\' in tokens field is INVALID, but \\'measure > sum(measure)\\' is valid in formula expressions.\\n11. When generating formulas, ensure that all dependent formulas are included in the formulas field. A dependent formula is defined as any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n12. Avoid generating redundant formulas, example: {tokens:\\\"[Revenue]\\\",formulas: [{\\\"name\\\":\\\"total revenue\\\",\\\"expression\\\":\\\"sum(Revenue)\\\"}], where token: [Revenue] is same as formula name \\'total revenue\\' as [Revenue] is internally evaluated with default aggregation of \\'sum\\'.\\n13. In formula expressions, date filters like \\'last month\\' should be represented using formula functions that calculate the date range, such as `diff_months` or `to_date`.\\n14. DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\",then you cannot apply sum ( unique users ) because it is already aggregated in formula language i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n\\nYou can use the following date keywords only in \\'tokens\\' field (NOT VALID for formula expressions):\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Date] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Date] = \\'last 7 days\\'\\\",\\\"[Date] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Date] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Date] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Date] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Date] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Date] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Date] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Date] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Date] = \\'march\\'\\\",\\\"[Date] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Date] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Date] = \\'Saturday\\'\\\",\\\"[Date] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Date] = \\'march 2024\\'\\\",\\\"[Date] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Date] = \\'this day\\'\\\",\\\"[Date] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Date] = \\'last 2 quarters for each year\\'\\\",\\\"[Date] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Date].yearly\\\",\\\"[Date].quarterly\\\",\\\"[Date].monthly\\\",\\\"[Date].weekly\\\",\\\"[Date].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Date] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Sales] by [Date] [Date].daily month over month\\\",\\\"growth of [Sales] by [Date] [Date].monthly year over year\\\",\\\"growth of [Sales] by [Date] [Date].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Date].\\'day of month\\'\\\",\\\"[Date].\\'month of year\\'\\\",\\\"[Date].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Date] = \\'10 months ago\\'\\\",\\\"[Date] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Date] detailed\\\"]}\\nFor reference today\\'s date in MM/dd/yyyy format: 12/31/2024\\n\"\n}\nchat_messages {\n  role: USER\n  content: \"CREATE TABLE [Sample] Retail Apparel Worksheet (\\nSales double /*Desc: Total revenue generated from each transaction. Group: FACT_RETAPP_SALES.*/,\\nRegion text /*Desc: Region the store falls under Values: \\'east\\', \\'midwest\\', \\'west\\'. Group: DIM_RETAPP_STORES.*/,\\nDate date /*Desc: Date of the sales transaction Current year is 2024.. Group: FACT_RETAPP_SALES.*/,\\nProduct text /*Desc: Product name for the SKU Values: \\'cotton board shorts\\', \\'falcon t-shirt\\', \\'hi-tech hw mountaineering socks\\'. Group: DIM_RETAPP_PRODUCTS.*/,\\nSalesid int /*. Group: FACT_RETAPP_SALES.*/,\\nSKU int /*Desc: Stock Keeping Unit. Group: DIM_RETAPP_PRODUCTS.*/,\\nZip Code text /*Desc: Zipcode of the store Values: \\'01701\\', \\'02215\\', \\'03860\\'. Group: DIM_RETAPP_STORES.*/,\\nLongitude double /*Desc: Coordinates of the store. Group: DIM_RETAPP_STORES.*/,\\nLatitude double /*Desc: Coordinates of the store. Group: DIM_RETAPP_STORES.*/,\\nCounty text /*Desc: County of the store Values: \\'ada county\\', \\'alameda county\\', \\'polk county\\'. Group: DIM_RETAPP_STORES.*/,\\nState text /*Desc: City of the store Values: \\'idaho\\', \\'iowa\\', \\'nevada\\'. Group: DIM_RETAPP_STORES.*/,\\nCity text /*Desc: State of the store location Values: \\'berkeley\\', \\'boise\\', \\'boston\\'. Group: DIM_RETAPP_STORES.*/,\\nStore text /*Desc: Store name Values: \\'idaho (83704)\\', \\'iowa (50266)\\', \\'nevada (89052)\\'. Group: DIM_RETAPP_STORES.*/,\\nProduct Type text /*Desc: Product Category of each item Values: \\'bags\\', \\'dresses\\', \\'jackets\\'. Group: DIM_RETAPP_PRODUCTS.*/,\\nQuantity Sold int /*Desc: Total basket quantity from each transaction. Group: FACT_RETAPP_SALES.*/)\\n\\n\\'\\'\\'\\n\\nRelevant keywords for phrase tokens are given below that can be used if needed (NOT relevant for formula expressions, as they have different functions), do not use any other keywords:\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [Region] sort by [Sales]\\\",\\\"bottom 25 [Region] sort by count [Region]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Sales] ascending\\\",\\\"sort by count [Region] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Sales]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[Region] begins with \\'midwest\\'\\\",\\\"[Region] ends with \\'midwest\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[Region] contains \\'midwest\\'\\\",\\\"[Region] contains \\'midwest\\' \\'east\\'\\\",\\\"[Region] not contains \\'midwest\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Sales] [Region] = \\'midwest\\' vs [Region] = \\'east\\'\\\",\\\"[Sales] [Date] = \\'this year\\' vs [Date] = \\'last year\\'\\\",\\\"[Quantity Sold] [Product] = \\'cotton board shorts\\' vs [Product] = \\'hi-tech hw mountaineering socks\\' vs [Product] = \\'falcon t-shirt\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Sales] by [Date] [Date].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [Region]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [Region]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[Region] in ([Region] [Region] begins with \\'midwest\\' [Sales] > 100 top 10 [Region] sort by [Quantity Sold] descending)\\\",\\\"[Region] not in ([Region] [Region] begins with \\'midwest\\' [Sales] > 100 top 10 [Region] sort by [Quantity Sold] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Sales]\\\",\\\"average [Sales]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [Region]\\\"]}\\n\\nYou can use the following function references with examples that are valid only for formula expressions. Use only relevant functions, if required:\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Sales )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( Region )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Sales > 10), Region )\\\",\\\"count_if ( (Sales > 10) , month ( Date ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Sales, Region, Product)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Sales, Region)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Sales ) , { Region } , { } )\\\",\\\"group_aggregate ( stddev ( Sales ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Sales ), { Region , Product }, { day_of_week ( Date ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Quantity Sold ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( Product ), query_groups ( ) + { Region }, query_filters ( ) - { Product } )\\\",\\\"group_aggregate ( unique count ( Product ) , query_groups ( ) + { Region }, query_filters ( ) + { Product != \\'cotton board shorts\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Sales )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Sales)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Sales, 2, 1, Region)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Sales, 2, 1, Region )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Sales , 99 , \\'asc\\' )\\\",\\\"percentile ( Sales , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Sales )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Sales )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( Region )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Sales > 10) , Region )\\\",\\\"unique_count_if ( (Sales > 10) , month ( Date ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Sales )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"Region in { \\'midwest\\' , \\'east\\' }\\\",\\\"Region not in { \\'midwest\\' , \\'east\\' ,\\'west\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Date >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Date <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Date, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Sales > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Sales > 100 ) then \\'High\\' else if ( Quantity Sold > 100 and Region = \\'midwest\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Date ) = 2024\\\",\\\"month ( Date ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\nBelow are some examples of NL to phrase tokens translation, including usages of formulas. These examples are synthetic and are not derived from user feedback.\\nThey are just for understanding of when & how to use the keywords and formula functions defined above:\\n\\n{\\\"query\\\":\\\"how many Sales were taken this year compared to last year, year to date\\\",\\\"tokens\\\":\\\"[Sales] [Date] = \\'this year\\' vs [Date] = \\'last year\\' [Date] = \\'year to date\\'\\\"}\\n{\\\"query\\\":\\\"I want to see Sales up to the end of March, comparing this year to last year\\\",\\\"desc\\\":\\\"Comparing Sales from the beginning of the year up to the end of March for `this year` with the same period in `last year`. The `in` query filter `[Date] in ( [Date] [Date].\\'day of year\\' [Date].\\'january\\' [Date].\\'february\\' [Date].\\'march\\' )` selects dates corresponding to January, February, and March. By using `[Date].\\'day of year\\'`, we ensure that we are matching the exact same days of the year. The `vs` keyword facilitates the comparison between these matching periods across `this year` and `last year`. This approach effectively calculates the \\'same period last year\\' by filtering dates in `last year` that fall within the same range (January to March), allowing for a direct comparison of Sales between the two years for that specific period.\\\",\\\"tokens\\\":\\\"[Sales] [Date] in ( [Date] [Date].\\'day of year\\' [Date] = \\'january\\' [Date] = \\'february\\' [Date] = \\'march\\' ) [Date] = \\'this year\\' vs [Date] = \\'last year\\'\\\"}\\n{\\\"query\\\":\\\"for my top 10 Region last year, what are the monthly Sales this year\\\",\\\"desc\\\":\\\"First, use a top sub-query to find the top 10 attributes last year. Then, use that attribute in the main query to find their monthly measure this year.\\\",\\\"tokens\\\":\\\"[Region] [Date].monthly [Sales] [Date] = \\'this year\\' [Region] in ( [Region] [Date] = \\'last year\\' top 10 [Region] sort by [Sales] )\\\"}\\n{\\\"query\\\":\\\"I want to compare Sales for this year up to today with the same period last year\\\",\\\"desc\\\":\\\"Comparing year-to-date Sales up to today for `this year` with the same period from `last year`. The `in` query filter `[Date] in ( [Date] [Date].\\'day of year\\' [Date] before [Date].\\'today\\' )` selects all dates from the beginning of the year up to today in `this year`. By using `vs` with `[Date] = \\'last year\\'`, we compare these dates with the matching period in `last year`. The phrase `same period last year` is thus calculated by filtering dates in `last year` that are in the same \\'day of year\\' range as in `this year` up to today.\\\",\\\"tokens\\\":\\\"[Sales] [Date] in ( [Date] [Date].\\'day of year\\' [Date] before [Date] = \\'today\\' ) [Date] = \\'this year\\' vs [Date] = \\'last year\\' [Date] = \\'year to date\\'\\\"}\\n{\\\"query\\\":\\\"what is cumulative/running Sales for this year\\\",\\\"desc\\\":\\\"This template is for calculating the cumulative or running sum of a Sales for this year. It is always accompanied by date bucket/aggregation like monthly if accumulation of metric is done on a date column\\\",\\\"tokens\\\":\\\"[cumulative Sales] [Date].monthly [Date] = \\'this year\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"cumulative Sales\\\",\\\"expression\\\":\\\"cumulative_sum ( Sales , Date )\\\"}]}\\n{\\\"query\\\":\\\"what is the Sales over the past 2 years to date\\\",\\\"desc\\\":\\\"When the query asks for past/last n years from current date, then use between operator with exact dates, example below assuming current date is 4th November 2024 in mm/dd/yyyy format (use locale format when returning answers). Subtracting 2 years from current date would give 11/04/2022\\\",\\\"tokens\\\":\\\"[Sales] [Date] between \\'11/04/2022\\' and \\'11/04/2024\\'\\\"}\\n{\\\"query\\\":\\\"Compare Sales for this month with the same month last year\\\",\\\"desc\\\":\\\"Comparing Sales for the current month with the same month from last year. The `in` query filter `[Date] in ( [Date] [Date].\\'month of year\\' [Date].\\'this month\\' )` selects all dates that fall in the same month across all years, effectively isolating the month of interest using \\'month of year\\'. By applying `[Date].\\'this year\\'` and `[Date].\\'last year\\'`, we limit the data to the current year and the previous year. The `vs` keyword is used to compare the Sales for these dates between `this year` and `last year`, enabling a direct comparison of the same month across the two years.\\\",\\\"tokens\\\":\\\"[Sales] [Date] in ( [Date] [Date].\\'month of year\\' [Date] = \\'this month\\' ) [Date] = \\'this year\\' vs [Date] = \\'last year\\'\\\"}\\n{\\\"query\\\":\\\"calculate average of Sales in last to last year\\\",\\\"tokens\\\":\\\"average [Sales] [Date] = \\'2 years ago\\'\\\"}\\n{\\\"query\\\":\\\"Sales sold in oct, nov, dec last year compared with 2 years ago for midwests\\\",\\\"tokens\\\":\\\"[Sales] [Date] = \\'october\\' [Date] = \\'november\\' [Date] = \\'december\\' [Date] = \\'last year\\' vs [Date] = \\'2 years ago\\' [Date].\\'month of year\\' [Region] = \\'midwest\\'\\\"}\\n{\\\"query\\\":\\\"show me a kpi chart showing year to date Sales for this year comparing it with Sales from the last year for the same period\\\",\\\"tokens\\\":\\\"[Sales] [Date] [Date] = \\'year to date\\' [Date] = \\'this year\\' vs [Date] = \\'last year\\'\\\"}\\n{\\\"query\\\":\\\"For every year, which Region had largest Sales.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [Region] sort by sum [Sales] for each [Date] [Date].yearly\\\"}\\n{\\\"query\\\":\\\"what is the average Sales per month since October 2024\\\",\\\"tokens\\\":\\\"average [Sales] [Date].monthly [Date] >= \\'october 2024\\'\\\"}\\n{\\\"query\\\":\\\"what is the total Sales in winter months\\\",\\\"desc\\\":\\\"For total Sales just return the output column [Sales] & it internally calculates sum of the values.\\\",\\\"tokens\\\":\\\"[Sales] [Date] = \\'december\\' [Date] = \\'january\\' [Date] = \\'february\\'\\\"}\\n{\\\"query\\\":\\\"show me month on month Sales growth for midwest in 2022\\\",\\\"tokens\\\":\\\"growth of sum [Sales] by [Date] [Date].monthly [Region] = \\'midwest\\' [Date] = \\'2022\\'\\\"}\\n{\\\"query\\\":\\\"how has the Sales changed over the years for the top 5 Region by Sales\\\",\\\"desc\\\":\\\"First, find the top 5 Region by Sales. Then, for these Region, display their Sales per year to show how it has changed over the years by using IN sub-query to join with the main query.\\\",\\\"tokens\\\":\\\"[Region] [Sales] [Date].yearly [Region] in ( [Region] top 5 [Region] sort by sum [Sales] )\\\"}\\n\\nBelow are examples from user feedback that map queries to phrase tokens and/or formulas:\\n\\n- **Focus on relevant numeric, text, or date columns and their filters.**\\n- **Prefer user feedback values over schema values if conflicts arise.**\\n- **For columns not in the schema, use formulas from user examples.**\\n- **Ensure formula expressions match the current query\\'s columns and filters.**\\n- **Include relevant formula names in the tokens field, encapsulated in `[]` brackets.**\\n- **When creating multiple formulas with dependencies, include all of them in the formulas list.**\\n- **In case of conflicts between user feedback and synthetic examples, user feedback should take precedence.**\\n\\n**Examples from user feedback below:**\\n{\\\"query\\\":\\\"sales by region year on year\\\",\\\"tokens\\\":\\\"sum [Sales] [Region]\\\"}\\n\\n\\'\\'\\'\\n\\nIMPORTANT: Column names below separated by comma (,) co-occur with each other and form a use-case/group. When trying to select column names relevant for current user query, prefer the co-occurring/neighboring columns for answering the question. Columns from across the groups are not generally used together.\\n\\nGroup 0 Sales,Product,Date\\n\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: - If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI.\\n\\nThe response should be well-formatted JSON as shown below:\\n{ \\\"reasoning\\\": {\\\"assumptions\\\":\\\"\\\"}, \\\"tokens\\\": \\\"\\\", \\\"formulas\\\":[{\\\"name\\\":\\\"\\\", \\\"expression\\\":\\\"\\\"}]}\\nEnsure the assumptions is short & concise.\\nQuestion: sales by year\"\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "97defd76937180f3", "flags": 1, "operationName": "getLLMApiProperties", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "1140da4c862bd5a3"}], "startTime": 1735684592108000, "duration": 275, "tags": [{"key": "is-custom-model", "type": "string", "value": "false"}, {"key": "api-version", "type": "string", "value": "2024-02-01"}, {"key": "endpoint", "type": "string", "value": "https://llm-prod-east-us-2.openai.azure.com"}, {"key": "deployment-id", "type": "string", "value": "eureka-gpt-4o"}, {"key": "client-name", "type": "string", "value": "eureka-searcher"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "c8dceca604407de9", "flags": 1, "operationName": "getModelsForTenantAndOrg", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "0ff0215d500a2525"}], "startTime": 1735684592108000, "duration": 165, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "6c525e514094e39b", "flags": 1, "operationName": "getDefaultModel", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "97defd76937180f3"}], "startTime": 1735684592108000, "duration": 25, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "9714777a69c2dd43", "flags": 1, "operationName": "get", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "c324dd02be51bcd1"}], "startTime": 1735684592109000, "duration": 1253, "tags": [{"key": "cacheHit", "type": "string", "value": "false"}, {"key": "get.key", "type": "string", "value": "eureka-gpt-4o-684120450"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=c324dd02be51bcd1; skipping clock skew adjustment"]}, {"traceID": "58dd9a710336d56a", "spanID": "750bba8770eb9143", "flags": 1, "operationName": "chatCompletion", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "c324dd02be51bcd1"}], "startTime": 1735684592116000, "duration": 2031335, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=c324dd02be51bcd1; skipping clock skew adjustment"]}, {"traceID": "58dd9a710336d56a", "spanID": "e9c6e94bf5f13eee", "flags": 1, "operationName": "put", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "c324dd02be51bcd1"}], "startTime": 1735684594147000, "duration": 1311, "tags": [{"key": "put.key", "type": "string", "value": "eureka-gpt-4o-684120450"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=c324dd02be51bcd1; skipping clock skew adjustment"]}, {"traceID": "58dd9a710336d56a", "spanID": "a25c0808dc0a25aa", "flags": 1, "operationName": "getResultFromTML", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "d841f14a50a25823"}], "startTime": 1735684594150000, "duration": 823, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684594150000, "fields": [{"key": "event.log", "type": "string", "value": "Using TML translation directly: tokens: \"sum [Sales] [Date].yearly\"\nreasoning {\n  assumptions: \"The query is asking for the total sales aggregated by year.\"\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "fca634019b416898", "flags": 1, "operationName": "TMLPostProcessor.process", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "a25c0808dc0a25aa"}], "startTime": 1735684594150000, "duration": 751, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684594151000, "fields": [{"key": "event.log", "type": "string", "value": "Post processed tokens: sum [Sales] [Date].yearly"}]}], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "421560f476b74c31", "flags": 1, "operationName": "translateTokens", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "fca634019b416898"}], "startTime": 1735684594151000, "duration": 9, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "80f9656f7c175032", "flags": 1, "operationName": "updateSearchHistoryRepositoryAsync", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "2e0d47ea456153fe"}], "startTime": 1735684594153000, "duration": 18415, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "x.request.id", "type": "string", "value": "5e688e04-a560-4ef6-a9fe-8a27cdf1d705"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "tenant.id", "type": "string", "value": "6a4a1b7d-3f5a-11eb-85f4-32ca5"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "e9084727827277cc", "flags": 1, "operationName": "createIndex", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "9cf5f50df9fe0161"}], "startTime": 1735684594153000, "duration": 7751, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "9cf5f50df9fe0161", "flags": 1, "operationName": "updateSearchHistoryRepository", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "80f9656f7c175032"}], "startTime": 1735684594153000, "duration": 18342, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "34345ff2f0da7f17", "flags": 1, "operationName": "populateConvAssistDebugInfo", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "711239bf3c224a0e"}], "startTime": 1735684594153000, "duration": 54, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "f4db1adbdcb25a84", "flags": 1, "operationName": "hasIndex", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "e9084727827277cc"}], "startTime": 1735684594154000, "duration": 3717, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "979932ce5f29afca", "flags": 1, "operationName": "updateDefaultIngestPipeline", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "e9084727827277cc"}], "startTime": 1735684594157000, "duration": 3765, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "2f8595112ebff257", "flags": 1, "operationName": "_update_conversation_save", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "7e970358ce1a245e"}], "startTime": 1735684594157106, "duration": 3926, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "7fc32337a809918e", "flags": 1, "operationName": "add_conv", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "2f8595112ebff257"}], "startTime": 1735684594158647, "duration": 2342, "tags": [{"key": "conv.id", "type": "string", "value": "7185ebba-bb7b-4886-a5e8-19ce0a6b48d6"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "a1ca4203fa84efb5", "flags": 1, "operationName": "getExistingDocument", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "9cf5f50df9fe0161"}], "startTime": 1735684594161000, "duration": 3036, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "f0b17725a53b5be3", "flags": 1, "operationName": "others.others.getExistingDocument.get", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "a1ca4203fa84efb5"}], "startTime": 1735684594161000, "duration": 2875, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "d0de57743967a62c", "flags": 1, "operationName": "handleGraphQl.serialize", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "79de3d59b0f77fea"}], "startTime": 1735684594231000, "duration": 349, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "8b3d9590631c667b", "flags": 1, "operationName": "getFilteredResponse", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "58dd9a710336d56a"}], "startTime": 1735684594265054, "duration": 432725, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "80461a9bf99fabb6", "flags": 1, "operationName": "StringFilterHeuristic.apply", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "8b3d9590631c667b"}], "startTime": 1735684594265531, "duration": 272354, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "354b85cc8cea003b", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "80461a9bf99fabb6"}], "startTime": 1735684594266259, "duration": 271560, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "98f3bc2f9b33744e", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "1338add012e333a9"}], "startTime": 1735684594505000, "duration": 699, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-6c45fc5c8b-z2ttq"}, {"key": "x.request.id", "type": "string", "value": "25077ddb1c4a6e14a57ec202a49ac6c1"}, {"key": "user.id", "type": "string", "value": ""}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-6c45fc5c8b-z2ttq/10.252.240.227"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "1338add012e333a9", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "354b85cc8cea003b"}], "startTime": 1735684594505000, "duration": 1118, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.metadata.MetadataService/applyValueHeuristic"}, {"key": "peer.address", "type": "string", "value": "10.252.240.87:51756"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "69ca08833da4463f", "flags": 1, "operationName": "applyFilterHeuristics", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "1bae65c79a9bd5fc"}], "startTime": 1735684594505000, "duration": 163, "tags": [{"key": "query.updated", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684594505000, "fields": [{"key": "event.log", "type": "string", "value": "ValueHeuristicsResponse query: \"sum [Sales] [Date].yearly\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "1bae65c79a9bd5fc", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "98f3bc2f9b33744e"}], "startTime": 1735684594505000, "duration": 518, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-6c45fc5c8b-z2ttq"}, {"key": "x.request.id", "type": "string", "value": "5e688e04-a560-4ef6-a9fe-8a27cdf1d705"}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-6c45fc5c8b-z2ttq/10.252.240.227"}, {"key": "x.tenant.id", "type": "string", "value": "6a4a1b7d-3f5a-11eb-85f4-32ca5"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684594505000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic request: (sum [Sales] [Date].yearly,[])"}]}, {"timestamp": 1735684594505000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic response: query: \"sum [Sales] [Date].yearly\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "58dd9a710336d56a", "spanID": "7fa58ffbb27b12c3", "flags": 1, "operationName": "sanitizeTMLQuery", "references": [{"refType": "CHILD_OF", "traceID": "58dd9a710336d56a", "spanID": "8b3d9590631c667b"}], "startTime": 1735684594652883, "duration": 14853, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684594653167, "fields": [{"key": "event.log", "type": "string", "value": "TML query Before Sanitization: [sum [Sales] [Date].yearly]"}]}, {"timestamp": 1735684594667731, "fields": [{"key": "event.log", "type": "string", "value": "TML query After Sanitization: [sum [Sales] [Date].yearly]"}]}], "processID": "p1", "warnings": null}], "processes": {"p1": {"serviceName": "eureka-agent", "tags": [{"key": "hostname", "type": "string", "value": "ip-10-228-137-136.us-west-2.compute.internal"}, {"key": "ip", "type": "string", "value": "10.228.137.136"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p2": {"serviceName": "eureka-graphql", "tags": [{"key": "hostname", "type": "string", "value": "eureka-graphql-57db89b787-x4mxm"}, {"key": "ip", "type": "string", "value": "10.252.241.110"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p3": {"serviceName": "convassist", "tags": [{"key": "hostname", "type": "string", "value": "convassist-6c6ccb4d4c-zt75z"}, {"key": "ip", "type": "string", "value": "10.252.242.11"}, {"key": "jaeger.version", "type": "string", "value": "Python-4.8.0"}]}, "p4": {"serviceName": "eureka-searcher", "tags": [{"key": "hostname", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "ip", "type": "string", "value": "10.252.242.59"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p5": {"serviceName": "eureka-llm-gateway", "tags": [{"key": "hostname", "type": "string", "value": "eureka-llmgateway-75fccffb49-8r6fn"}, {"key": "ip", "type": "string", "value": "10.252.242.171"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p6": {"serviceName": "eureka-metadata-service", "tags": [{"key": "hostname", "type": "string", "value": "eureka-metadata-6c45fc5c8b-z2ttq"}, {"key": "ip", "type": "string", "value": "10.252.240.227"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}}, "warnings": null}, {"traceID": "2967e2693391fff7", "spans": [{"traceID": "2967e2693391fff7", "spanID": "2967e2693391fff7", "flags": 1, "operationName": "Agent.graphQLHandler", "references": [], "startTime": 1735684540256000, "duration": 4232058, "tags": [{"key": "component", "type": "string", "value": "eureka-agent"}, {"key": "x.request.id", "type": "string", "value": "665a37a4-5ea6-49f2-b22b-e7e74892b4fd"}, {"key": "user.id", "type": "string", "value": "57349ebd-b688-45ac-8864-5d830cffc614"}, {"key": "sampler.type", "type": "string", "value": "const"}, {"key": "sampler.param", "type": "bool", "value": true}, {"key": "self.ip", "type": "string", "value": "ip-10-228-190-8.us-west-2.compute.internal/10.228.190.8"}, {"key": "tenant.id", "type": "string", "value": "17510819-5784-11ee-8f97-3da98"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "4cd948a27c02ea80", "flags": 1, "operationName": "handleGraphQLReqEnrichment", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "2967e2693391fff7"}], "startTime": 1735684540257000, "duration": 142483, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684540257000, "fields": [{"key": "event.log", "type": "string", "value": "Enriching message class com.thoughtspot.convassist.SendMessageRequest"}]}, {"timestamp": 1735684540257000, "fields": [{"key": "event.log", "type": "string", "value": "Enriching SendMessageRequest"}]}, {"timestamp": 1735684540257000, "fields": [{"key": "event.log", "type": "string", "value": "SendMessageRequest: conv_id: \"855a4cb9-a51a-44d3-a490-1b96ba3bf30c\"\nmsg {\n  msg_id: \"191e6a53-c041-4352-8493-427e54f6515c\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show me the count of unique session id for yesterday\"\n      nls_data {\n        worksheet_id: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n        question_type: ANSWER_SPEC_GENERATION\n      }\n    }\n  }\n}\nruntime_params {\n}\n"}]}, {"timestamp": 1735684540257000, "fields": [{"key": "event.log", "type": "string", "value": "Enriching USER_COMMAND message payload"}]}, {"timestamp": 1735684540399000, "fields": [{"key": "event.log", "type": "string", "value": "Returning SendMessageReq conv_id: \"855a4cb9-a51a-44d3-a490-1b96ba3bf30c\"\nmsg {\n  msg_id: \"191e6a53-c041-4352-8493-427e54f6515c\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show me the count of unique session id for yesterday\"\n      nls_data {\n        query_hypothesis_columns {\n          column_name: \"Productinfo Utyp\"\n          sample_values: \"count\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"count\"\n          guid: \"e368c5c9-9f93-4273-93fc-373a6e27747e\"\n          sample_value_to_recognized_token {\n            key: \"count\"\n            value {\n              token: \"count\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"e368c5c9-9f93-4273-93fc-373a6e27747e\"\n              token_metadata {\n                name: \"Productinfo Utyp\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.013213057988839103\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"count\"\n              }\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"Pagefilter Filtyp\"\n          sample_values: \"count\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"count\"\n          guid: \"5084177b-6f6c-4dfe-a2b5-2b9324b08440\"\n          sample_value_to_recognized_token {\n            key: \"count\"\n            value {\n              token: \"count\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"5084177b-6f6c-4dfe-a2b5-2b9324b08440\"\n              token_metadata {\n                name: \"Pagefilter Filtyp\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.00794663043454655\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"count\"\n              }\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"User Loctck\"\n          sample_values: \"id\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"id\"\n          guid: \"0fd841a0-5932-42d7-81c4-f853cb2be8b0\"\n          sample_value_to_recognized_token {\n            key: \"id\"\n            value {\n              token: \"id\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"0fd841a0-5932-42d7-81c4-f853cb2be8b0\"\n              join_path {\n                root_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                leaf_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n              }\n              token_metadata {\n                name: \"User Loctck\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.0070322637094672085\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"id\"\n              }\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"User Shopzc\"\n          sample_values: \"id\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"id\"\n          guid: \"0f8f663f-16c3-41c7-bac2-f1888df27d3c\"\n          sample_value_to_recognized_token {\n            key: \"id\"\n            value {\n              token: \"id\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"0f8f663f-16c3-41c7-bac2-f1888df27d3c\"\n              token_metadata {\n                name: \"User Shopzc\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.007032102583840037\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"id\"\n              }\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"Page Ss2\"\n          sample_values: \"the\"\n          sample_values: \"me\"\n          sample_values: \"id\"\n          sample_values: \"count-on-clorox\"\n          sample_values: \"show-low\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"show\"\n          guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n          sample_value_to_recognized_token {\n            key: \"count-on-clorox\"\n            value {\n              token: \"count-on-clorox\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: PREFIX\n              guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n              token_metadata {\n                name: \"Page Ss2\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.002714522636069718\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"count\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"id\"\n            value {\n              token: \"id\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n              token_metadata {\n                name: \"Page Ss2\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006726471635859923\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"id\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"me\"\n            value {\n              token: \"me\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n              join_path {\n                root_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                leaf_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n              }\n              token_metadata {\n                name: \"Page Ss2\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006726471635859923\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"me\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"show-low\"\n            value {\n              token: \"show-low\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: PREFIX\n              guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n              token_metadata {\n                name: \"Page Ss2\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.0026621095023148357\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"show\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"the\"\n            value {\n              token: \"the\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n              join_path {\n                root_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                leaf_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n              }\n              token_metadata {\n                name: \"Page Ss2\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006726471635859923\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"the\"\n              }\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"Page Ss1\"\n          sample_values: \"for\"\n          sample_values: \"me\"\n          sample_values: \"of\"\n          sample_values: \"id\"\n          sample_values: \"count\"\n          sample_values: \"session\"\n          sample_values: \"unique-recipes\"\n          sample_values: \"count-on-clorox\"\n          sample_values: \"for=\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"for\"\n          guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n          sample_value_to_recognized_token {\n            key: \"count\"\n            value {\n              token: \"count\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n              token_metadata {\n                name: \"Page Ss1\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006636094248347136\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"count\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"count-on-clorox\"\n            value {\n              token: \"count-on-clorox\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: PREFIX\n              guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n              token_metadata {\n                name: \"Page Ss1\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.0026780501022550507\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"count\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"for\"\n            value {\n              token: \"for\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n              token_metadata {\n                name: \"Page Ss1\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006636094248347136\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"for\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"for=\"\n            value {\n              token: \"for=\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT_STEMMED\n              guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n              token_metadata {\n                name: \"Page Ss1\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.0012216070339995837\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"for\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"id\"\n            value {\n              token: \"id\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n              token_metadata {\n                name: \"Page Ss1\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006636094248347136\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"id\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"me\"\n            value {\n              token: \"me\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n              token_metadata {\n                name: \"Page Ss1\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006636094248347136\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"me\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"of\"\n            value {\n              token: \"of\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n              token_metadata {\n                name: \"Page Ss1\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006636094248347136\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"of\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"session\"\n            value {\n              token: \"session\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n              join_path {\n                root_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                leaf_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n              }\n              token_metadata {\n                name: \"Page Ss1\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006636094248347136\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"session\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"unique-recipes\"\n            value {\n              token: \"unique-recipes\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: PREFIX\n              guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n              token_metadata {\n                name: \"Page Ss1\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.0027929665898501575\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"unique\"\n              }\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"Page Ss3\"\n          sample_values: \"me\"\n          sample_values: \"id\"\n          sample_values: \"show\"\n          sample_values: \"show-code\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"show\"\n          guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n          sample_value_to_recognized_token {\n            key: \"id\"\n            value {\n              token: \"id\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n              token_metadata {\n                name: \"Page Ss3\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006464098426790276\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"id\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"me\"\n            value {\n              token: \"me\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n              token_metadata {\n                name: \"Page Ss3\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006464098426790276\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"me\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"show\"\n            value {\n              token: \"show\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n              join_path {\n                root_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                leaf_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n              }\n              token_metadata {\n                name: \"Page Ss3\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.006464098426790276\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"show\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"show-code\"\n            value {\n              token: \"show-code\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: PREFIX\n              guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n              token_metadata {\n                name: \"Page Ss3\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.002393043469488402\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"show\"\n              }\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"Pagefilter Carousel\"\n          sample_values: \"unique-wines\"\n          sample_values: \"count-on-clorox\"\n          sample_values: \"unique-wines-drawer\"\n          sample_values: \"shop|unique-wines\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"unique\"\n          guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n          sample_value_to_recognized_token {\n            key: \"count-on-clorox\"\n            value {\n              token: \"count-on-clorox\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: PREFIX\n              guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n              token_metadata {\n                name: \"Pagefilter Carousel\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.0032072842174987017\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"count\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"shop|unique-wines\"\n            value {\n              token: \"shop|unique-wines\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: WORD_PREFIX\n              guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n              token_metadata {\n                name: \"Pagefilter Carousel\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.0014052571643761805\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"unique\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"unique-wines\"\n            value {\n              token: \"unique-wines\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: PREFIX\n              guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n              token_metadata {\n                name: \"Pagefilter Carousel\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.0036363009851435747\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"unique\"\n              }\n              is_cohort: false\n            }\n          }\n          sample_value_to_recognized_token {\n            key: \"unique-wines-drawer\"\n            value {\n              token: \"unique-wines-drawer\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: PREFIX\n              guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n              token_metadata {\n                name: \"Pagefilter Carousel\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.0029250392998879963\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"unique\"\n              }\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"Link Name\"\n          sample_values: \"show more\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"show\"\n          guid: \"dcb21564-630f-4d9c-9418-e570e18da97a\"\n          sample_value_to_recognized_token {\n            key: \"show more\"\n            value {\n              token: \"show more\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: PREFIX\n              guid: \"dcb21564-630f-4d9c-9418-e570e18da97a\"\n              token_metadata {\n                name: \"Link Name\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.002692330824291423\n              auto_generated_synonym: false\n              client_state {\n                original_token: \"show\"\n              }\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"Eventtime\"\n          sample_values: \"yesterday\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"yesterday\"\n          guid: \"24a306aa-0a5c-4074-81e9-3516817e755e\"\n          sample_value_to_recognized_token {\n            key: \"yesterday\"\n            value {\n              token: \"yesterday\"\n              type_enum: VALUE\n              data_type: DATE_TIME\n              match_type: EXACT\n              guid: \"24a306aa-0a5c-4074-81e9-3516817e755e\"\n              join_path {\n                root_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                leaf_table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n              }\n              token_metadata {\n                name: \"Eventtime\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.5357142857142857\n              can_be_extended: false\n              client_state {\n                original_token: \"yesterday\"\n              }\n              date_filter {\n                type: YESTERDAY\n                op: EQ\n              }\n              re_resolve: true\n              canonical_form: \"yesterday\"\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"Ingestion Time\"\n          sample_values: \"yesterday\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"yesterday\"\n          guid: \"6943870d-6cb3-4e34-989d-e7af98f65d17\"\n          sample_value_to_recognized_token {\n            key: \"yesterday\"\n            value {\n              token: \"yesterday\"\n              type_enum: VALUE\n              data_type: DATE_TIME\n              match_type: EXACT\n              guid: \"6943870d-6cb3-4e34-989d-e7af98f65d17\"\n              token_metadata {\n                name: \"Ingestion Time\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.5357142857142857\n              can_be_extended: false\n              client_state {\n                original_token: \"yesterday\"\n              }\n              date_filter {\n                type: YESTERDAY\n                op: EQ\n              }\n              re_resolve: true\n              canonical_form: \"yesterday\"\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"Processed Time\"\n          sample_values: \"yesterday\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"yesterday\"\n          guid: \"163fc286-051d-4222-9bd4-8c15a3bb6810\"\n          sample_value_to_recognized_token {\n            key: \"yesterday\"\n            value {\n              token: \"yesterday\"\n              type_enum: VALUE\n              data_type: DATE_TIME\n              match_type: EXACT\n              guid: \"163fc286-051d-4222-9bd4-8c15a3bb6810\"\n              token_metadata {\n                name: \"Processed Time\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.5357142857142857\n              can_be_extended: false\n              client_state {\n                original_token: \"yesterday\"\n              }\n              date_filter {\n                type: YESTERDAY\n                op: EQ\n              }\n              re_resolve: true\n              canonical_form: \"yesterday\"\n              is_cohort: false\n            }\n          }\n        }\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: 1697071238\n        permission_guids: -1011578153\n        permission_guids: 1232745556\n        permission_guids: -1727141297\n        non_sharable: false\n        worksheet_id: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n        question_type: ANSWER_SPEC_GENERATION\n      }\n    }\n  }\n}\nruntime_params {\n}\n"}]}], "processID": "p1", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "18d29b9acb9d7aae", "flags": 1, "operationName": "getResponseBodyFromCloud", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "2967e2693391fff7"}], "startTime": 1735684540399000, "duration": 3679511, "tags": [{"key": "proxy.eurekaCloudApiLatency", "type": "string", "value": "3677"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "0699a4437aa1b208", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "2ead175fd3c72f55"}], "startTime": 1735684540400000, "duration": 3677175, "tags": [{"key": "http.status_code", "type": "int64", "value": 200}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "http.url", "type": "string", "value": "https://eureka.thoughtspot.cloud/graphql"}, {"key": "peer.hostname", "type": "string", "value": "eureka.thoughtspot.cloud"}, {"key": "peer.port", "type": "int64", "value": 443}, {"key": "http.method", "type": "string", "value": "POST"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "2ead175fd3c72f55", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "18d29b9acb9d7aae"}], "startTime": 1735684540400000, "duration": 3677263, "tags": [{"key": "component", "type": "string", "value": "apache-httpclient"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "f07db507197f397e", "flags": 1, "operationName": "handleGraphQl", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "afb897efa5e75f5c"}], "startTime": 1735684540633000, "duration": 3410858, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-57db89b787-lklsd"}, {"key": "x.request.id", "type": "string", "value": "665a37a4-5ea6-49f2-b22b-e7e74892b4fd"}, {"key": "user.id", "type": "string", "value": "57349ebd-b688-45ac-8864-5d830cffc614"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-57db89b787-lklsd/10.252.242.28"}, {"key": "tenant.id", "type": "string", "value": "17510819-5784-11ee-8f97-3da98"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "afb897efa5e75f5c", "flags": 1, "operationName": "handle", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "0699a4437aa1b208"}], "startTime": 1735684540633000, "duration": 3410913, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-57db89b787-lklsd"}, {"key": "x.request.id", "type": "string", "value": "665a37a4-5ea6-49f2-b22b-e7e74892b4fd"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-57db89b787-lklsd/10.252.242.28"}, {"key": "tenant.id", "type": "string", "value": "17510819-5784-11ee-8f97-3da98"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "9b513b2bf1810e62", "flags": 1, "operationName": "convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "f07db507197f397e"}], "startTime": 1735684540645000, "duration": 3397283, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "e2a1732a1c00b5b3", "flags": 1, "operationName": "/convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "0699a4437aa1b208"}], "startTime": 1735684540655710, "duration": 3386230, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "peer.ipv4", "type": "string", "value": "10.252.242.28"}, {"key": "peer.port", "type": "string", "value": "48620"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684540655768, "fields": [{"key": "request", "type": "string", "value": "conv_id: \"855a4cb9-a51a-44d3-a490-1b96ba3bf30c\"\nmsg {\n  msg_id: \"191e6a53-c041-4352-8493-427e54f6515c\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show me the count of unique session id for yesterday\"\n      nls_data {\n        query_hypothesis_columns {\n          guid: \"e368c5c9-9f93-4273-93fc-373a6e27747e\"\n          column_name: \"Productinfo Utyp\"\n          sample_values: \"count\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"count\"\n          sample_value_to_recognized_token {\n            key: \"count\"\n            value {\n              token: \"count\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"e368c5c9-9f93-4273-93fc-373a6e27747e\"\n              token_metadata {\n                name: \"Productinfo Utyp\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n              "}]}, {"timestamp": 1735684544041823, "fields": [{"key": "response", "type": "string", "value": "responses {\n  msg_id: \"f5401ed0-360f-49ed-a78c-7322b2fc4572\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          tokens: \"unique count User Sessionid Eventtime = \\'yesterday\\'\"\n          title: \"\"\n          tml_tokens: \"unique count [User Sessionid] [Eventtime] = \\'yesterday\\'\"\n          cached: false\n          sql_query: \"\"\n          visualization_suggestion {\n            display_mode: UNDEFINED\n            chart_type: NONE\n            users_viz_intent_applied: false\n          }\n          is_partial: false\n          ambiguous_phrases {\n            token {\n              token: \"count\"\n              type_enum: KEYWORD\n            }\n            token {\n              token: \"User Sessionid\"\n              type_enum: ATTRIBUTE\n              guid: \"3e2181e0-f0ec-4cc3-b6ec-78dcb02c5418\"\n            }\n            alternative_phrases {\n              token {\n                t"}]}], "processID": "p3", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "c2cb7b9c8a74ec35", "flags": 1, "operationName": "SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "e2a1732a1c00b5b3"}], "startTime": 1735684540656355, "duration": 3385426, "tags": [{"key": "x.request.id", "type": "string", "value": "665a37a4-5ea6-49f2-b22b-e7e74892b4fd"}, {"key": "tenant.id", "type": "string", "value": "17510819-5784-11ee-8f97-3da98"}, {"key": "user.id", "type": "string", "value": "57349ebd-b688-45ac-8864-5d830cffc614"}, {"key": "org.id", "type": "string", "value": "Did not recieve x-thoughtspot-orgs in Call Request Headers"}, {"key": "locale", "type": "string", "value": "en-us"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684540661007, "fields": [{"key": "event", "type": "string", "value": "User Query"}, {"key": "value", "type": "string", "value": "User Query: show me the count of unique session id for yesterday"}]}], "processID": "p3", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "214f9d1847317412", "flags": 1, "operationName": "get_conv", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "c2cb7b9c8a74ec35"}], "startTime": 1735684540659118, "duration": 1223, "tags": [{"key": "conv.id", "type": "string", "value": "855a4cb9-a51a-44d3-a490-1b96ba3bf30c"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "f4657456007a0470", "flags": 1, "operationName": "find_tool", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "c2cb7b9c8a74ec35"}], "startTime": 1735684540661105, "duration": 279, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684540661355, "fields": [{"key": "event", "type": "string", "value": "Find Tool is not enabled. Returning NLSTool."}]}], "processID": "p3", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "62528e9845ebebcf", "flags": 1, "operationName": "_get_tool_response", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "c2cb7b9c8a74ec35"}], "startTime": 1735684540661455, "duration": 3283183, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "069657a5cbbfcfa7", "flags": 1, "operationName": "get_response_from_nls", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "62528e9845ebebcf"}], "startTime": 1735684540662022, "duration": 3282476, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "64247f603e45ed44", "flags": 1, "operationName": "get_response_latest", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "069657a5cbbfcfa7"}], "startTime": 1735684540671896, "duration": 3272497, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "0f19ca956bd2b22c", "flags": 1, "operationName": "/eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "64247f603e45ed44"}], "startTime": 1735684540672302, "duration": 3267567, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684540672347, "fields": [{"key": "request", "type": "string", "value": "msg_payload {\n  msg_id: \"191e6a53-c041-4352-8493-427e54f6515c\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show me the count of unique session id for yesterday\"\n      nls_data {\n        query_hypothesis_columns {\n          guid: \"e368c5c9-9f93-4273-93fc-373a6e27747e\"\n          column_name: \"Productinfo Utyp\"\n          sample_values: \"count\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"count\"\n          sample_value_to_recognized_token {\n            key: \"count\"\n            value {\n              token: \"count\"\n              type_enum: VALUE\n              data_type: CHAR\n              match_type: EXACT\n              guid: \"e368c5c9-9f93-4273-93fc-373a6e27747e\"\n              token_metadata {\n                name: \"Productinfo Utyp\"\n                table {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                  name: \"GCP_OneTag_Prod\"\n                }\n                root_tables {\n                  guid: \"afbfee29-5842-4fd1-9a70-1fc9c"}]}, {"timestamp": 1735684543938985, "fields": [{"key": "response", "type": "string", "value": "tool: TS_NLS\nmessages {\n  msg_id: \"f5401ed0-360f-49ed-a78c-7322b2fc4572\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          tokens: \"unique count User Sessionid Eventtime = \\'yesterday\\'\"\n          title: \"\"\n          tml_tokens: \"unique count [User Sessionid] [Eventtime] = \\'yesterday\\'\"\n          cached: false\n          sql_query: \"\"\n          visualization_suggestion {\n            display_mode: UNDEFINED\n            chart_type: NONE\n            users_viz_intent_applied: false\n          }\n          is_partial: false\n          ambiguous_phrases {\n            token {\n              token: \"count\"\n              type_enum: KEYWORD\n            }\n            token {\n              token: \"User Sessionid\"\n              type_enum: ATTRIBUTE\n              guid: \"3e2181e0-f0ec-4cc3-b6ec-78dcb02c5418\"\n            }\n            alternative_phrases {\n              token {\n     "}]}], "processID": "p3", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "23de6ca7d31d90e8", "flags": 1, "operationName": "convAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "dbe29971ca221741"}], "startTime": 1735684540685000, "duration": 3253070, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "x.request.id", "type": "string", "value": "665a37a4-5ea6-49f2-b22b-e7e74892b4fd"}, {"key": "user.id", "type": "string", "value": "57349ebd-b688-45ac-8864-5d830cffc614"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "tenant.id", "type": "string", "value": "17510819-5784-11ee-8f97-3da98"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "6ec8a40e4fc3ac5d", "flags": 1, "operationName": "NLInstructionsHandler.createIndex", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "23de6ca7d31d90e8"}], "startTime": 1735684540685000, "duration": 7954, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "dbe29971ca221741", "flags": 1, "operationName": "eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "0f19ca956bd2b22c"}], "startTime": 1735684540685000, "duration": 3253683, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.EurekaGrpcService/ConvAssistNLSearch"}, {"key": "peer.address", "type": "string", "value": "10.252.242.11:52214"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "f8a4cc10eeee367e", "flags": 1, "operationName": "hasIndex", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "4c3436e102591636"}], "startTime": 1735684540686000, "duration": 3631, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "4c3436e102591636", "flags": 1, "operationName": "createIndex", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "6ec8a40e4fc3ac5d"}], "startTime": 1735684540686000, "duration": 7813, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "4ba5464b5c30e83f", "flags": 1, "operationName": "updateDefaultIngestPipeline", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "4c3436e102591636"}], "startTime": 1735684540690000, "duration": 3614, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "16319863bc0182f6", "flags": 1, "operationName": "getConvAssistResult", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "23de6ca7d31d90e8"}], "startTime": 1735684540698000, "duration": 3238692, "tags": [{"key": "user.command", "type": "string", "value": "show me the count of unique session id for yesterday"}, {"key": "_debugInfo.eureka.ConvAssistDebugInfo", "type": "string", "value": "{\n  \"tenantId\": \"17510819-5784-11ee-8f97-3da98\",\n  \"userId\": \"57349ebd-b688-45ac-8864-5d830cffc614\",\n  \"userName\": \"\",\n  \"convId\": \"855a4cb9-a51a-44d3-a490-1b96ba3bf30c\",\n  \"userMsgId\": \"191e6a53-c041-4352-8493-427e54f6515c\",\n  \"datasourceId\": \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\",\n  \"userQuery\": \"show me the count of unique session id for yesterday\",\n  \"generatedTmlTokens\": \"unique count [User Sessionid] [Eventtime] \\u003d \\u0027yesterday\\u0027\",\n  \"generatedSql\": \"\",\n  \"userFeedback\": \"NEUTRAL\",\n  \"timestamp\": \"1735684543935\",\n  \"requestId\": \"665a37a4-5ea6-49f2-b22b-e7e74892b4fd\",\n  \"userMessageCount\": \"1\",\n  \"datasourceName\": \"GCP_OneTag_Prod\",\n  \"asstMsgId\": \"f5401ed0-360f-49ed-a78c-7322b2fc4572\"\n}"}, {"key": "query.id", "type": "string", "value": ""}, {"key": "query", "type": "string", "value": "show me the count of unique session id for yesterday"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "8d595d9962141c78", "flags": 1, "operationName": "getNLSResults", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "16319863bc0182f6"}], "startTime": 1735684540704000, "duration": 3231138, "tags": [{"key": "empty_nl_query", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684540704000, "fields": [{"key": "event.log", "type": "string", "value": "Number of worksheet columns = 183"}]}, {"timestamp": 1735684540706000, "fields": [{"key": "event.log", "type": "string", "value": "clientRequest = ctx {\n  init_ctx {\n    worksheet {\n      worksheet_id: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n      worksheet_name: \"GCP_OneTag_Prod\"\n      column_details {\n        column_name: \"Eventtime\"\n        data_type: DATE_TIME\n        sample_values: \"yesterday\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"yesterday\"\n        guid: \"24a306aa-0a5c-4074-81e9-3516817e755e\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"yesterday\"\n          value {\n            token: \"yesterday\"\n            type_enum: VALUE\n            data_type: DATE_TIME\n            match_type: EXACT\n            guid: \"24a306aa-0a5c-4074-81e9-3516817e755e\"\n            join_path {\n              root_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              leaf_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n            }\n            token_metadata {\n              name: \"Eventtime\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.5357142857142857\n            can_be_extended: false\n            client_state {\n              original_token: \"yesterday\"\n            }\n            date_filter {\n              type: YESTERDAY\n              op: EQ\n            }\n            re_resolve: true\n            canonical_form: \"yesterday\"\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Event Subevent\"\n        data_type: VARCHAR\n        sample_values: \"transaction_complete\"\n        sample_values: \"cart_add\"\n        sample_values: \"checkout\"\n        col_type: ATTRIBUTE\n        guid: \"0dd78161-3d7f-4f62-8b82-25ffe1ed7783\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Event Id\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"5f0c8cba-5575-45a3-98d0-44e35bdeec7b\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Adobevisitorid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"c987c01d-ae57-4d39-82a5-40a9d3c8468a\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Absvisitorid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"2748c705-365f-4bed-a2d7-85c1e9e9a303\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Cartinfo Cid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"027a7662-f28c-4f2f-a3be-b46bb7f02923\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Link Name\"\n        data_type: VARCHAR\n        sample_values: \"show more\"\n        sample_values: \"fresh\"\n        sample_values: \"frozen\"\n        sample_values: \"pantry\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"show\"\n        guid: \"dcb21564-630f-4d9c-9418-e570e18da97a\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"show more\"\n          value {\n            token: \"show more\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: PREFIX\n            guid: \"dcb21564-630f-4d9c-9418-e570e18da97a\"\n            token_metadata {\n              name: \"Link Name\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.002692330824291423\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"show\"\n            }\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Pgname\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"1c5e228a-7870-4f41-b622-53436929fca8\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Platform\"\n        data_type: VARCHAR\n        sample_values: \"web\"\n        sample_values: \"app\"\n        col_type: ATTRIBUTE\n        guid: \"2c1f8a5e-a9de-4c12-94a5-6765ef698d08\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Appver\"\n        data_type: VARCHAR\n        sample_values: \"appios:vons:shop:2024.1.0 (1)\"\n        sample_values: \"appios:vons:shop:2024.3.0 (1)\"\n        sample_values: \"appios:shaws:shop:2024.1.0 (1)\"\n        col_type: ATTRIBUTE\n        guid: \"31eb809e-d9fd-4f4e-89fe-f398be5c8518\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Fname\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"7ac75bba-0283-4fee-8235-344be98e81ff\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Cpnid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"72968d8e-f4c9-458f-847f-f815c41e7ce8\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Ptype\"\n        data_type: VARCHAR\n        sample_values: \"m\"\n        sample_values: \"p\"\n        sample_values: \"sale price\"\n        col_type: ATTRIBUTE\n        guid: \"e30aa52c-7eff-4e56-baa7-24eb1ce2c735\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Fpdismon\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"12\"\n        col_type: ATTRIBUTE\n        guid: \"1d9ccede-2c9a-43ae-a936-9425611b8b53\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Mto\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"894e152d-d013-4b80-b670-aac43414b104\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Asf\"\n        data_type: VARCHAR\n        sample_values: \"true\"\n        sample_values: \"false\"\n        col_type: ATTRIBUTE\n        guid: \"a88ca522-acaf-4161-ab65-cab98c432930\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Bp\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"cfa0dbf5-5e6b-4c53-8141-eecfd1ea8e89\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Shelf\"\n        data_type: VARCHAR\n        sample_values: \"...\"\n        sample_values: \"gin\"\n        sample_values: \"gum\"\n        col_type: ATTRIBUTE\n        guid: \"0c5e103c-f34b-4a8e-83b6-56abf6685a8f\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Ist\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"9a80b673-e9bf-4b52-8f38-1b1e3a84073d\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Apisearchterm\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"8bab403a-3b31-446f-a222-08dad66c07f1\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Ordcnt\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"eaefee4e-c544-44f1-a62f-ba6b10aec5b8\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Loginsts\"\n        data_type: VARCHAR\n        sample_values: \"guest\"\n        sample_values: \"logged in\"\n        sample_values: \"guest mode\"\n        col_type: ATTRIBUTE\n        guid: \"3289a6eb-f3d2-41d8-aff6-7357464fbe39\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Lbs\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"ee4fffa9-f3d3-4697-8cff-6df8735338b6\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Offtext\"\n        data_type: VARCHAR\n        sample_values: \"bj\"\n        sample_values: \"gg\"\n        sample_values: \"ic\"\n        col_type: ATTRIBUTE\n        guid: \"a305e8d1-bad3-41df-8a2e-7f0dc9e47e8c\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Carouselsz\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"2e71a79d-cb1e-4f6b-b9c7-feacba463dc6\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Sellernam\"\n        data_type: VARCHAR\n        sample_values: \"iherb\"\n        sample_values: \"karat\"\n        sample_values: \"ispice\"\n        col_type: ATTRIBUTE\n        guid: \"82c54eb5-71b2-46dd-afa3-d7fb1f92fffe\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Display\"\n        data_type: VARCHAR\n        sample_values: \"grid\"\n        sample_values: \"carousel\"\n        col_type: ATTRIBUTE\n        guid: \"fe7e7900-510e-466f-84bf-a3adce8e3717\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Promocode\"\n        data_type: VARCHAR\n        sample_values: \"20vc\"\n        sample_values: \"free\"\n        sample_values: \"save\"\n        col_type: ATTRIBUTE\n        guid: \"91b416aa-4f53-41ea-ab8c-5f68a36a9181\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Ss4\"\n        data_type: VARCHAR\n        sample_values: \"-\"\n        sample_values: \"0\"\n        sample_values: \"1\"\n        col_type: ATTRIBUTE\n        guid: \"02e2d337-0055-48f1-846e-357f225effbb\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Bnr\"\n        data_type: VARCHAR\n        sample_values: \"vons\"\n        sample_values: \"shaws\"\n        sample_values: \"haggen\"\n        col_type: ATTRIBUTE\n        guid: \"9115c90c-e4c9-4964-93a4-1d1212a7ebc1\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Pname\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"1db24b31-f04f-4405-a4f2-d80b80734f88\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Iswysiwygenabled\"\n        data_type: BOOL\n        col_type: ATTRIBUTE\n        guid: \"367a1743-9e59-4837-9d0d-e7e2dd4397e4\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Coupon Clipcnt\"\n        data_type: VARCHAR\n        sample_values: \"1\"\n        col_type: ATTRIBUTE\n        guid: \"824d515e-ca58-47e4-a500-ff35bbb0f0bc\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Fuelsur\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        col_type: ATTRIBUTE\n        guid: \"e9d795c4-4d5f-48f2-bf35-c9f444f0cefc\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Processed Time\"\n        data_type: DATE_TIME\n        sample_values: \"yesterday\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"yesterday\"\n        guid: \"163fc286-051d-4222-9bd4-8c15a3bb6810\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"yesterday\"\n          value {\n            token: \"yesterday\"\n            type_enum: VALUE\n            data_type: DATE_TIME\n            match_type: EXACT\n            guid: \"163fc286-051d-4222-9bd4-8c15a3bb6810\"\n            token_metadata {\n              name: \"Processed Time\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.5357142857142857\n            can_be_extended: false\n            client_state {\n              original_token: \"yesterday\"\n            }\n            date_filter {\n              type: YESTERDAY\n              op: EQ\n            }\n            re_resolve: true\n            canonical_form: \"yesterday\"\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Tfc\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"2471ea22-274a-4451-87ca-39a34f19ea76\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Pfmdtl\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"f08fec8d-c4bf-42ba-8b4a-54f3c6735b49\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Filtyp\"\n        data_type: VARCHAR\n        sample_values: \"count\"\n        sample_values: \"age\"\n        sample_values: \"cut\"\n        sample_values: \"bone\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"count\"\n        guid: \"5084177b-6f6c-4dfe-a2b5-2b9324b08440\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"count\"\n          value {\n            token: \"count\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"5084177b-6f6c-4dfe-a2b5-2b9324b08440\"\n            token_metadata {\n              name: \"Pagefilter Filtyp\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.00794663043454655\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"count\"\n            }\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Dlvbnr\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"0ee244b6-c679-4c61-89c7-d09af5cf4994\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Notificationallowed\"\n        data_type: VARCHAR\n        sample_values: \"notification-allowed\"\n        sample_values: \"notification-blocked\"\n        col_type: ATTRIBUTE\n        guid: \"8415a516-4713-4965-ab32-d1fd37d582a8\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Uniqueorderflag\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"9ae1dca0-3032-4e12-b522-a18639f7ff21\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Isrcmnd\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"4e11f881-770d-4701-99bb-1428bf47dfbd\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Jrnsts\"\n        data_type: VARCHAR\n        sample_values: \"no_action\"\n        sample_values: \"add_products\"\n        sample_values: \"clipped_coupon\"\n        col_type: ATTRIBUTE\n        guid: \"0572787b-ced0-4381-a575-9439525f6ed3\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Event Hr\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"bbb102ef-4db8-4009-9be7-bd90a8f477d5\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Abtestdetails\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"2f28b30f-f301-423b-986a-81d4f8b6b2fc\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Savings J4usav\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"8a81bc05-6ed2-4bb8-8a05-4ccbe168bc6c\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Oos\"\n        data_type: BOOL\n        col_type: ATTRIBUTE\n        guid: \"8f0d0c2b-1d4b-4144-8b53-3ba9e5ea152d\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Pt\"\n        data_type: VARCHAR\n        sample_values: \"pdp\"\n        sample_values: \"home\"\n        sample_values: \"deals\"\n        col_type: ATTRIBUTE\n        guid: \"a473b1ee-5416-42e8-ad83-41bf30e4e4da\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Savings Catinvalidname\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"f2bf3c7c-aa4d-4c87-9f93-5e0d758608cb\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Offset\"\n        data_type: FLOAT\n        col_type: MEASURE\n        guid: \"ac8945d9-e92a-40a2-9a71-22c2652ede5d\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Coupon Type\"\n        data_type: VARCHAR\n        sample_values: \"mf\"\n        sample_values: \"pd\"\n        sample_values: \"sc\"\n        col_type: ATTRIBUTE\n        guid: \"0393c91b-52d7-41f5-a5b9-005f5af23729\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User J4uzc\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"7253fff2-471f-48d6-9667-7215de7c1ce7\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Event Name\"\n        data_type: VARCHAR\n        sample_values: \"4jqo0fw3e6\"\n        sample_values: \"5gs9d9vfsn\"\n        sample_values: \"bpsacydqdt\"\n        col_type: ATTRIBUTE\n        guid: \"f3320483-af85-4003-856c-61279f32d813\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Coupon Sku\"\n        data_type: VARCHAR\n        sample_values: \"101010052\"\n        sample_values: \"101010063\"\n        sample_values: \"101010072\"\n        col_type: ATTRIBUTE\n        guid: \"fd9db799-4f30-48a1-bb4f-a4695a7c3b77\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Rewards Redeemed\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"c402978a-62b8-468b-9550-fe92f38fa45c\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Deptnam\"\n        data_type: VARCHAR\n        sample_values: \"deli\"\n        sample_values: \"flowers\"\n        sample_values: \"tobacco\"\n        col_type: ATTRIBUTE\n        guid: \"a764d742-5e39-4a14-9811-5a1ddc212cda\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Device\"\n        data_type: VARCHAR\n        sample_values: \"a3\"\n        sample_values: \"a6\"\n        sample_values: \"a8\"\n        col_type: ATTRIBUTE\n        guid: \"6ec71f0e-91b5-4ff7-a02b-408b4221c1c2\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Lp\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"a76f31d3-3324-4420-83d3-025be5aa76c3\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Rev\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"a9721f08-477b-4a60-8807-9c644cafd22d\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Sellerid\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"175897\"\n        sample_values: \"544212\"\n        col_type: ATTRIBUTE\n        guid: \"2396d7d2-14c6-4773-abc3-b617ebbe5611\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Error Feature\"\n        data_type: VARCHAR\n        sample_values: \"reviews\"\n        sample_values: \"iauc0051\"\n        sample_values: \"otp-error\"\n        col_type: ATTRIBUTE\n        guid: \"fbe9f87e-1733-4cac-b9ee-baaff9578aef\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Trev\"\n        data_type: VARCHAR\n        sample_values: \"0.0\"\n        sample_values: \"0.1\"\n        sample_values: \"0.2\"\n        col_type: ATTRIBUTE\n        guid: \"6e8e8097-0abe-48d4-95d9-28c146c80261\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Coupon Clipmthd\"\n        data_type: VARCHAR\n        sample_values: \"singleclip\"\n        col_type: ATTRIBUTE\n        guid: \"821f5b38-025d-4341-b09d-2a3775e91e97\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Carouselsec\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"7b572546-72e5-4c05-957f-55c7109c7537\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Ppunit\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"bd4f66b9-1771-4c79-aa93-f073f2e90d41\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Uuid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"3f199d6d-e972-444e-950e-dc8339af5df4\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Savings Pcsav\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"3\"\n        sample_values: \"5\"\n        col_type: ATTRIBUTE\n        guid: \"a7706ec6-2a5c-4fb0-a3c3-3a1beb4a0b08\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Units\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"88b33849-3b4e-45b3-a8b4-6123ed9850ec\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Locationsharing\"\n        data_type: VARCHAR\n        sample_values: \"never\"\n        sample_values: \"always\"\n        sample_values: \"allow once\"\n        col_type: ATTRIBUTE\n        guid: \"59d0ea11-2f37-4c6b-8be5-e7df2255aa07\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Sitetp\"\n        data_type: VARCHAR\n        sample_values: \"ecom\"\n        sample_values: \"loyalty\"\n        col_type: ATTRIBUTE\n        guid: \"05ad7dd8-b9c2-4eaf-b97a-262bcd6f74d3\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Substs\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"9ac56d31-3185-428f-a415-516e553cf8c2\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Error Msg\"\n        data_type: VARCHAR\n        sample_values: \"email| \"\n        sample_values: \"mobile| \"\n        sample_values: \"select day\"\n        col_type: ATTRIBUTE\n        guid: \"d2bbb97a-fcdc-47ef-9d41-bef45377a375\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Completionattrtoken\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"3689c11c-38ee-42b4-8ae4-37eec686d002\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Cartinfo Ctype\"\n        data_type: VARCHAR\n        sample_values: \"checkout\"\n        sample_values: \"full_cart\"\n        sample_values: \"mini_cart\"\n        col_type: ATTRIBUTE\n        guid: \"150d47b1-ffa2-434b-9a69-23fd8f2e8b45\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Channel\"\n        data_type: VARCHAR\n        sample_values: \"home\"\n        sample_values: \"shop\"\n        sample_values: \"local\"\n        col_type: ATTRIBUTE\n        guid: \"77cd85cd-a105-497e-b9a1-1c49dc18a5f8\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User J4usid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"fea20608-fa44-4de0-8d3d-8e507af708b4\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Cartinfo Mfcunavcnt\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"24470184-62d6-475e-826b-59e41733ac30\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Adaflg\"\n        data_type: VARCHAR\n        sample_values: \"no\"\n        sample_values: \"yes\"\n        col_type: ATTRIBUTE\n        guid: \"15064b2a-c7b2-4b48-9b6d-db2248a5cef3\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Cpnflg\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"33bd0434-9d76-43a4-894a-51d973a107d8\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Sortsel\"\n        data_type: VARCHAR\n        sample_values: \"aisles\"\n        sample_values: \"category\"\n        sample_values: \"added date\"\n        col_type: ATTRIBUTE\n        guid: \"d27de12d-928d-4de0-8c14-eeb1a3c2651e\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Ingestion Time\"\n        data_type: DATE_TIME\n        sample_values: \"yesterday\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"yesterday\"\n        guid: \"6943870d-6cb3-4e34-989d-e7af98f65d17\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"yesterday\"\n          value {\n            token: \"yesterday\"\n            type_enum: VALUE\n            data_type: DATE_TIME\n            match_type: EXACT\n            guid: \"6943870d-6cb3-4e34-989d-e7af98f65d17\"\n            token_metadata {\n              name: \"Ingestion Time\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.5357142857142857\n            can_be_extended: false\n            client_state {\n              original_token: \"yesterday\"\n            }\n            date_filter {\n              type: YESTERDAY\n              op: EQ\n            }\n            re_resolve: true\n            canonical_form: \"yesterday\"\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Coupon Id\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"ee5c966f-1bf7-4c93-a841-a7810c4efdba\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Savings Rwdsav\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"79848402-70da-44de-a0d5-d6d84ccbef21\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Offtyp\"\n        data_type: VARCHAR\n        sample_values: \"freshpass\"\n        sample_values: \"grocery rewards\"\n        sample_values: \"015 - hot offers\"\n        col_type: ATTRIBUTE\n        guid: \"fe6a1f8b-5fb4-46ae-958c-906d27642d55\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Ss3\"\n        data_type: VARCHAR\n        sample_values: \"me\"\n        sample_values: \"id\"\n        sample_values: \"show\"\n        sample_values: \"show-code\"\n        sample_values: \"*\"\n        sample_values: \"-\"\n        sample_values: \"0\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"show\"\n        guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"id\"\n          value {\n            token: \"id\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n            token_metadata {\n              name: \"Page Ss3\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006464098426790276\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"id\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"me\"\n          value {\n            token: \"me\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n            token_metadata {\n              name: \"Page Ss3\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006464098426790276\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"me\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"show\"\n          value {\n            token: \"show\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n            join_path {\n              root_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              leaf_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n            }\n            token_metadata {\n              name: \"Page Ss3\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006464098426790276\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"show\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"show-code\"\n          value {\n            token: \"show-code\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: PREFIX\n            guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n            token_metadata {\n              name: \"Page Ss3\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.002393043469488402\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"show\"\n            }\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Pid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"8a2eb22f-eb43-458f-82d2-da857b810c1d\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Coupon Carouselsec\"\n        data_type: VARCHAR\n        sample_values: \"-\"\n        sample_values: \"beer\"\n        sample_values: \"null\"\n        col_type: ATTRIBUTE\n        guid: \"6334a03c-3961-4b62-b44d-a96d1adc025f\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Upc\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"0c1540ad-828c-4f20-b993-960d45e85d8b\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Mtyp\"\n        data_type: VARCHAR\n        sample_values: \"deli\"\n        sample_values: \"null\"\n        sample_values: \"banner\"\n        col_type: ATTRIBUTE\n        guid: \"f2a88066-8a89-471f-a0b2-424dc6d5893d\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Ics\"\n        data_type: BOOL\n        col_type: ATTRIBUTE\n        guid: \"3bfd6e9b-204c-4dda-b837-54767520082f\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Addtype\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"ca70f53c-4486-4f8b-a02a-ac0b977d7d5c\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Tmode\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"e0f7ee2b-9f5a-4008-99e0-32a752599f13\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Servcfee\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"0.0\"\n        sample_values: \"3.95\"\n        col_type: ATTRIBUTE\n        guid: \"0ec4b0f4-c960-493d-8f3c-dbbee9509d97\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Sid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"192df95a-b2c4-45e1-bd96-0abbbe17065c\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Cpnclpd\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"01a469c5-c2f2-494f-986c-adb75ee8039d\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Modal Msg\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"3d25208f-4a78-421a-8039-2f1826f1e878\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Hhid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"9bf56fda-448e-47c1-afe9-da4c68ee7b77\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Custid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"a57ce7ba-29c7-4ca7-b00f-9e653a6c0eb3\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Dlvcomb\"\n        data_type: VARCHAR\n        sample_values: \"null\"\n        sample_values: \"attended\"\n        sample_values: \"unattended\"\n        col_type: ATTRIBUTE\n        guid: \"2462cbe2-6e52-459c-89f2-08ee7816221b\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Ss2\"\n        data_type: VARCHAR\n        sample_values: \"the\"\n        sample_values: \"me\"\n        sample_values: \"id\"\n        sample_values: \"count-on-clorox\"\n        sample_values: \"show-low\"\n        sample_values: \"*\"\n        sample_values: \"-\"\n        sample_values: \"0\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"show\"\n        guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"count-on-clorox\"\n          value {\n            token: \"count-on-clorox\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: PREFIX\n            guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n            token_metadata {\n              name: \"Page Ss2\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.002714522636069718\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"count\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"id\"\n          value {\n            token: \"id\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n            token_metadata {\n              name: \"Page Ss2\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006726471635859923\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"id\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"me\"\n          value {\n            token: \"me\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n            join_path {\n              root_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              leaf_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n            }\n            token_metadata {\n              name: \"Page Ss2\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006726471635859923\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"me\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"show-low\"\n          value {\n            token: \"show-low\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: PREFIX\n            guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n            token_metadata {\n              name: \"Page Ss2\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.0026621095023148357\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"show\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"the\"\n          value {\n            token: \"the\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n            join_path {\n              root_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              leaf_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n            }\n            token_metadata {\n              name: \"Page Ss2\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006726471635859923\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"the\"\n            }\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Iqn\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"07864a01-3eef-4a25-aef5-c2a15f147e0a\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Datalc\"\n        data_type: BOOL\n        col_type: ATTRIBUTE\n        guid: \"5433afba-ea90-4030-9825-2ebd2fbd89a2\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Ss1\"\n        data_type: VARCHAR\n        sample_values: \"for\"\n        sample_values: \"me\"\n        sample_values: \"of\"\n        sample_values: \"id\"\n        sample_values: \"count\"\n        sample_values: \"session\"\n        sample_values: \"unique-recipes\"\n        sample_values: \"count-on-clorox\"\n        sample_values: \"for=\"\n        sample_values: \"\\'\"\n        sample_values: \")\"\n        sample_values: \"+\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"for\"\n        guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"count\"\n          value {\n            token: \"count\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n            token_metadata {\n              name: \"Page Ss1\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006636094248347136\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"count\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"count-on-clorox\"\n          value {\n            token: \"count-on-clorox\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: PREFIX\n            guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n            token_metadata {\n              name: \"Page Ss1\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.0026780501022550507\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"count\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"for\"\n          value {\n            token: \"for\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n            token_metadata {\n              name: \"Page Ss1\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006636094248347136\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"for\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"for=\"\n          value {\n            token: \"for=\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT_STEMMED\n            guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n            token_metadata {\n              name: \"Page Ss1\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.0012216070339995837\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"for\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"id\"\n          value {\n            token: \"id\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n            token_metadata {\n              name: \"Page Ss1\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006636094248347136\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"id\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"me\"\n          value {\n            token: \"me\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n            token_metadata {\n              name: \"Page Ss1\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006636094248347136\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"me\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"of\"\n          value {\n            token: \"of\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n            token_metadata {\n              name: \"Page Ss1\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006636094248347136\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"of\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"session\"\n          value {\n            token: \"session\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n            join_path {\n              root_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              leaf_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n            }\n            token_metadata {\n              name: \"Page Ss1\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.006636094248347136\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"session\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"unique-recipes\"\n          value {\n            token: \"unique-recipes\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: PREFIX\n            guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n            token_metadata {\n              name: \"Page Ss1\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.0027929665898501575\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"unique\"\n            }\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Each\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"d0229210-2589-490f-adf3-ad7783459c21\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Dlvpre\"\n        data_type: VARCHAR\n        sample_values: \"%27\"\n        sample_values: \"dug\"\n        sample_values: \"j4u\"\n        col_type: ATTRIBUTE\n        guid: \"290f49ac-8044-4e2e-9426-9c86fb567a66\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Tp\"\n        data_type: VARCHAR\n        sample_values: \"yext\"\n        col_type: ATTRIBUTE\n        guid: \"f8712afd-fff3-42e0-8e4a-9ac276d26cc8\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Filter\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"add416b5-a02b-4e79-bdef-560fd19be270\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Premslots\"\n        data_type: VARCHAR\n        sample_values: \"null\"\n        sample_values: \"true\"\n        sample_values: \"false\"\n        col_type: ATTRIBUTE\n        guid: \"ab68aa0f-f2c7-4d34-93dc-437235573fb3\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Utype\"\n        data_type: VARCHAR\n        sample_values: \"a\"\n        sample_values: \"c\"\n        sample_values: \"g\"\n        col_type: ATTRIBUTE\n        guid: \"b0eb6f39-cc67-4340-839d-c249de04a367\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Type\"\n        data_type: VARCHAR\n        sample_values: \"search\"\n        sample_values: \"internalsearch:standard\"\n        sample_values: \"wineshopsearch:standard\"\n        col_type: ATTRIBUTE\n        guid: \"2dcba128-5052-4822-9f8e-4a593316c797\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Savings Catinvalidid\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        col_type: ATTRIBUTE\n        guid: \"ee8e22c4-7b86-4e89-bec5-7c935bb72969\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Pname\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"4b1bb516-97d0-421a-a9a2-a64a118f1a6b\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Loctck\"\n        data_type: VARCHAR\n        sample_values: \"id\"\n        sample_values: \"+\"\n        sample_values: \"0\"\n        sample_values: \"1\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"id\"\n        guid: \"0fd841a0-5932-42d7-81c4-f853cb2be8b0\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"id\"\n          value {\n            token: \"id\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"0fd841a0-5932-42d7-81c4-f853cb2be8b0\"\n            join_path {\n              root_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              leaf_table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n            }\n            token_metadata {\n              name: \"User Loctck\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.0070322637094672085\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"id\"\n            }\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Ssid\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"a41783b0-bfae-4ae9-b82d-3e11fcf9a1f6\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Sponsored\"\n        data_type: BOOL\n        col_type: ATTRIBUTE\n        guid: \"443f4fce-4a59-4e4d-a9e3-6b85fd45e317\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Clientua\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"6a6cd000-5fb8-45c1-bc49-709800824c76\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Carousel\"\n        data_type: VARCHAR\n        sample_values: \"unique-wines\"\n        sample_values: \"count-on-clorox\"\n        sample_values: \"unique-wines-drawer\"\n        sample_values: \"shop|unique-wines\"\n        sample_values: \"-\"\n        sample_values: \"--\"\n        sample_values: \"p&g\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"unique\"\n        guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"count-on-clorox\"\n          value {\n            token: \"count-on-clorox\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: PREFIX\n            guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n            token_metadata {\n              name: \"Pagefilter Carousel\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.0032072842174987017\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"count\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"shop|unique-wines\"\n          value {\n            token: \"shop|unique-wines\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: WORD_PREFIX\n            guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n            token_metadata {\n              name: \"Pagefilter Carousel\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.0014052571643761805\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"unique\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"unique-wines\"\n          value {\n            token: \"unique-wines\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: PREFIX\n            guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n            token_metadata {\n              name: \"Pagefilter Carousel\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.0036363009851435747\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"unique\"\n            }\n            is_cohort: false\n          }\n        }\n        sample_value_to_recognized_token {\n          key: \"unique-wines-drawer\"\n          value {\n            token: \"unique-wines-drawer\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: PREFIX\n            guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n            token_metadata {\n              name: \"Pagefilter Carousel\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.0029250392998879963\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"unique\"\n            }\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Sessionid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"3e2181e0-f0ec-4cc3-b6ec-78dcb02c5418\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Dlvst\"\n        data_type: VARCHAR\n        sample_values: \"fp:\"\n        sample_values: \"flash\"\n        sample_values: \"onehr\"\n        col_type: ATTRIBUTE\n        guid: \"3f57f1ed-ee99-4569-99a1-6f746af09ef6\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Cartinfo Totunits\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"faa759b7-297f-4148-bace-06c8066fe640\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Paymthd\"\n        data_type: VARCHAR\n        sample_values: \"cc\"\n        sample_values: \"cc|\"\n        sample_values: \"coa\"\n        col_type: ATTRIBUTE\n        guid: \"19c74685-d680-451d-80af-11065eb05c68\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Purl\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"8a9ff068-adaa-4b0f-9c89-f73169723d3d\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Cameraallowed\"\n        data_type: VARCHAR\n        sample_values: \"camera-allowed\"\n        sample_values: \"camera-blocked\"\n        sample_values: \"camera-notdetermined\"\n        col_type: ATTRIBUTE\n        guid: \"61d37ee6-2c6e-4fa7-8ba4-5130a0ae7346\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Topnav\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"753cd612-a113-4d6b-842b-0251a5d74e8c\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Index\"\n        data_type: INT64\n        col_type: ATTRIBUTE\n        guid: \"631058f5-815c-49a8-86f0-76697117b30a\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Savings Cpnsclip\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"a614c760-e99f-409b-a436-2e995e17eada\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Shipfee\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"2\"\n        sample_values: \"4\"\n        col_type: ATTRIBUTE\n        guid: \"40dc8acd-2921-4f0e-87f8-14ec9ea6a3b7\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Savings Catinvalidnone\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        col_type: ATTRIBUTE\n        guid: \"63e3376e-8b2c-4ed9-9cb1-a320485ad1d7\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Coupon Name\"\n        data_type: VARCHAR\n        sample_values: \"c4\"\n        sample_values: \"7up\"\n        sample_values: \"all\"\n        col_type: ATTRIBUTE\n        guid: \"11caad8d-13ea-4c46-ad88-04e969561960\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Taxes\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"654c625e-231b-4bc5-be5d-c7b9836d9875\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Emailoptin\"\n        data_type: VARCHAR\n        sample_values: \"a\"\n        sample_values: \"d\"\n        sample_values: \"true\"\n        col_type: ATTRIBUTE\n        guid: \"1b70c843-c3fb-4827-a563-8ee33e9bd4aa\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Iv\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"2c5a755b-7b25-4153-bf3d-6e6a62183fce\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Ostype\"\n        data_type: VARCHAR\n        sample_values: \"u\"\n        sample_values: \"tb\"\n        sample_values: \"arm\"\n        col_type: ATTRIBUTE\n        guid: \"1c363310-ab25-432b-a264-1d5ab7e0505c\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Smsoptin\"\n        data_type: VARCHAR\n        sample_values: \"a\"\n        sample_values: \"d\"\n        sample_values: \"true\"\n        col_type: ATTRIBUTE\n        guid: \"c5cc7e86-854f-48e6-91be-6d8721ec7a34\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Rewards Id\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"bbbd8bbc-917b-498b-8b73-87bff0101c26\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Selposition\"\n        data_type: FLOAT\n        col_type: MEASURE\n        guid: \"93cd405e-b07d-4a57-9fa4-83610f0d7d23\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Utyp\"\n        data_type: VARCHAR\n        sample_values: \"count\"\n        sample_values: \"c\"\n        sample_values: \"g\"\n        sample_values: \"l\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"count\"\n        guid: \"e368c5c9-9f93-4273-93fc-373a6e27747e\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"count\"\n          value {\n            token: \"count\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"e368c5c9-9f93-4273-93fc-373a6e27747e\"\n            token_metadata {\n              name: \"Productinfo Utyp\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.013213057988839103\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"count\"\n            }\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Cartinfo Acrt\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"f01fc4fe-71f8-4661-a1a5-4f230be16a14\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Subdate\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"97982770-e422-4108-950c-e0ff5bf23fe5\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Os\"\n        data_type: VARCHAR\n        sample_values: \"ios 14.0\"\n        sample_values: \"ios 14.1\"\n        sample_values: \"ios 14.2\"\n        col_type: ATTRIBUTE\n        guid: \"1e38b3ec-6618-4b54-b9f7-fb95e2f54573\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Filsel\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"e83b2c50-ebc5-440e-8c6a-cd8cb0c62b2e\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Ordver\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"4c1d2493-abbd-4f6e-9af9-c97985c65812\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Subttlwinecart Subtotal\"\n        data_type: FLOAT\n        col_type: MEASURE\n        guid: \"2457f1ba-c882-423a-b588-521b25fd2d39\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Ordid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"6496d28c-dc93-4357-9d1d-437394902d55\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Picloc\"\n        data_type: VARCHAR\n        sample_values: \"dug\"\n        sample_values: \"delivery\"\n        col_type: ATTRIBUTE\n        guid: \"bb026afe-c850-49f4-9b48-26df5b0826ad\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Subttl\"\n        data_type: FLOAT\n        col_type: MEASURE\n        guid: \"dc36f0a7-2956-49ff-8814-f1a675e29897\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Pid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"bb08244f-c039-4410-8040-98eea6631411\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Bp\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"d1241e7a-0e1b-4083-9f47-e82408b6fccc\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Sellerid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"4b30ec76-aff5-4049-933e-8f7d6de38468\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Custsts\"\n        data_type: VARCHAR\n        sample_values: \"first\"\n        sample_values: \"returning\"\n        col_type: ATTRIBUTE\n        guid: \"5a6990d7-e0d3-4acf-b57c-0f34c7d2b628\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Error Id\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"44c7a995-d8b4-4659-90a7-45265af63e24\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Dlvtime\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"c5c25c4a-0a24-4632-bef5-fcced9837b56\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Placement\"\n        data_type: VARCHAR\n        sample_values: \"r00\"\n        sample_values: \"r01\"\n        sample_values: \"r02\"\n        col_type: ATTRIBUTE\n        guid: \"8fc35083-e3bf-4eda-9d0a-f88230d4b2cb\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Rescnt\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"89ce1f75-452b-45b6-9a68-ea035354245a\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Mp\"\n        data_type: VARCHAR\n        sample_values: \"n\"\n        sample_values: \"y\"\n        col_type: ATTRIBUTE\n        guid: \"82cebdad-77a7-49f0-af38-8e39f5135a67\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Ccn\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"11576df9-2914-4089-83f0-25c7f904ab2a\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Tst\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"8b8a33b0-1169-43a7-9630-754288e7ab58\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Page Rurl\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"94dde26f-afea-401c-8651-aaf34e835a6a\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Shopzc\"\n        data_type: VARCHAR\n        sample_values: \"id\"\n        sample_values: \"+\"\n        sample_values: \"0\"\n        sample_values: \"1\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"id\"\n        guid: \"0f8f663f-16c3-41c7-bac2-f1888df27d3c\"\n        column_description: \"\"\n        sample_value_to_recognized_token {\n          key: \"id\"\n          value {\n            token: \"id\"\n            type_enum: VALUE\n            data_type: CHAR\n            match_type: EXACT\n            guid: \"0f8f663f-16c3-41c7-bac2-f1888df27d3c\"\n            token_metadata {\n              name: \"User Shopzc\"\n              table {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              root_tables {\n                guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n                name: \"GCP_OneTag_Prod\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.007032102583840037\n            auto_generated_synonym: false\n            client_state {\n              original_token: \"id\"\n            }\n            is_cohort: false\n          }\n        }\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Subsfunnel\"\n        data_type: VARCHAR\n        sample_values: \"plan-cancelled\"\n        sample_values: \"checkout-annual\"\n        sample_values: \"checkout-monthly\"\n        col_type: ATTRIBUTE\n        guid: \"5f150b6d-21f9-4133-bdf7-b8e3fd6030af\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Modal Action\"\n        data_type: VARCHAR\n        sample_values: \"1\"\n        sample_values: \"\\\"\\\"\"\n        sample_values: \"close\"\n        col_type: ATTRIBUTE\n        guid: \"4046f816-720e-4b51-a368-e5333407b0d1\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Aid\"\n        data_type: VARCHAR\n        sample_values: \"1_\"\n        sample_values: \"1_1\"\n        sample_values: \"1_2\"\n        col_type: ATTRIBUTE\n        guid: \"4c7a5bcd-adce-43cc-b4ab-86b71415360f\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Pfmdtl\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"c1cd9bed-2239-47ae-89df-015e08e79a01\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Cartinfo Ismfc\"\n        data_type: VARCHAR\n        sample_values: \"false\"\n        col_type: ATTRIBUTE\n        guid: \"a5d081b8-ec46-4303-9ebb-da4a9e220c03\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Cookiepref\"\n        data_type: VARCHAR\n        sample_values: \",,\"\n        sample_values: \"c0001\"\n        sample_values: \",c0001,\"\n        col_type: ATTRIBUTE\n        guid: \"7f72d448-3bb5-4325-96f2-2bedc91acdc6\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Coupon Savings\"\n        data_type: VARCHAR\n        sample_values: \"1.7\"\n        sample_values: \"2.6\"\n        sample_values: \"4.5\"\n        col_type: ATTRIBUTE\n        guid: \"90f11a3a-d300-4b94-99be-73d853ba2066\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Upc\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"ce4745bc-afc6-4930-9000-59c896204316\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Savings Totcpns\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"9a545daa-84d6-49fe-8f48-e31eb7b24fb4\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Savings Empsav\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"19b406f4-0240-4a9e-9548-33268355fe1f\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Mto\"\n        data_type: VARCHAR\n        sample_values: \"true\"\n        sample_values: \"false\"\n        col_type: ATTRIBUTE\n        guid: \"a5ce2df3-7d45-447c-8426-50068feeb16e\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Subttlwinecart Sellerid\"\n        data_type: VARCHAR\n        sample_values: \"22222222\"\n        col_type: ATTRIBUTE\n        guid: \"35c4bebb-e4e7-42f5-b444-eea26eb93b31\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Global Attrtoken\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"03d5ca20-e3b6-4e86-9df0-1df9394580b8\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Cpnapld\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"9c317dd4-18ee-4580-aa9b-354414bb9cd6\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Aisle\"\n        data_type: VARCHAR\n        sample_values: \"gum\"\n        sample_values: \"tea\"\n        sample_values: \"beef\"\n        col_type: ATTRIBUTE\n        guid: \"1e0b1745-d7e0-4ce9-89ea-612fa48eea82\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Odrsts\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"2fc4b42f-53c0-443d-b71f-09abb8483a89\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Impressions Bia\"\n        data_type: BOOL\n        col_type: ATTRIBUTE\n        guid: \"77de2840-0e0c-484e-9eb2-3d3e326ed143\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Search Orderby\"\n        data_type: VARCHAR\n        sample_values: \"inventory(1,price)\"\n        sample_values: \"inventory(2,price)\"\n        sample_values: \"inventory(4,price)\"\n        col_type: ATTRIBUTE\n        guid: \"66a81f07-4c7f-4809-a4a6-4e88a6620fa8\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"User Type\"\n        data_type: VARCHAR\n        sample_values: \"a\"\n        sample_values: \"c\"\n        sample_values: \"g\"\n        col_type: ATTRIBUTE\n        guid: \"78166e0c-fd1c-4809-a072-ab2bfef368c9\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Pagefilter Rtyp\"\n        data_type: VARCHAR\n        sample_values: \"1\"\n        sample_values: \"2\"\n        sample_values: \"3\"\n        col_type: ATTRIBUTE\n        guid: \"5e25689f-5eae-4072-8f21-5c5b6f2bfd7c\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Savings Ttlsav\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"0e90222f-c92b-40b8-98fb-8fdc1b295a1d\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Productinfo Units\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"291f9c53-ae0a-4381-baf2-df41258660da\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Savings Ccsav\"\n        data_type: VARCHAR\n        sample_values: \"0\"\n        sample_values: \"1\"\n        sample_values: \"2\"\n        col_type: ATTRIBUTE\n        guid: \"591ee00a-0fa2-47a0-8031-c2465adfd3b3\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Cart Transaction Dlvwin\"\n        data_type: VARCHAR\n        sample_values: \"1-hours\"\n        sample_values: \"2-hours\"\n        sample_values: \"4-hours\"\n        col_type: ATTRIBUTE\n        guid: \"abe78fe6-d0ca-4cac-adc9-127899eaf8e8\"\n        column_description: \"\"\n        is_group_aggregate: false\n      }\n    }\n  }\n}\nquery: \"show me the count of unique session id for yesterday\"\nnl_handler_version: LATEST\n"}]}, {"timestamp": 1735684540706000, "fields": [{"key": "event.log", "type": "string", "value": "nlHandlerVersion = LATEST"}]}, {"timestamp": 1735684540708000, "fields": [{"key": "event.log", "type": "string", "value": "worksheetFacetPayload = worksheet_id: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\nworksheet_name: \"GCP_OneTag_Prod\"\ncolumn_details {\n  column_name: \"Eventtime\"\n  data_type: DATE_TIME\n  sample_values: \"yesterday\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"yesterday\"\n  guid: \"24a306aa-0a5c-4074-81e9-3516817e755e\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"yesterday\"\n    value {\n      token: \"yesterday\"\n      type_enum: VALUE\n      data_type: DATE_TIME\n      match_type: EXACT\n      guid: \"24a306aa-0a5c-4074-81e9-3516817e755e\"\n      join_path {\n        root_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        leaf_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n      }\n      token_metadata {\n        name: \"Eventtime\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.5357142857142857\n      can_be_extended: false\n      client_state {\n        original_token: \"yesterday\"\n      }\n      date_filter {\n        type: YESTERDAY\n        op: EQ\n      }\n      re_resolve: true\n      canonical_form: \"yesterday\"\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Event Subevent\"\n  data_type: VARCHAR\n  sample_values: \"transaction_complete\"\n  sample_values: \"cart_add\"\n  sample_values: \"checkout\"\n  col_type: ATTRIBUTE\n  guid: \"0dd78161-3d7f-4f62-8b82-25ffe1ed7783\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Event Id\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"5f0c8cba-5575-45a3-98d0-44e35bdeec7b\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Adobevisitorid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"c987c01d-ae57-4d39-82a5-40a9d3c8468a\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Absvisitorid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"2748c705-365f-4bed-a2d7-85c1e9e9a303\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Cartinfo Cid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"027a7662-f28c-4f2f-a3be-b46bb7f02923\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Link Name\"\n  data_type: VARCHAR\n  sample_values: \"show more\"\n  sample_values: \"fresh\"\n  sample_values: \"frozen\"\n  sample_values: \"pantry\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"show\"\n  guid: \"dcb21564-630f-4d9c-9418-e570e18da97a\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"show more\"\n    value {\n      token: \"show more\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: PREFIX\n      guid: \"dcb21564-630f-4d9c-9418-e570e18da97a\"\n      token_metadata {\n        name: \"Link Name\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.002692330824291423\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"show\"\n      }\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Pgname\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"1c5e228a-7870-4f41-b622-53436929fca8\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Platform\"\n  data_type: VARCHAR\n  sample_values: \"web\"\n  sample_values: \"app\"\n  col_type: ATTRIBUTE\n  guid: \"2c1f8a5e-a9de-4c12-94a5-6765ef698d08\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Appver\"\n  data_type: VARCHAR\n  sample_values: \"appios:vons:shop:2024.1.0 (1)\"\n  sample_values: \"appios:vons:shop:2024.3.0 (1)\"\n  sample_values: \"appios:shaws:shop:2024.1.0 (1)\"\n  col_type: ATTRIBUTE\n  guid: \"31eb809e-d9fd-4f4e-89fe-f398be5c8518\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Fname\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"7ac75bba-0283-4fee-8235-344be98e81ff\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Cpnid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"72968d8e-f4c9-458f-847f-f815c41e7ce8\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Ptype\"\n  data_type: VARCHAR\n  sample_values: \"m\"\n  sample_values: \"p\"\n  sample_values: \"sale price\"\n  col_type: ATTRIBUTE\n  guid: \"e30aa52c-7eff-4e56-baa7-24eb1ce2c735\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Fpdismon\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"12\"\n  col_type: ATTRIBUTE\n  guid: \"1d9ccede-2c9a-43ae-a936-9425611b8b53\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Mto\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"894e152d-d013-4b80-b670-aac43414b104\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Asf\"\n  data_type: VARCHAR\n  sample_values: \"true\"\n  sample_values: \"false\"\n  col_type: ATTRIBUTE\n  guid: \"a88ca522-acaf-4161-ab65-cab98c432930\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Bp\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"cfa0dbf5-5e6b-4c53-8141-eecfd1ea8e89\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Shelf\"\n  data_type: VARCHAR\n  sample_values: \"...\"\n  sample_values: \"gin\"\n  sample_values: \"gum\"\n  col_type: ATTRIBUTE\n  guid: \"0c5e103c-f34b-4a8e-83b6-56abf6685a8f\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Ist\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"9a80b673-e9bf-4b52-8f38-1b1e3a84073d\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Apisearchterm\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"8bab403a-3b31-446f-a222-08dad66c07f1\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Ordcnt\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"eaefee4e-c544-44f1-a62f-ba6b10aec5b8\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Loginsts\"\n  data_type: VARCHAR\n  sample_values: \"guest\"\n  sample_values: \"logged in\"\n  sample_values: \"guest mode\"\n  col_type: ATTRIBUTE\n  guid: \"3289a6eb-f3d2-41d8-aff6-7357464fbe39\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Lbs\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"ee4fffa9-f3d3-4697-8cff-6df8735338b6\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Offtext\"\n  data_type: VARCHAR\n  sample_values: \"bj\"\n  sample_values: \"gg\"\n  sample_values: \"ic\"\n  col_type: ATTRIBUTE\n  guid: \"a305e8d1-bad3-41df-8a2e-7f0dc9e47e8c\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Carouselsz\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"2e71a79d-cb1e-4f6b-b9c7-feacba463dc6\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Sellernam\"\n  data_type: VARCHAR\n  sample_values: \"iherb\"\n  sample_values: \"karat\"\n  sample_values: \"ispice\"\n  col_type: ATTRIBUTE\n  guid: \"82c54eb5-71b2-46dd-afa3-d7fb1f92fffe\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Display\"\n  data_type: VARCHAR\n  sample_values: \"grid\"\n  sample_values: \"carousel\"\n  col_type: ATTRIBUTE\n  guid: \"fe7e7900-510e-466f-84bf-a3adce8e3717\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Promocode\"\n  data_type: VARCHAR\n  sample_values: \"20vc\"\n  sample_values: \"free\"\n  sample_values: \"save\"\n  col_type: ATTRIBUTE\n  guid: \"91b416aa-4f53-41ea-ab8c-5f68a36a9181\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Ss4\"\n  data_type: VARCHAR\n  sample_values: \"-\"\n  sample_values: \"0\"\n  sample_values: \"1\"\n  col_type: ATTRIBUTE\n  guid: \"02e2d337-0055-48f1-846e-357f225effbb\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Bnr\"\n  data_type: VARCHAR\n  sample_values: \"vons\"\n  sample_values: \"shaws\"\n  sample_values: \"haggen\"\n  col_type: ATTRIBUTE\n  guid: \"9115c90c-e4c9-4964-93a4-1d1212a7ebc1\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Pname\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"1db24b31-f04f-4405-a4f2-d80b80734f88\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Iswysiwygenabled\"\n  data_type: BOOL\n  col_type: ATTRIBUTE\n  guid: \"367a1743-9e59-4837-9d0d-e7e2dd4397e4\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Coupon Clipcnt\"\n  data_type: VARCHAR\n  sample_values: \"1\"\n  col_type: ATTRIBUTE\n  guid: \"824d515e-ca58-47e4-a500-ff35bbb0f0bc\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Fuelsur\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  col_type: ATTRIBUTE\n  guid: \"e9d795c4-4d5f-48f2-bf35-c9f444f0cefc\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Processed Time\"\n  data_type: DATE_TIME\n  sample_values: \"yesterday\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"yesterday\"\n  guid: \"163fc286-051d-4222-9bd4-8c15a3bb6810\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"yesterday\"\n    value {\n      token: \"yesterday\"\n      type_enum: VALUE\n      data_type: DATE_TIME\n      match_type: EXACT\n      guid: \"163fc286-051d-4222-9bd4-8c15a3bb6810\"\n      token_metadata {\n        name: \"Processed Time\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.5357142857142857\n      can_be_extended: false\n      client_state {\n        original_token: \"yesterday\"\n      }\n      date_filter {\n        type: YESTERDAY\n        op: EQ\n      }\n      re_resolve: true\n      canonical_form: \"yesterday\"\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Tfc\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"2471ea22-274a-4451-87ca-39a34f19ea76\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Pfmdtl\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"f08fec8d-c4bf-42ba-8b4a-54f3c6735b49\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Filtyp\"\n  data_type: VARCHAR\n  sample_values: \"count\"\n  sample_values: \"age\"\n  sample_values: \"cut\"\n  sample_values: \"bone\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"count\"\n  guid: \"5084177b-6f6c-4dfe-a2b5-2b9324b08440\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"count\"\n    value {\n      token: \"count\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"5084177b-6f6c-4dfe-a2b5-2b9324b08440\"\n      token_metadata {\n        name: \"Pagefilter Filtyp\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.00794663043454655\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"count\"\n      }\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Dlvbnr\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"0ee244b6-c679-4c61-89c7-d09af5cf4994\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Notificationallowed\"\n  data_type: VARCHAR\n  sample_values: \"notification-allowed\"\n  sample_values: \"notification-blocked\"\n  col_type: ATTRIBUTE\n  guid: \"8415a516-4713-4965-ab32-d1fd37d582a8\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Uniqueorderflag\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"9ae1dca0-3032-4e12-b522-a18639f7ff21\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Isrcmnd\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"4e11f881-770d-4701-99bb-1428bf47dfbd\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Jrnsts\"\n  data_type: VARCHAR\n  sample_values: \"no_action\"\n  sample_values: \"add_products\"\n  sample_values: \"clipped_coupon\"\n  col_type: ATTRIBUTE\n  guid: \"0572787b-ced0-4381-a575-9439525f6ed3\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Event Hr\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"bbb102ef-4db8-4009-9be7-bd90a8f477d5\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Abtestdetails\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"2f28b30f-f301-423b-986a-81d4f8b6b2fc\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Savings J4usav\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"8a81bc05-6ed2-4bb8-8a05-4ccbe168bc6c\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Oos\"\n  data_type: BOOL\n  col_type: ATTRIBUTE\n  guid: \"8f0d0c2b-1d4b-4144-8b53-3ba9e5ea152d\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Pt\"\n  data_type: VARCHAR\n  sample_values: \"pdp\"\n  sample_values: \"home\"\n  sample_values: \"deals\"\n  col_type: ATTRIBUTE\n  guid: \"a473b1ee-5416-42e8-ad83-41bf30e4e4da\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Savings Catinvalidname\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"f2bf3c7c-aa4d-4c87-9f93-5e0d758608cb\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Offset\"\n  data_type: FLOAT\n  col_type: MEASURE\n  guid: \"ac8945d9-e92a-40a2-9a71-22c2652ede5d\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Coupon Type\"\n  data_type: VARCHAR\n  sample_values: \"mf\"\n  sample_values: \"pd\"\n  sample_values: \"sc\"\n  col_type: ATTRIBUTE\n  guid: \"0393c91b-52d7-41f5-a5b9-005f5af23729\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User J4uzc\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"7253fff2-471f-48d6-9667-7215de7c1ce7\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Event Name\"\n  data_type: VARCHAR\n  sample_values: \"4jqo0fw3e6\"\n  sample_values: \"5gs9d9vfsn\"\n  sample_values: \"bpsacydqdt\"\n  col_type: ATTRIBUTE\n  guid: \"f3320483-af85-4003-856c-61279f32d813\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Coupon Sku\"\n  data_type: VARCHAR\n  sample_values: \"101010052\"\n  sample_values: \"101010063\"\n  sample_values: \"101010072\"\n  col_type: ATTRIBUTE\n  guid: \"fd9db799-4f30-48a1-bb4f-a4695a7c3b77\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Rewards Redeemed\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"c402978a-62b8-468b-9550-fe92f38fa45c\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Deptnam\"\n  data_type: VARCHAR\n  sample_values: \"deli\"\n  sample_values: \"flowers\"\n  sample_values: \"tobacco\"\n  col_type: ATTRIBUTE\n  guid: \"a764d742-5e39-4a14-9811-5a1ddc212cda\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Device\"\n  data_type: VARCHAR\n  sample_values: \"a3\"\n  sample_values: \"a6\"\n  sample_values: \"a8\"\n  col_type: ATTRIBUTE\n  guid: \"6ec71f0e-91b5-4ff7-a02b-408b4221c1c2\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Lp\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"a76f31d3-3324-4420-83d3-025be5aa76c3\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Rev\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"a9721f08-477b-4a60-8807-9c644cafd22d\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Sellerid\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"175897\"\n  sample_values: \"544212\"\n  col_type: ATTRIBUTE\n  guid: \"2396d7d2-14c6-4773-abc3-b617ebbe5611\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Error Feature\"\n  data_type: VARCHAR\n  sample_values: \"reviews\"\n  sample_values: \"iauc0051\"\n  sample_values: \"otp-error\"\n  col_type: ATTRIBUTE\n  guid: \"fbe9f87e-1733-4cac-b9ee-baaff9578aef\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Trev\"\n  data_type: VARCHAR\n  sample_values: \"0.0\"\n  sample_values: \"0.1\"\n  sample_values: \"0.2\"\n  col_type: ATTRIBUTE\n  guid: \"6e8e8097-0abe-48d4-95d9-28c146c80261\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Coupon Clipmthd\"\n  data_type: VARCHAR\n  sample_values: \"singleclip\"\n  col_type: ATTRIBUTE\n  guid: \"821f5b38-025d-4341-b09d-2a3775e91e97\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Carouselsec\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"7b572546-72e5-4c05-957f-55c7109c7537\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Ppunit\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"bd4f66b9-1771-4c79-aa93-f073f2e90d41\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Uuid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"3f199d6d-e972-444e-950e-dc8339af5df4\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Savings Pcsav\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"3\"\n  sample_values: \"5\"\n  col_type: ATTRIBUTE\n  guid: \"a7706ec6-2a5c-4fb0-a3c3-3a1beb4a0b08\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Units\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"88b33849-3b4e-45b3-a8b4-6123ed9850ec\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Locationsharing\"\n  data_type: VARCHAR\n  sample_values: \"never\"\n  sample_values: \"always\"\n  sample_values: \"allow once\"\n  col_type: ATTRIBUTE\n  guid: \"59d0ea11-2f37-4c6b-8be5-e7df2255aa07\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Sitetp\"\n  data_type: VARCHAR\n  sample_values: \"ecom\"\n  sample_values: \"loyalty\"\n  col_type: ATTRIBUTE\n  guid: \"05ad7dd8-b9c2-4eaf-b97a-262bcd6f74d3\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Substs\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"9ac56d31-3185-428f-a415-516e553cf8c2\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Error Msg\"\n  data_type: VARCHAR\n  sample_values: \"email| \"\n  sample_values: \"mobile| \"\n  sample_values: \"select day\"\n  col_type: ATTRIBUTE\n  guid: \"d2bbb97a-fcdc-47ef-9d41-bef45377a375\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Completionattrtoken\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"3689c11c-38ee-42b4-8ae4-37eec686d002\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Cartinfo Ctype\"\n  data_type: VARCHAR\n  sample_values: \"checkout\"\n  sample_values: \"full_cart\"\n  sample_values: \"mini_cart\"\n  col_type: ATTRIBUTE\n  guid: \"150d47b1-ffa2-434b-9a69-23fd8f2e8b45\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Channel\"\n  data_type: VARCHAR\n  sample_values: \"home\"\n  sample_values: \"shop\"\n  sample_values: \"local\"\n  col_type: ATTRIBUTE\n  guid: \"77cd85cd-a105-497e-b9a1-1c49dc18a5f8\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User J4usid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"fea20608-fa44-4de0-8d3d-8e507af708b4\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Cartinfo Mfcunavcnt\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"24470184-62d6-475e-826b-59e41733ac30\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Adaflg\"\n  data_type: VARCHAR\n  sample_values: \"no\"\n  sample_values: \"yes\"\n  col_type: ATTRIBUTE\n  guid: \"15064b2a-c7b2-4b48-9b6d-db2248a5cef3\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Cpnflg\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"33bd0434-9d76-43a4-894a-51d973a107d8\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Sortsel\"\n  data_type: VARCHAR\n  sample_values: \"aisles\"\n  sample_values: \"category\"\n  sample_values: \"added date\"\n  col_type: ATTRIBUTE\n  guid: \"d27de12d-928d-4de0-8c14-eeb1a3c2651e\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Ingestion Time\"\n  data_type: DATE_TIME\n  sample_values: \"yesterday\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"yesterday\"\n  guid: \"6943870d-6cb3-4e34-989d-e7af98f65d17\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"yesterday\"\n    value {\n      token: \"yesterday\"\n      type_enum: VALUE\n      data_type: DATE_TIME\n      match_type: EXACT\n      guid: \"6943870d-6cb3-4e34-989d-e7af98f65d17\"\n      token_metadata {\n        name: \"Ingestion Time\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.5357142857142857\n      can_be_extended: false\n      client_state {\n        original_token: \"yesterday\"\n      }\n      date_filter {\n        type: YESTERDAY\n        op: EQ\n      }\n      re_resolve: true\n      canonical_form: \"yesterday\"\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Coupon Id\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"ee5c966f-1bf7-4c93-a841-a7810c4efdba\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Savings Rwdsav\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"79848402-70da-44de-a0d5-d6d84ccbef21\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Offtyp\"\n  data_type: VARCHAR\n  sample_values: \"freshpass\"\n  sample_values: \"grocery rewards\"\n  sample_values: \"015 - hot offers\"\n  col_type: ATTRIBUTE\n  guid: \"fe6a1f8b-5fb4-46ae-958c-906d27642d55\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Ss3\"\n  data_type: VARCHAR\n  sample_values: \"me\"\n  sample_values: \"id\"\n  sample_values: \"show\"\n  sample_values: \"show-code\"\n  sample_values: \"*\"\n  sample_values: \"-\"\n  sample_values: \"0\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"show\"\n  guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"id\"\n    value {\n      token: \"id\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n      token_metadata {\n        name: \"Page Ss3\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006464098426790276\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"id\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"me\"\n    value {\n      token: \"me\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n      token_metadata {\n        name: \"Page Ss3\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006464098426790276\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"me\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"show\"\n    value {\n      token: \"show\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n      join_path {\n        root_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        leaf_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n      }\n      token_metadata {\n        name: \"Page Ss3\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006464098426790276\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"show\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"show-code\"\n    value {\n      token: \"show-code\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: PREFIX\n      guid: \"a668df3b-52a0-402e-b4de-20895f34e732\"\n      token_metadata {\n        name: \"Page Ss3\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.002393043469488402\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"show\"\n      }\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Pid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"8a2eb22f-eb43-458f-82d2-da857b810c1d\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Coupon Carouselsec\"\n  data_type: VARCHAR\n  sample_values: \"-\"\n  sample_values: \"beer\"\n  sample_values: \"null\"\n  col_type: ATTRIBUTE\n  guid: \"6334a03c-3961-4b62-b44d-a96d1adc025f\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Upc\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"0c1540ad-828c-4f20-b993-960d45e85d8b\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Mtyp\"\n  data_type: VARCHAR\n  sample_values: \"deli\"\n  sample_values: \"null\"\n  sample_values: \"banner\"\n  col_type: ATTRIBUTE\n  guid: \"f2a88066-8a89-471f-a0b2-424dc6d5893d\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Ics\"\n  data_type: BOOL\n  col_type: ATTRIBUTE\n  guid: \"3bfd6e9b-204c-4dda-b837-54767520082f\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Addtype\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"ca70f53c-4486-4f8b-a02a-ac0b977d7d5c\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Tmode\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"e0f7ee2b-9f5a-4008-99e0-32a752599f13\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Servcfee\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"0.0\"\n  sample_values: \"3.95\"\n  col_type: ATTRIBUTE\n  guid: \"0ec4b0f4-c960-493d-8f3c-dbbee9509d97\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Sid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"192df95a-b2c4-45e1-bd96-0abbbe17065c\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Cpnclpd\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"01a469c5-c2f2-494f-986c-adb75ee8039d\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Modal Msg\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"3d25208f-4a78-421a-8039-2f1826f1e878\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Hhid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"9bf56fda-448e-47c1-afe9-da4c68ee7b77\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Custid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"a57ce7ba-29c7-4ca7-b00f-9e653a6c0eb3\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Dlvcomb\"\n  data_type: VARCHAR\n  sample_values: \"null\"\n  sample_values: \"attended\"\n  sample_values: \"unattended\"\n  col_type: ATTRIBUTE\n  guid: \"2462cbe2-6e52-459c-89f2-08ee7816221b\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Ss2\"\n  data_type: VARCHAR\n  sample_values: \"the\"\n  sample_values: \"me\"\n  sample_values: \"id\"\n  sample_values: \"count-on-clorox\"\n  sample_values: \"show-low\"\n  sample_values: \"*\"\n  sample_values: \"-\"\n  sample_values: \"0\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"show\"\n  guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"count-on-clorox\"\n    value {\n      token: \"count-on-clorox\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: PREFIX\n      guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n      token_metadata {\n        name: \"Page Ss2\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.002714522636069718\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"count\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"id\"\n    value {\n      token: \"id\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n      token_metadata {\n        name: \"Page Ss2\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006726471635859923\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"id\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"me\"\n    value {\n      token: \"me\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n      join_path {\n        root_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        leaf_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n      }\n      token_metadata {\n        name: \"Page Ss2\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006726471635859923\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"me\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"show-low\"\n    value {\n      token: \"show-low\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: PREFIX\n      guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n      token_metadata {\n        name: \"Page Ss2\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.0026621095023148357\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"show\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"the\"\n    value {\n      token: \"the\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"3731f21c-7942-48a2-87c8-a09bc2704ee4\"\n      join_path {\n        root_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        leaf_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n      }\n      token_metadata {\n        name: \"Page Ss2\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006726471635859923\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"the\"\n      }\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Iqn\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"07864a01-3eef-4a25-aef5-c2a15f147e0a\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Datalc\"\n  data_type: BOOL\n  col_type: ATTRIBUTE\n  guid: \"5433afba-ea90-4030-9825-2ebd2fbd89a2\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Ss1\"\n  data_type: VARCHAR\n  sample_values: \"for\"\n  sample_values: \"me\"\n  sample_values: \"of\"\n  sample_values: \"id\"\n  sample_values: \"count\"\n  sample_values: \"session\"\n  sample_values: \"unique-recipes\"\n  sample_values: \"count-on-clorox\"\n  sample_values: \"for=\"\n  sample_values: \"\\'\"\n  sample_values: \")\"\n  sample_values: \"+\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"for\"\n  guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"count\"\n    value {\n      token: \"count\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n      token_metadata {\n        name: \"Page Ss1\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006636094248347136\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"count\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"count-on-clorox\"\n    value {\n      token: \"count-on-clorox\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: PREFIX\n      guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n      token_metadata {\n        name: \"Page Ss1\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.0026780501022550507\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"count\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"for\"\n    value {\n      token: \"for\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n      token_metadata {\n        name: \"Page Ss1\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006636094248347136\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"for\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"for=\"\n    value {\n      token: \"for=\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT_STEMMED\n      guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n      token_metadata {\n        name: \"Page Ss1\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.0012216070339995837\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"for\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"id\"\n    value {\n      token: \"id\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n      token_metadata {\n        name: \"Page Ss1\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006636094248347136\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"id\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"me\"\n    value {\n      token: \"me\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n      token_metadata {\n        name: \"Page Ss1\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006636094248347136\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"me\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"of\"\n    value {\n      token: \"of\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n      token_metadata {\n        name: \"Page Ss1\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006636094248347136\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"of\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"session\"\n    value {\n      token: \"session\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n      join_path {\n        root_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        leaf_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n      }\n      token_metadata {\n        name: \"Page Ss1\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.006636094248347136\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"session\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"unique-recipes\"\n    value {\n      token: \"unique-recipes\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: PREFIX\n      guid: \"89ef209b-b787-4232-99fb-f717287c789c\"\n      token_metadata {\n        name: \"Page Ss1\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.0027929665898501575\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"unique\"\n      }\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Each\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"d0229210-2589-490f-adf3-ad7783459c21\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Dlvpre\"\n  data_type: VARCHAR\n  sample_values: \"%27\"\n  sample_values: \"dug\"\n  sample_values: \"j4u\"\n  col_type: ATTRIBUTE\n  guid: \"290f49ac-8044-4e2e-9426-9c86fb567a66\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Tp\"\n  data_type: VARCHAR\n  sample_values: \"yext\"\n  col_type: ATTRIBUTE\n  guid: \"f8712afd-fff3-42e0-8e4a-9ac276d26cc8\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Filter\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"add416b5-a02b-4e79-bdef-560fd19be270\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Premslots\"\n  data_type: VARCHAR\n  sample_values: \"null\"\n  sample_values: \"true\"\n  sample_values: \"false\"\n  col_type: ATTRIBUTE\n  guid: \"ab68aa0f-f2c7-4d34-93dc-437235573fb3\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Utype\"\n  data_type: VARCHAR\n  sample_values: \"a\"\n  sample_values: \"c\"\n  sample_values: \"g\"\n  col_type: ATTRIBUTE\n  guid: \"b0eb6f39-cc67-4340-839d-c249de04a367\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Type\"\n  data_type: VARCHAR\n  sample_values: \"search\"\n  sample_values: \"internalsearch:standard\"\n  sample_values: \"wineshopsearch:standard\"\n  col_type: ATTRIBUTE\n  guid: \"2dcba128-5052-4822-9f8e-4a593316c797\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Savings Catinvalidid\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  col_type: ATTRIBUTE\n  guid: \"ee8e22c4-7b86-4e89-bec5-7c935bb72969\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Pname\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"4b1bb516-97d0-421a-a9a2-a64a118f1a6b\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Loctck\"\n  data_type: VARCHAR\n  sample_values: \"id\"\n  sample_values: \"+\"\n  sample_values: \"0\"\n  sample_values: \"1\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"id\"\n  guid: \"0fd841a0-5932-42d7-81c4-f853cb2be8b0\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"id\"\n    value {\n      token: \"id\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"0fd841a0-5932-42d7-81c4-f853cb2be8b0\"\n      join_path {\n        root_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        leaf_table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n      }\n      token_metadata {\n        name: \"User Loctck\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.0070322637094672085\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"id\"\n      }\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Ssid\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"a41783b0-bfae-4ae9-b82d-3e11fcf9a1f6\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Sponsored\"\n  data_type: BOOL\n  col_type: ATTRIBUTE\n  guid: \"443f4fce-4a59-4e4d-a9e3-6b85fd45e317\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Clientua\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"6a6cd000-5fb8-45c1-bc49-709800824c76\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Carousel\"\n  data_type: VARCHAR\n  sample_values: \"unique-wines\"\n  sample_values: \"count-on-clorox\"\n  sample_values: \"unique-wines-drawer\"\n  sample_values: \"shop|unique-wines\"\n  sample_values: \"-\"\n  sample_values: \"--\"\n  sample_values: \"p&g\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"unique\"\n  guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"count-on-clorox\"\n    value {\n      token: \"count-on-clorox\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: PREFIX\n      guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n      token_metadata {\n        name: \"Pagefilter Carousel\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.0032072842174987017\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"count\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"shop|unique-wines\"\n    value {\n      token: \"shop|unique-wines\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: WORD_PREFIX\n      guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n      token_metadata {\n        name: \"Pagefilter Carousel\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.0014052571643761805\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"unique\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"unique-wines\"\n    value {\n      token: \"unique-wines\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: PREFIX\n      guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n      token_metadata {\n        name: \"Pagefilter Carousel\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.0036363009851435747\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"unique\"\n      }\n      is_cohort: false\n    }\n  }\n  sample_value_to_recognized_token {\n    key: \"unique-wines-drawer\"\n    value {\n      token: \"unique-wines-drawer\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: PREFIX\n      guid: \"81c3e4c5-3f39-4d1e-b9eb-8e9bb1b80c16\"\n      token_metadata {\n        name: \"Pagefilter Carousel\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.0029250392998879963\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"unique\"\n      }\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Sessionid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"3e2181e0-f0ec-4cc3-b6ec-78dcb02c5418\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Dlvst\"\n  data_type: VARCHAR\n  sample_values: \"fp:\"\n  sample_values: \"flash\"\n  sample_values: \"onehr\"\n  col_type: ATTRIBUTE\n  guid: \"3f57f1ed-ee99-4569-99a1-6f746af09ef6\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Cartinfo Totunits\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"faa759b7-297f-4148-bace-06c8066fe640\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Paymthd\"\n  data_type: VARCHAR\n  sample_values: \"cc\"\n  sample_values: \"cc|\"\n  sample_values: \"coa\"\n  col_type: ATTRIBUTE\n  guid: \"19c74685-d680-451d-80af-11065eb05c68\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Purl\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"8a9ff068-adaa-4b0f-9c89-f73169723d3d\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Cameraallowed\"\n  data_type: VARCHAR\n  sample_values: \"camera-allowed\"\n  sample_values: \"camera-blocked\"\n  sample_values: \"camera-notdetermined\"\n  col_type: ATTRIBUTE\n  guid: \"61d37ee6-2c6e-4fa7-8ba4-5130a0ae7346\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Topnav\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"753cd612-a113-4d6b-842b-0251a5d74e8c\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Index\"\n  data_type: INT64\n  col_type: ATTRIBUTE\n  guid: \"631058f5-815c-49a8-86f0-76697117b30a\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Savings Cpnsclip\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"a614c760-e99f-409b-a436-2e995e17eada\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Shipfee\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"2\"\n  sample_values: \"4\"\n  col_type: ATTRIBUTE\n  guid: \"40dc8acd-2921-4f0e-87f8-14ec9ea6a3b7\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Savings Catinvalidnone\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  col_type: ATTRIBUTE\n  guid: \"63e3376e-8b2c-4ed9-9cb1-a320485ad1d7\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Coupon Name\"\n  data_type: VARCHAR\n  sample_values: \"c4\"\n  sample_values: \"7up\"\n  sample_values: \"all\"\n  col_type: ATTRIBUTE\n  guid: \"11caad8d-13ea-4c46-ad88-04e969561960\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Taxes\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"654c625e-231b-4bc5-be5d-c7b9836d9875\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Emailoptin\"\n  data_type: VARCHAR\n  sample_values: \"a\"\n  sample_values: \"d\"\n  sample_values: \"true\"\n  col_type: ATTRIBUTE\n  guid: \"1b70c843-c3fb-4827-a563-8ee33e9bd4aa\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Iv\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"2c5a755b-7b25-4153-bf3d-6e6a62183fce\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Ostype\"\n  data_type: VARCHAR\n  sample_values: \"u\"\n  sample_values: \"tb\"\n  sample_values: \"arm\"\n  col_type: ATTRIBUTE\n  guid: \"1c363310-ab25-432b-a264-1d5ab7e0505c\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Smsoptin\"\n  data_type: VARCHAR\n  sample_values: \"a\"\n  sample_values: \"d\"\n  sample_values: \"true\"\n  col_type: ATTRIBUTE\n  guid: \"c5cc7e86-854f-48e6-91be-6d8721ec7a34\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Rewards Id\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"bbbd8bbc-917b-498b-8b73-87bff0101c26\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Selposition\"\n  data_type: FLOAT\n  col_type: MEASURE\n  guid: \"93cd405e-b07d-4a57-9fa4-83610f0d7d23\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Utyp\"\n  data_type: VARCHAR\n  sample_values: \"count\"\n  sample_values: \"c\"\n  sample_values: \"g\"\n  sample_values: \"l\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"count\"\n  guid: \"e368c5c9-9f93-4273-93fc-373a6e27747e\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"count\"\n    value {\n      token: \"count\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"e368c5c9-9f93-4273-93fc-373a6e27747e\"\n      token_metadata {\n        name: \"Productinfo Utyp\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.013213057988839103\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"count\"\n      }\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Cartinfo Acrt\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"f01fc4fe-71f8-4661-a1a5-4f230be16a14\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Subdate\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"97982770-e422-4108-950c-e0ff5bf23fe5\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Os\"\n  data_type: VARCHAR\n  sample_values: \"ios 14.0\"\n  sample_values: \"ios 14.1\"\n  sample_values: \"ios 14.2\"\n  col_type: ATTRIBUTE\n  guid: \"1e38b3ec-6618-4b54-b9f7-fb95e2f54573\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Filsel\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"e83b2c50-ebc5-440e-8c6a-cd8cb0c62b2e\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Ordver\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"4c1d2493-abbd-4f6e-9af9-c97985c65812\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Subttlwinecart Subtotal\"\n  data_type: FLOAT\n  col_type: MEASURE\n  guid: \"2457f1ba-c882-423a-b588-521b25fd2d39\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Ordid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"6496d28c-dc93-4357-9d1d-437394902d55\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Picloc\"\n  data_type: VARCHAR\n  sample_values: \"dug\"\n  sample_values: \"delivery\"\n  col_type: ATTRIBUTE\n  guid: \"bb026afe-c850-49f4-9b48-26df5b0826ad\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Subttl\"\n  data_type: FLOAT\n  col_type: MEASURE\n  guid: \"dc36f0a7-2956-49ff-8814-f1a675e29897\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Pid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"bb08244f-c039-4410-8040-98eea6631411\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Bp\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"d1241e7a-0e1b-4083-9f47-e82408b6fccc\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Sellerid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"4b30ec76-aff5-4049-933e-8f7d6de38468\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Custsts\"\n  data_type: VARCHAR\n  sample_values: \"first\"\n  sample_values: \"returning\"\n  col_type: ATTRIBUTE\n  guid: \"5a6990d7-e0d3-4acf-b57c-0f34c7d2b628\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Error Id\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"44c7a995-d8b4-4659-90a7-45265af63e24\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Dlvtime\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"c5c25c4a-0a24-4632-bef5-fcced9837b56\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Placement\"\n  data_type: VARCHAR\n  sample_values: \"r00\"\n  sample_values: \"r01\"\n  sample_values: \"r02\"\n  col_type: ATTRIBUTE\n  guid: \"8fc35083-e3bf-4eda-9d0a-f88230d4b2cb\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Rescnt\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"89ce1f75-452b-45b6-9a68-ea035354245a\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Mp\"\n  data_type: VARCHAR\n  sample_values: \"n\"\n  sample_values: \"y\"\n  col_type: ATTRIBUTE\n  guid: \"82cebdad-77a7-49f0-af38-8e39f5135a67\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Ccn\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"11576df9-2914-4089-83f0-25c7f904ab2a\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Tst\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"8b8a33b0-1169-43a7-9630-754288e7ab58\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Page Rurl\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"94dde26f-afea-401c-8651-aaf34e835a6a\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Shopzc\"\n  data_type: VARCHAR\n  sample_values: \"id\"\n  sample_values: \"+\"\n  sample_values: \"0\"\n  sample_values: \"1\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"id\"\n  guid: \"0f8f663f-16c3-41c7-bac2-f1888df27d3c\"\n  column_description: \"\"\n  sample_value_to_recognized_token {\n    key: \"id\"\n    value {\n      token: \"id\"\n      type_enum: VALUE\n      data_type: CHAR\n      match_type: EXACT\n      guid: \"0f8f663f-16c3-41c7-bac2-f1888df27d3c\"\n      token_metadata {\n        name: \"User Shopzc\"\n        table {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        root_tables {\n          guid: \"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"\n          name: \"GCP_OneTag_Prod\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.007032102583840037\n      auto_generated_synonym: false\n      client_state {\n        original_token: \"id\"\n      }\n      is_cohort: false\n    }\n  }\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Subsfunnel\"\n  data_type: VARCHAR\n  sample_values: \"plan-cancelled\"\n  sample_values: \"checkout-annual\"\n  sample_values: \"checkout-monthly\"\n  col_type: ATTRIBUTE\n  guid: \"5f150b6d-21f9-4133-bdf7-b8e3fd6030af\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Modal Action\"\n  data_type: VARCHAR\n  sample_values: \"1\"\n  sample_values: \"\\\"\\\"\"\n  sample_values: \"close\"\n  col_type: ATTRIBUTE\n  guid: \"4046f816-720e-4b51-a368-e5333407b0d1\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Aid\"\n  data_type: VARCHAR\n  sample_values: \"1_\"\n  sample_values: \"1_1\"\n  sample_values: \"1_2\"\n  col_type: ATTRIBUTE\n  guid: \"4c7a5bcd-adce-43cc-b4ab-86b71415360f\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Pfmdtl\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"c1cd9bed-2239-47ae-89df-015e08e79a01\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Cartinfo Ismfc\"\n  data_type: VARCHAR\n  sample_values: \"false\"\n  col_type: ATTRIBUTE\n  guid: \"a5d081b8-ec46-4303-9ebb-da4a9e220c03\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Cookiepref\"\n  data_type: VARCHAR\n  sample_values: \",,\"\n  sample_values: \"c0001\"\n  sample_values: \",c0001,\"\n  col_type: ATTRIBUTE\n  guid: \"7f72d448-3bb5-4325-96f2-2bedc91acdc6\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Coupon Savings\"\n  data_type: VARCHAR\n  sample_values: \"1.7\"\n  sample_values: \"2.6\"\n  sample_values: \"4.5\"\n  col_type: ATTRIBUTE\n  guid: \"90f11a3a-d300-4b94-99be-73d853ba2066\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Upc\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"ce4745bc-afc6-4930-9000-59c896204316\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Savings Totcpns\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"9a545daa-84d6-49fe-8f48-e31eb7b24fb4\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Savings Empsav\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"19b406f4-0240-4a9e-9548-33268355fe1f\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Mto\"\n  data_type: VARCHAR\n  sample_values: \"true\"\n  sample_values: \"false\"\n  col_type: ATTRIBUTE\n  guid: \"a5ce2df3-7d45-447c-8426-50068feeb16e\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Subttlwinecart Sellerid\"\n  data_type: VARCHAR\n  sample_values: \"22222222\"\n  col_type: ATTRIBUTE\n  guid: \"35c4bebb-e4e7-42f5-b444-eea26eb93b31\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Global Attrtoken\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"03d5ca20-e3b6-4e86-9df0-1df9394580b8\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Cpnapld\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"9c317dd4-18ee-4580-aa9b-354414bb9cd6\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Aisle\"\n  data_type: VARCHAR\n  sample_values: \"gum\"\n  sample_values: \"tea\"\n  sample_values: \"beef\"\n  col_type: ATTRIBUTE\n  guid: \"1e0b1745-d7e0-4ce9-89ea-612fa48eea82\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Odrsts\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"2fc4b42f-53c0-443d-b71f-09abb8483a89\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Impressions Bia\"\n  data_type: BOOL\n  col_type: ATTRIBUTE\n  guid: \"77de2840-0e0c-484e-9eb2-3d3e326ed143\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Search Orderby\"\n  data_type: VARCHAR\n  sample_values: \"inventory(1,price)\"\n  sample_values: \"inventory(2,price)\"\n  sample_values: \"inventory(4,price)\"\n  col_type: ATTRIBUTE\n  guid: \"66a81f07-4c7f-4809-a4a6-4e88a6620fa8\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"User Type\"\n  data_type: VARCHAR\n  sample_values: \"a\"\n  sample_values: \"c\"\n  sample_values: \"g\"\n  col_type: ATTRIBUTE\n  guid: \"78166e0c-fd1c-4809-a072-ab2bfef368c9\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Pagefilter Rtyp\"\n  data_type: VARCHAR\n  sample_values: \"1\"\n  sample_values: \"2\"\n  sample_values: \"3\"\n  col_type: ATTRIBUTE\n  guid: \"5e25689f-5eae-4072-8f21-5c5b6f2bfd7c\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Savings Ttlsav\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"0e90222f-c92b-40b8-98fb-8fdc1b295a1d\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Productinfo Units\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"291f9c53-ae0a-4381-baf2-df41258660da\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Savings Ccsav\"\n  data_type: VARCHAR\n  sample_values: \"0\"\n  sample_values: \"1\"\n  sample_values: \"2\"\n  col_type: ATTRIBUTE\n  guid: \"591ee00a-0fa2-47a0-8031-c2465adfd3b3\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Cart Transaction Dlvwin\"\n  data_type: VARCHAR\n  sample_values: \"1-hours\"\n  sample_values: \"2-hours\"\n  sample_values: \"4-hours\"\n  col_type: ATTRIBUTE\n  guid: \"abe78fe6-d0ca-4cac-adc9-127899eaf8e8\"\n  column_description: \"\"\n  is_group_aggregate: false\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "ff55f479c3e5558b", "flags": 1, "operationName": "getSageQueryGenResults", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "938d5eef0143f580"}], "startTime": 1735684540711000, "duration": 3223109, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684540712000, "fields": [{"key": "event.log", "type": "string", "value": "Couldnt find cache value for key: 17510819-5784-11ee-8f97-3da98_afbfee29-5842-4fd1-9a70-1fc9c36b5b9b"}]}, {"timestamp": 1735684540712000, "fields": [{"key": "event.log", "type": "string", "value": "Populated properties in WorksheetFacetPayload"}]}, {"timestamp": 1735684540717000, "fields": [{"key": "event.log", "type": "string", "value": "Sage query gen cache hit = false"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "938d5eef0143f580", "flags": 1, "operationName": "lambda$getAnswerSuggestionFuture$33", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "23de6ca7d31d90e8"}], "startTime": 1735684540711000, "duration": 3223818, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684543934000, "fields": [{"key": "event.log", "type": "string", "value": "Sage TML token list = [unique count [User Sessionid] [Eventtime] = 'yesterday']"}]}, {"timestamp": 1735684543935000, "fields": [{"key": "event.log", "type": "string", "value": "Columns with missing sample values in prompt: [column_name: \"Event Id\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"5f0c8cba-5575-45a3-98d0-44e35bdeec7b\"\ncolumn_description: \"\"\nis_group_aggregate: false\nknn_answer_score: 0.26597055\n, column_name: \"Error Id\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"44c7a995-d8b4-4659-90a7-45265af63e24\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Rewards Id\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"bbbd8bbc-917b-498b-8b73-87bff0101c26\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Coupon Id\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"ee5c966f-1bf7-4c93-a841-a7810c4efdba\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Global Attrtoken\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"03d5ca20-e3b6-4e86-9df0-1df9394580b8\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Search Impressions Upc\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"ce4745bc-afc6-4930-9000-59c896204316\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Productinfo Pfmdtl\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"c1cd9bed-2239-47ae-89df-015e08e79a01\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Page Rurl\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"94dde26f-afea-401c-8651-aaf34e835a6a\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Search Tst\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"8b8a33b0-1169-43a7-9630-754288e7ab58\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"User Ccn\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"11576df9-2914-4089-83f0-25c7f904ab2a\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Search Rescnt\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"89ce1f75-452b-45b6-9a68-ea035354245a\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Cart Transaction Dlvtime\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"c5c25c4a-0a24-4632-bef5-fcced9837b56\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Search Impressions Sellerid\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"4b30ec76-aff5-4049-933e-8f7d6de38468\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Search Impressions Pid\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"bb08244f-c039-4410-8040-98eea6631411\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Cart Transaction Ordid\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"6496d28c-dc93-4357-9d1d-437394902d55\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Cart Transaction Ordver\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"4c1d2493-abbd-4f6e-9af9-c97985c65812\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Pagefilter Filsel\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"e83b2c50-ebc5-440e-8c6a-cd8cb0c62b2e\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"User Subdate\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"97982770-e422-4108-950c-e0ff5bf23fe5\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Cart Cartinfo Acrt\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"f01fc4fe-71f8-4661-a1a5-4f230be16a14\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Cart Transaction Taxes\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"654c625e-231b-4bc5-be5d-c7b9836d9875\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Pagefilter Topnav\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"753cd612-a113-4d6b-842b-0251a5d74e8c\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Page Purl\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"8a9ff068-adaa-4b0f-9c89-f73169723d3d\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"User Sessionid\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"3e2181e0-f0ec-4cc3-b6ec-78dcb02c5418\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"User Clientua\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"6a6cd000-5fb8-45c1-bc49-709800824c76\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Productinfo Pname\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"4b1bb516-97d0-421a-a9a2-a64a118f1a6b\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Search Filter\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"add416b5-a02b-4e79-bdef-560fd19be270\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"User Custid\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"a57ce7ba-29c7-4ca7-b00f-9e653a6c0eb3\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"User Hhid\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"9bf56fda-448e-47c1-afe9-da4c68ee7b77\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Modal Msg\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"3d25208f-4a78-421a-8039-2f1826f1e878\"\ncolumn_description: \"\"\nis_group_aggregate: false\n, column_name: \"Page Sid\"\ndata_type: VARCHAR\ncol_type: ATTRIBUTE\nguid: \"192df95a-b2c4-45e1-bd96-0abbbe17065c\"\ncolumn_description: \"\"\nis_group_aggregate: false\n]"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "27207ba3dd91dd06", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "c6f0f5461313f5ad"}], "startTime": 1735684540712000, "duration": 24, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "292329441914dd5b", "flags": 1, "operationName": "getCachedSageQueryGenResultFromElastic", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "ff55f479c3e5558b"}], "startTime": 1735684540712000, "duration": 4307, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "c6f0f5461313f5ad", "flags": 1, "operationName": "fetch", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "292329441914dd5b"}], "startTime": 1735684540712000, "duration": 4267, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684540713000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=57349ebd-b688-45ac-8864-5d830cffc614 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"17510819-5784-11ee-8f97-3da98\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"match_phrase\":{\"NL_QUERY\":{\"query\":\"show me the count of unique session id for yesterday\"}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 1\"}}},{\"bool\":{\"minimum_should_match\":\"1\",\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"57349ebd-b688-45ac-8864-5d830cffc614\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}}]}},\"size\":10}"}]}, {"timestamp": 1735684540716000, "fields": [{"key": "event.log", "type": "string", "value": "search-response : SearchResponse: {\"took\":0,\"timed_out\":false,\"_shards\":{\"failed\":0.0,\"successful\":1.0,\"total\":1.0,\"skipped\":0.0},\"hits\":{\"total\":{\"relation\":\"eq\",\"value\":0},\"hits\":[],\"max_score\":null}}"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "e9c15155e215d391", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "c6f0f5461313f5ad"}], "startTime": 1735684540713000, "duration": 3820, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "3d9313a0df13e43b", "flags": 1, "operationName": "KNNSearch", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "1ca4f93efc663a9c"}], "startTime": 1735684540717000, "duration": 815281, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684540717000, "fields": [{"key": "event.log", "type": "string", "value": "Fetching KNN for query: show me the count of unique session id for yesterday"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "1ca4f93efc663a9c", "flags": 1, "operationName": "fetchKnnEntries", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "938d5eef0143f580"}], "startTime": 1735684540717000, "duration": 816186, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684541533000, "fields": [{"key": "event.log", "type": "string", "value": "Feedback Column scores: "}]}, {"timestamp": 1735684541533000, "fields": [{"key": "event.log", "type": "string", "value": "Columns dropped from Knn Search "}]}, {"timestamp": 1735684541533000, "fields": [{"key": "event.log", "type": "string", "value": "Final Column scores: Event Subevent_0dd78161-3d7f-4f62-8b82-25ffe1ed7783=0.26597055, Event Id_5f0c8cba-5575-45a3-98d0-44e35bdeec7b=0.26597055, Eventtime_24a306aa-0a5c-4074-81e9-3516817e755e=0.26597055, Page Platform_2c1f8a5e-a9de-4c12-94a5-6765ef698d08=0.26597055"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "0cd454869e04fbf0", "flags": 1, "operationName": "getSchemaFromDescriptors", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "177338e8c7340aca"}], "startTime": 1735684540717000, "duration": 816879, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "bfcae052d872fdbb", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "785b9f2c4994c3b2"}], "startTime": 1735684540717000, "duration": 342, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "785b9f2c4994c3b2", "flags": 1, "operationName": "fetchRelevantFeedbackForQuery", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "431d24626f9092a0"}], "startTime": 1735684540717000, "duration": 6571, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "8f273ea677df748b", "flags": 1, "operationName": "generateSageQueries", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "ff55f479c3e5558b"}], "startTime": 1735684540717000, "duration": 3211844, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684540717000, "fields": [{"key": "event.log", "type": "string", "value": "NLPConfig: NLPConfig(dateTokenExtractionHeuristics=false, dateSQLFunctionHeuristics=true, dateSQLFunctionDefinitionV2=false, nl2TMLPromptGeneration=false, comparisonHeuristic=true, dateAggregationHeuristic=true, nlHandlerVersion=STABLE, removeOverlappingColumnDetailSampleValues=false, includeColumnSynonymsInPrompt=true, generateColumnMap=false, includeColumnValueSynonymsInPrompt=false, forEachHeuristic=true, seasonHeuristic=true, bypassCache=false, isColdStart=false, useZeroShotTMLPromptGeneration=true, includeColumnTableInfo=true, literacyPromptingEnabled=true, noSage=false, doNotReplaceWildcard=false, maxNumSelectItems=5, cotPromptingEnabled=false)"}]}, {"timestamp": 1735684543928000, "fields": [{"key": "event.log", "type": "string", "value": "Ambiguities in phrases: token {\n  token: \"count\"\n  type_enum: KEYWORD\n}\ntoken {\n  token: \"User Sessionid\"\n  type_enum: ATTRIBUTE\n  guid: \"3e2181e0-f0ec-4cc3-b6ec-78dcb02c5418\"\n}\nalternative_phrases {\n  token {\n    token: \"unique count\"\n    type_enum: KEYWORD\n  }\n  token {\n    token: \"User Sessionid\"\n    type_enum: ATTRIBUTE\n    guid: \"3e2181e0-f0ec-4cc3-b6ec-78dcb02c5418\"\n  }\n  phrase_type: AGGREGATED_COLUMN_PHRASE\n}\nambiguity_type: KEYWORD_SELECTION\nphrase_type: AGGREGATED_COLUMN_PHRASE\n"}]}, {"timestamp": 1735684543929000, "fields": [{"key": "event.log", "type": "string", "value": "UsedColumns-QUERY_HYPOTHESIS: 1"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "431d24626f9092a0", "flags": 1, "operationName": "fetchNLSqlMappingsForQuery", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "938d5eef0143f580"}], "startTime": 1735684540717000, "duration": 6817, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "aa0d4bbed352a1c3", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "3d9313a0df13e43b"}], "startTime": 1735684540717000, "duration": 17426, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "0af4362b9d599ad9", "flags": 1, "operationName": "getSchemaFromQH", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "938d5eef0143f580"}], "startTime": 1735684540717000, "duration": 35, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "069bb28b0c1cf02c", "flags": 1, "operationName": "fetchSchemaFromConvContext", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "938d5eef0143f580"}], "startTime": 1735684540717000, "duration": 19, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "177338e8c7340aca", "flags": 1, "operationName": "getSchema", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "8f273ea677df748b"}], "startTime": 1735684540717000, "duration": 817537, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684541534000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from NL-to-SQL map: "}]}, {"timestamp": 1735684541534000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Query Hypothesis: User Shopzc,Productinfo Utyp,Pagefilter Carousel,User Loctck,Page Ss1,Page Ss2,Page Ss3,Ingestion Time,Pagefilter Filtyp,Processed Time,Link Name,Eventtime"}]}, {"timestamp": 1735684541534000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from KNN search on saved answers: Event Subevent,Event Id,Eventtime,Page Platform"}]}, {"timestamp": 1735684541534000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Semantic Value Search: "}]}, {"timestamp": 1735684541534000, "fields": [{"key": "event.log", "type": "string", "value": "Query Hypothesis column, sample values: {User Loctck=[id, +, 0, 1], Eventtime=[yesterday], Ingestion Time=[yesterday], Link Name=[show more, fresh, frozen, pantry], Productinfo Utyp=[count, c, g, l], Pagefilter Filtyp=[count, age, cut, bone], Processed Time=[yesterday], Page Ss1=[for, me, of, id, count, session, unique-recipes, count-on-clorox, for=, ', ), +], Page Ss2=[the, me, id, count-on-clorox, show-low, *, -, 0], Page Ss3=[me, id, show, show-code, *, -, 0], Pagefilter Carousel=[unique-wines, count-on-clorox, unique-wines-drawer, shop|unique-wines, -, --, p&g], User Shopzc=[id, +, 0, 1]}"}]}, {"timestamp": 1735684541534000, "fields": [{"key": "event.log", "type": "string", "value": "Final Ranked Query Relevant Columns: Eventtime,Event Subevent,Event Id,Page Platform,User Shopzc,Productinfo Utyp,Pagefilter Carousel,User Loctck,Page Ss1,Page Ss2,Page Ss3,Ingestion Time,Pagefilter Filtyp,Processed Time,Link Name,Error Id,Rewards Id,Coupon Id"}]}, {"timestamp": 1735684541534000, "fields": [{"key": "event.log", "type": "string", "value": "Final Query relevant column, sample values: {Page Platform=[web, app], Error Id=[], User Loctck=[id, +, 0, 1], Coupon Id=[], Ingestion Time=[yesterday], Eventtime=[yesterday], Link Name=[show more, fresh, frozen, pantry], Productinfo Utyp=[count, c, g, l], Pagefilter Filtyp=[count, age, cut, bone], Event Id=[], Pagefilter Carousel=[unique-wines, count-on-clorox, unique-wines-drawer, shop|unique-wines, -, --, p&g], Event Subevent=[transaction_complete, cart_add, checkout], Rewards Id=[], Processed Time=[yesterday], Page Ss1=[for, me, of, id, count, session, unique-recipes, count-on-clorox, for=, ', ), +], Page Ss2=[the, me, id, count-on-clorox, show-low, *, -, 0], Page Ss3=[me, id, show, show-code, *, -, 0], User Shopzc=[id, +, 0, 1]}"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "0d72b09200be5cac", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "e27a84ab7a5607e8"}], "startTime": 1735684540718000, "duration": 5061, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "cfe1e1ecbc9994e9", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "e27a84ab7a5607e8"}], "startTime": 1735684540718000, "duration": 222, "tags": [{"key": "NLSqlMappingRequest.worksheet", "type": "string", "value": "afbfee29-5842-4fd1-9a70-1fc9c36b5b9b"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "e27a84ab7a5607e8", "flags": 1, "operationName": "ElasticNLSqlMappingFetcher.fetch", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "785b9f2c4994c3b2"}], "startTime": 1735684540718000, "duration": 6170, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684540718000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=57349ebd-b688-45ac-8864-5d830cffc614 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"afbfee29-5842-4fd1-9a70-1fc9c36b5b9b\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"17510819-5784-11ee-8f97-3da98\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"bool\":{\"minimum_should_match\":\"1\",\"must\":[],\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"57349ebd-b688-45ac-8864-5d830cffc614\"}}},{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"WORKSHEET_USER\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}},{\"range\":{\"UP_VOTES\":{\"gte\":1}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 0\"}}}],\"minimum_should_match\":\"1\",\"should\":[{\"match\":{\"PARENT_QUERY\":{\"query\":\"show me the count of unique session id for yesterday\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"yesterday\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"session\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"count\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"id\"}}}]}},\"size\":20,\"track_scores\":true}"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "051cad459d652a66", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "e27a84ab7a5607e8"}], "startTime": 1735684540723000, "duration": 333, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "b85151e0b265ca57", "flags": 1, "operationName": "searchByEmbedding", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "3d9313a0df13e43b"}], "startTime": 1735684540735000, "duration": 797661, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "x.request.id", "type": "string", "value": "665a37a4-5ea6-49f2-b22b-e7e74892b4fd"}, {"key": "user.id", "type": "string", "value": "57349ebd-b688-45ac-8864-5d830cffc614"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "tenant.id", "type": "string", "value": "17510819-5784-11ee-8f97-3da98"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "07f4a8970519dc78", "flags": 1, "operationName": "applyImpressionWeightedFiltering", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "1ca4f93efc663a9c"}], "startTime": 1735684541533000, "duration": 56, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684541533000, "fields": [{"key": "event.log", "type": "string", "value": "Total Answers Filtered out: 0"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "bfaf7272a6122105", "flags": 1, "operationName": "filterColumnDetails", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "8f273ea677df748b"}], "startTime": 1735684541534000, "duration": 1183, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684541535000, "fields": [{"key": "event.log", "type": "string", "value": "Original Column Details: User Shopzc,Productinfo Utyp,Pagefilter Carousel,User Loctck,Page Ss1,Page Ss2,Page Ss3,Ingestion Time,Pagefilter Filtyp,Processed Time,Link Name,Cart Transaction Dlvwin,Cart Savings Ccsav,Productinfo Units,Cart Savings Ttlsav,Pagefilter Rtyp,User Type,Search Orderby,Search Impressions Bia,User Odrsts,Productinfo Aisle,Productinfo Cpnapld,Global Attrtoken,Cart Transaction Subttlwinecart Sellerid,Productinfo Mto,Cart Savings Empsav,Cart Savings Totcpns,Search Impressions Upc,Coupon Savings,User Cookiepref,Cart Cartinfo Ismfc,Productinfo Pfmdtl,Productinfo Aid,Modal Action,Pagefilter Subsfunnel,Page Rurl,Search Tst,User Ccn,Search Impressions Mp,Search Rescnt,Pagefilter Placement,Cart Transaction Dlvtime,Error Id,User Custsts,Search Impressions Sellerid,Productinfo Bp,Search Impressions Pid,Cart Transaction Subttl,User Picloc,Cart Transaction Ordid,Cart Transaction Subttlwinecart Subtotal,Cart Transaction Ordver,Pagefilter Filsel,User Os,User Subdate,Cart Cartinfo Acrt,Search Selposition,Rewards Id,User Smsoptin,User Ostype,Productinfo Iv,User Emailoptin,Cart Transaction Taxes,Coupon Name,Cart Savings Catinvalidnone,Cart Transaction Shipfee,Cart Savings Cpnsclip,Search Impressions Index,Pagefilter Topnav,User Cameraallowed,Page Purl,Cart Transaction Paymthd,Cart Cartinfo Totunits,Cart Transaction Dlvst,User Sessionid,User Clientua,Search Impressions Sponsored,User Ssid,Productinfo Pname,Cart Savings Catinvalidid,Search Type,User Utype,Pagefilter Premslots,Search Filter,Page Tp,User Dlvpre,Productinfo Each,User Datalc,Productinfo Iqn,User Dlvcomb,User Custid,User Hhid,Modal Msg,Productinfo Cpnclpd,Page Sid,Cart Transaction Servcfee,Cart Transaction Tmode,User Addtype,Productinfo Ics,Pagefilter Mtyp,Productinfo Upc,Coupon Carouselsec,Productinfo Pid,Productinfo Offtyp,Cart Savings Rwdsav,Coupon Id,Pagefilter Sortsel,Productinfo Cpnflg,Pagefilter Adaflg,Cart Cartinfo Mfcunavcnt,User J4usid,Page Channel,Cart Cartinfo Ctype,Search Completionattrtoken,Error Msg,User Substs,Page Sitetp,User Locationsharing,Search Impressions Units,Cart Savings Pcsav,User Uuid,Productinfo Ppunit,Productinfo Carouselsec,Coupon Clipmthd,Cart Transaction Trev,Error Feature,Productinfo Sellerid,Cart Transaction Rev,Productinfo Lp,User Device,Productinfo Deptnam,Rewards Redeemed,Coupon Sku,Event Name,User J4uzc,Coupon Type,Search Offset,Cart Savings Catinvalidname,Page Pt,Search Impressions Oos,Cart Savings J4usav,Page Abtestdetails,Event Hr,User Jrnsts,Productinfo Isrcmnd,Cart Transaction Uniqueorderflag,User Notificationallowed,User Dlvbnr,Search Impressions Pfmdtl,Search Tfc,Cart Transaction Fuelsur,Coupon Clipcnt,Cart Iswysiwygenabled,Search Impressions Pname,Page Bnr,Page Ss4,Pagefilter Promocode,Search Impressions Display,Productinfo Sellernam,Productinfo Carouselsz,Productinfo Offtext,Productinfo Lbs,User Loginsts,User Ordcnt,Search Apisearchterm,Search Ist,Productinfo Shelf,Search Impressions Bp,Search Asf,Search Impressions Mto,Pagefilter Fpdismon,Productinfo Ptype,Productinfo Cpnid,Productinfo Fname,Page Appver,Page Platform,Page Pgname,Cart Cartinfo Cid,User Absvisitorid,User Adobevisitorid,Event Id,Event Subevent,Eventtime"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "1e20c1d92d86788b", "flags": 1, "operationName": "fetchSemanticValueMatches", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "938d5eef0143f580"}], "startTime": 1735684541534000, "duration": 15, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "8865c816e6ba1cab", "flags": 1, "operationName": "mergeSchemas", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "177338e8c7340aca"}], "startTime": 1735684541534000, "duration": 188, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "ca7aa6d582c7dba4", "flags": 1, "operationName": "selectColumns", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "bfaf7272a6122105"}], "startTime": 1735684541535000, "duration": 303, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "1ed8291742bf1790", "flags": 1, "operationName": "generateResponse", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "d7765690ccd0d060"}], "startTime": 1735684541537000, "duration": 2390597, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "369f40b079f1dad4", "flags": 1, "operationName": "getFewShotExamples", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "1ed8291742bf1790"}], "startTime": 1735684541537000, "duration": 384545, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684541921000, "fields": [{"key": "event.log", "type": "string", "value": "Few-shot examples: \n'''\n\nRelevant keywords for phrase tokens are given below that can be used if needed (NOT relevant for formula expressions, as they have different functions), do not use any other keywords:\n{\"function\":\"top|bottom n\",\"description\":\"Generates the top (or bottom) n items from a sorted result. Substitute 'n' with number specified by the user in query. When 'sort by' is used with 'top', it automatically implies sorting is done in descending order. If 'bottom' is used with 'sort by', then it is in ascending order by default.\",\"example\":[\"top 10 [Event Subevent] sort by [Productinfo Units]\",\"bottom 25 [Event Subevent] sort by count [Event Subevent]\"]}\n{\"function\":\"sort by\",\"example\":[\"sort by [Productinfo Units] ascending\",\"sort by count [Event Subevent] descending\"]}\n{\"function\":\"by\",\"description\":\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\",\"example\":[\"by [Productinfo Units]\"]}\n{\"function\":\"begins|ends with\",\"description\":\"Returns all column values that begins or ends with a value defined in quotes.\",\"example\":[\"[Event Subevent] begins with 'transaction_complete'\",\"[Event Subevent] ends with 'transaction_complete'\"]}\n{\"function\":\"contains|not contains\",\"description\":\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\",\"example\":[\"[Event Subevent] contains 'transaction_complete'\",\"[Event Subevent] contains 'transaction_complete' 'cart_add'\",\"[Event Subevent] not contains 'transaction_complete'\"]}\n{\"function\":\"vs\",\"description\":\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = 'east' vs [region] = 'west'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = 'value1' vs [attribute] = 'value2'\",\"example\":[\"[Productinfo Units] [Event Subevent] = 'transaction_complete' vs [Event Subevent] = 'cart_add'\",\"[Productinfo Units] [Eventtime] = 'this year' vs [Eventtime] = 'last year'\",\"[Cart Savings Totcpns] [Event Id] = 'a1_value0' vs [Event Id] = 'a1_value1' vs [Event Id] = 'a1_value2'\"]}\n{\"function\":\"growth of\",\"description\":\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\",\"example\":[\"growth of [Productinfo Units] by [Eventtime] [Eventtime].'daily'\"]}\n{\"function\":\"unique count\",\"description\":\"Similar to SQL's SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"unique count [Event Subevent]\"]}\n{\"function\":\"count\",\"description\":\"Similar to SQL's SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"count [Event Subevent]\"]}\n{\"function\":\"in|not in\",\"description\":\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user's query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using 'in' or 'not in' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn't support use of 'vs' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where 'subsearch' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using 'not in'.\",\"example\":[\"[Event Subevent] in ([Event Subevent] [Event Subevent] begins with 'transaction_complete' [Productinfo Units] > 100 top 10 [Event Subevent] sort by [Cart Savings Totcpns] descending)\",\"[Event Subevent] not in ([Event Subevent] [Event Subevent] begins with 'transaction_complete' [Productinfo Units] > 100 top 10 [Event Subevent] sort by [Cart Savings Totcpns] descending)\"]}\n{\"function\":\"sum|average|min|max\",\"description\":\"Similar to SQL's SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\",\"example\":[\"sum [Productinfo Units]\",\"average [Productinfo Units]\"]}\n{\"function\":\"for each\",\"description\":\"Used on attributes i.e. columns with type text.\",\"example\":[\"for each [Event Subevent]\"]}\n\nYou can use the following function references with examples that are valid only for formula expressions. Use only relevant functions, if required:\n{\"function\":\"average\",\"description\":\"Returns the average of all the values of a column.\",\"example\":[\"average ( Productinfo Units )\"]}\n{\"function\":\"count\",\"description\":\"Returns the number of rows in the table containing the column.\",\"example\":[\"count ( Event Subevent )\"]}\n{\"function\":\"count_if\",\"description\":\"Returns the number of rows in the table containing the column that meet a given criteria.\",\"example\":[\"count_if ( (Productinfo Units > 10), Event Subevent )\",\"count_if ( (Productinfo Units > 10) , month ( Eventtime ) )\"]}\n{\"function\":\"cumulative_average\",\"description\":\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_average (Productinfo Units, Event Subevent, Event Id)\"]}\n{\"function\":\"cumulative_sum\",\"description\":\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_sum (Productinfo Units, Event Subevent)\"]}\n{\"function\":\"group_aggregate\",\"description\":\"**Summary of the `group_aggregate` Function**\n\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\n\n**Function Syntax:**\n```\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\n```\n\n**Parameters:**\n\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\n   - `sum(measure0)`\n   - `count(attribute0)`\n   - `unique count (attribute0)`\n   - `average(measure1)`\n   - `avg(measure1)`\n\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\n   - **`query_groups()`**: Includes all groupings from the main query.\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\n\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\n   - **`query_filters()`**: Includes all filters from the main query.\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\n\n**Usage Notes:**\n\n- **Grouping Modifications:**\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\n\n- **Filter Modifications:**\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\n    - Example: `query_filters() + {attribute0 = 'value'}` adds a new filter condition.\n\n- **Process `grouping_set`**:\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\n  - **`query_groups()`**: Use the groupings defined in the main query.\n  - **Modify Groupings with `+` and `-`**:\n    - **Adding Groupings**: Combine main query groupings with additional columns.\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\n\n- **Process `filter_set`**:\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\n  - **`query_filters()`**: Use filters defined in the main query.\n  - **Modify Filters with `+` and `-`**:\n    - **Adding Filters**: Include additional filter conditions.\n    - **Excluding Filters**: Remove filters related to specific columns.\n\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\n\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\n\n**Key Concepts:**\n\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\n\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\n\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\n\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\n\n**Summary of Operators:**\n\n- **Groupings**:\n  - **`{ }`**: No groupings.\n  - **`query_groups()`**: Use main query groupings.\n  - **`+ {columns}`**: Add columns to groupings.\n  - **`- {columns}`**: Remove columns from groupings.\n\n- **Filters**:\n  - **`{ }`**: No filters.\n  - **`query_filters()`**: Use main query filters.\n  - **`+ {conditions}`**: Add filter conditions.\n  - **`- {columns}`**: Remove filters on columns.\n\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\",\"example\":[\"group_aggregate ( sum ( Productinfo Units ) , { Event Subevent } , { } )\",\"group_aggregate ( stddev ( Productinfo Units ) , { } , { } )\",\"group_aggregate ( variance ( Productinfo Units ), { Event Subevent , Event Id }, { day_of_week ( Eventtime ) = 'friday' } )\",\"group_aggregate ( average ( Cart Savings Totcpns ), query_groups ( ), query_filters ( ) )\",\"group_aggregate ( count ( Event Id ), query_groups ( ) + { Event Subevent }, query_filters ( ) - { Event Id } )\",\"group_aggregate ( unique count ( Event Id ) , query_groups ( ) + { Event Subevent }, query_filters ( ) + { Event Id != 'a1_value0' } )\"]}\n{\"function\":\"max\",\"description\":\"Returns the maximum value of a column.\",\"example\":[\"max ( Productinfo Units )\"]}\n{\"function\":\"min\",\"description\":\"Returns the minimum value of a column.\",\"example\":[\"min (Productinfo Units)\"]}\n{\"function\":\"moving_average\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\",\"example\":[\"moving_average (Productinfo Units, 2, 1, Event Subevent)\"]}\n{\"function\":\"moving_sum\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\u2026Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\",\"example\":[\"moving_sum ( Productinfo Units, 2, 1, Event Subevent )\"]}\n{\"function\":\"percentile\",\"description\":\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\",\"example\":[\"percentile ( Productinfo Units , 99 , 'asc' )\",\"percentile ( Productinfo Units , 95 , 'desc' )\"]}\n{\"function\":\"stddev\",\"description\":\"Returns the standard deviation of all values of a column.\",\"example\":[\"stddev ( Productinfo Units )\"]}\n{\"function\":\"sum\",\"description\":\"Returns the sum of all the values of a numeric column i.e. measure.\",\"example\":[\"sum ( Productinfo Units )\"]}\n{\"function\":\"unique count\",\"description\":\"Returns the number of unique values of a column.\",\"example\":[\"unique count ( Event Subevent )\"]}\n{\"function\":\"unique_count_if\",\"description\":\"Returns the number of unique values of a column provided it meets a criteria.\",\"example\":[\"unique_count_if ( (Productinfo Units > 10) , Event Subevent )\",\"unique_count_if ( (Productinfo Units > 10) , month ( Eventtime ) )\"]}\n{\"function\":\"variance\",\"description\":\"Returns the variance of all the values of a column.\",\"example\":[\"variance ( Productinfo Units )\"]}\n{\"function\":\"in|not in\",\"description\":\"Function that takes a column name and a list of values, used in 'formulas' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\",\"example\":[\"Event Subevent in { 'transaction_complete' , 'cart_add' }\",\"Event Subevent not in { 'transaction_complete' , 'cart_add' ,'checkout' }\"]}\n{\"function\":\"to_date\",\"description\":\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like 'march 2024' in formula language, since 'march 2024' is not a valid formula keyword but only valid in main tokens query.\",\"example\":[\"to_date ('2024-05-16', '%Y-%m-%d')\",\"Eventtime >= to_date ('03/01/2024', '%m/%d/%Y') and Eventtime <= to_date ('03/31/2024', '%m/%d/%Y')\"]}\n{\"function\":\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\",\"description\":\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords 'this year', 'this day', 'last year', 'last 2 quarters', so on in formula language.\",\"example\":[\"diff_days ( Eventtime, today ( ) ) = 0\",\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\",\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\"]}\n{\"function\":\"if-else\",\"description\":\"if-else statements similar to the ones in programming languages, only use them in 'formulas' field.\",\"example\":[\"if ( Productinfo Units > 100 ) then 'High' else 'Low'\",\"if ( Productinfo Units > 100 ) then 'High' else if ( Cart Savings Totcpns > 100 and Event Subevent = 'transaction_complete' ) then 'Medium' else 'Low'\"]}\n{\"function\":\"year|month|day\",\"description\":\"Functions below that are used to extract year, month, and day from a date column or even today() function.\",\"example\":[\"year ( Eventtime ) = 2024\",\"month ( Eventtime ) = 'June'\",\"day ( today ( ) ) = 2\"]}\n\n\nBelow are some examples of NL to phrase tokens translation, including usages of formulas. These examples are synthetic and are not derived from user feedback.\nThey are just for understanding of when & how to use the keywords and formula functions defined above:\n\n{\"query\":\"show distinct values for Event Id\",\"desc\":\"Returning just the output column acts as a group by <column> in SQL\",\"tokens\":\"[Event Id]\"}\n{\"query\":\"how many Event Subevent by Event Id were there last month\",\"tokens\":\"unique count [Event Subevent] by [Event Id] [Eventtime] = 'last month'\"}\n{\"query\":\"How many transaction_completes are web for id, show the Productinfo Utyp and Pagefilter Carousel, exclude count and unique-wines\",\"desc\":\"For the phrase in query: 'how many', apply count on the text column name, based on your understanding, & then apply filters mentioned in the question.\",\"tokens\":\"count [Event Subevent] [Event Subevent] = 'transaction_complete' [Page Platform] = 'web' [User Shopzc] = 'id' [Productinfo Utyp] [Pagefilter Carousel] [Productinfo Utyp] not contains 'count' [Pagefilter Carousel] not contains 'unique-wines'\"}\n{\"query\":\"I want to compare Productinfo Units for the last 7 days with the same days from last year\",\"desc\":\"Comparing Productinfo Units over the last 7 days with the exact same calendar days from last year. The `in` query filter `[Date] in ( [Date] [Date].'day of year' [Date].'last 7 days' )` is used to select the specific dates corresponding to the last 7 days of `this year`. By including `[Date].'day of year'`, we ensure that we are matching the exact same days of the year when comparing `this year` to `last year`. The `vs` keyword facilitates the comparison between these matching dates across the two years.\",\"tokens\":\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].'day of year' [Eventtime] = 'last 7 days' ) [Eventtime] = 'this year' vs [Eventtime] = 'last year' [Eventtime].'day of year'\"}\n{\"query\":\"I want to compare Productinfo Units for the last 7 days with the same weekdays in the same period from last year\",\"desc\":\"Comparing Productinfo Units over the last 7 days with the same weekdays from the same period last year. The `in` query filter `[Date] in ( [Date] [Date].'day of year' [Date].'last 7 days' )` selects dates from this year that have the same 'day of year' as the last 7 days, effectively capturing the same weekdays. By applying `[Date].'day of week'`, we align the data by weekdays. The `vs` keyword is used to compare these dates in `this year` with `last year`, enabling a direct comparison of the same weekdays across the two years.\",\"tokens\":\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].'day of year' [Eventtime] = 'last 7 days' ) [Eventtime] = 'this year' vs [Eventtime] = 'last year' [Eventtime].'day of week'\"}\n{\"query\":\"how many Event Subevents did id User Shopzc do last month in comparison to the same period last year\",\"tokens\":\"count [Event Subevent] [Eventtime] = 'last month' vs [Eventtime] = '13 months ago' [User Shopzc] = 'id' [User Shopzc]\"}\n{\"query\":\"what is total count Event Subevent in march 2024 as percentage of total count Event Id in march 2023\",\"tokens\":\"[percentage of Event Subevent in March 2024 over Event Id in March 2023]\",\"formulas\":[{\"name\":\"Total Count Event Subevent in March 2024\",\"expression\":\"count_if( ( Eventtime >= to_date ( '03/01/2024' , '%m/%d/%Y' ) and Eventtime <= to_date ( '03/31/2024' , '%m/%d/%Y' ) ), Event Subevent)\"},{\"name\":\"Total Count Event Id in March 2023\",\"expression\":\"count_if( ( Eventtime >= to_date ( '03/01/2023' , '%m/%d/%Y' ) and Eventtime <= to_date ( '03/31/2023' , '%m/%d/%Y' ) ), Event Id)\"},{\"name\":\"percentage of Event Subevent in March 2024 over Event Id in March 2023\",\"expression\":\"Total Count Event Subevent in March 2024 / Total Count Event Id in March 2023 * 100\"}]}\n{\"query\":\"show me the last month transaction_complete Productinfo Units for the Page Platform which sold the most cart_add last quarter\",\"desc\":\"First, use a top sub-query to find the Page Platform which sold the most cart_add last quarter. Then, use that attribute in the main query to find the last month transaction_complete Productinfo Units\",\"tokens\":\"[Eventtime] = 'last month' [Event Subevent] = 'transaction_complete' [Productinfo Units] [Page Platform] in ( [Page Platform] top 1 sort by [Productinfo Units] [Event Subevent] = 'cart_add' [Eventtime] = 'last quarter' )\"}\n{\"query\":\"I want to compare Productinfo Units for the last 30 days with the 90 days prior to that\",\"tokens\":\"[Productinfo Units] [Eventtime] = 'last 30 days' vs [Eventtime] before '30 days ago' [Eventtime] = 'last 120 days'\"}\n{\"query\":\"can you show the % increase for transaction_complete in the last 8 weeks\",\"tokens\":\"growth of sum [Productinfo Units] by [Eventtime] [Eventtime].weekly [Event Subevent] = 'transaction_complete' [Eventtime] = 'last 8 weeks'\"}\n{\"query\":\"I want to compare Productinfo Units for this year up to today with the same period last year\",\"desc\":\"Comparing year-to-date Productinfo Units up to today for `this year` with the same period from `last year`. The `in` query filter `[Date] in ( [Date] [Date].'day of year' [Date] before [Date].'today' )` selects all dates from the beginning of the year up to today in `this year`. By using `vs` with `[Date] = 'last year'`, we compare these dates with the matching period in `last year`. The phrase `same period last year` is thus calculated by filtering dates in `last year` that are in the same 'day of year' range as in `this year` up to today.\",\"tokens\":\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].'day of year' [Eventtime] before [Eventtime] = 'today' ) [Eventtime] = 'this year' vs [Eventtime] = 'last year' [Eventtime] = 'year to date'\"}\n{\"query\":\"show me the best performing Event Subevents last year in not in transaction_complete\",\"desc\":\"Since the user asked for the best performing attributes (plural form), return all sorted by measure column.\",\"tokens\":\"[Event Subevent] [Productinfo Units] sort by [Productinfo Units] descending [Eventtime] = 'last year' [Event Subevent] != 'transaction_complete'\"}\n{\"query\":\"show details for transaction_complete for web\",\"desc\":\"Show related queries based on some values require to not only apply filter values, but also display relevant attribute and measure columns, based on relevance of those columns with current query.\",\"tokens\":\"[Productinfo Units] [User Shopzc] [Productinfo Utyp] [Event Subevent] = 'transaction_complete' [Page Platform] = 'web'\"}\n{\"query\":\"I want to see Productinfo Units of Event Subevents, for Event Subevents that were Productinfo Units yesterday, where those same Event Subevents have not had any Productinfo Units today\",\"desc\":\"In this query, we aim to display the 'Productinfo Units' of 'Event Subevent's that had recorded 'Productinfo Units' **yesterday** but have **no 'Productinfo Units' today**. Essentially, we're identifying 'Event Subevent's where 'Productinfo Units' was greater than zero yesterday and zero today.\",\"tokens\":\"[Productinfo Units] [Event Subevent] [Eventtime] = 'today' vs [Eventtime] = 'yesterday' [Productinfo Units ( today )] = 0 [Productinfo Units ( yesterday )] > 0\",\"formulas\":[{\"name\":\"Productinfo Units ( today )\",\"expression\":\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_days ( Eventtime , today() ) = 0 } )\"},{\"name\":\"Productinfo Units ( yesterday )\",\"expression\":\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_days ( Eventtime , today() ) = -1 } )\"}]}\n{\"query\":\"show this year's transaction_complete, web Productinfo Units compare to last year along with percentage change\",\"desc\":\"In this query, we are comparing 'Productinfo Units' for 'Event Subevent' equal to ''transaction_complete'' and 'Page Platform' equal to ''web'' between this year and last year, calculating the percentage change between the two periods. The formulas provided use 'group_aggregate' to sum 'Productinfo Units' for both years while applying the necessary filters for the specified attributes and dates. Specifically, 'Productinfo Units this year' sums 'Productinfo Units' where 'Eventtime' is in the current year ('diff_years(Eventtime, today()) = 0'), and 'Productinfo Units last year' sums it where 'Eventtime' is in the previous year ('diff_years(Eventtime, today()) = -1'). The 'percentage change' is then calculated by subtracting last year's 'Productinfo Units' from this year's, dividing by last year's 'Productinfo Units', and multiplying by 100. These formulas match the query accurately, as they correctly compute the sums for each year and calculate the percentage change, fulfilling the query's requirements.\",\"tokens\":\"[Event Subevent] = 'transaction_complete' [Page Platform] = 'web' [Productinfo Units] [Eventtime] = 'this year' vs [Eventtime] = 'last year' [percentage change]\",\"formulas\":[{\"name\":\"Productinfo Units this year\",\"expression\":\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_years ( Eventtime, today ( ) ) = 0 } )\"},{\"name\":\"Productinfo Units last year\",\"expression\":\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_years ( Eventtime, today ( ) ) = -1 } )\"},{\"name\":\"percentage change\",\"expression\":\"( Productinfo Units this year - Productinfo Units last year ) / Productinfo Units last year * 100\"}]}\n'''\n\nBelow are exact value matches found from the current user query that can be used directly in final tokens result, if relevant:\n[{\"phrase\":\"[User Shopzc] = 'id'\"}, {\"phrase\":\"[Productinfo Utyp] = 'count'\"}, {\"phrase\":\"[User Loctck] = 'id'\"}, {\"phrase\":\"[Page Ss1] = 'id'\"}, {\"phrase\":\"[Page Ss1] = 'count'\"}, {\"phrase\":\"[Page Ss1] = 'session'\"}, {\"phrase\":\"[Page Ss1] = ''\"}, {\"phrase\":\"[Page Ss2] = 'id'\"}, {\"phrase\":\"[Page Ss3] = 'id'\"}, {\"phrase\":\"[Page Ss3] = 'show'\"}, {\"phrase\":\"[Pagefilter Filtyp] = 'count'\"}, {\"phrase\":\"[Modal Action] = ''\"}]"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "c70225376669964c", "flags": 1, "operationName": "generateQueries", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "8f273ea677df748b"}], "startTime": 1735684541537000, "duration": 2390661, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "d7765690ccd0d060", "flags": 1, "operationName": "generateTMLResponse", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "c70225376669964c"}], "startTime": 1735684541537000, "duration": 2390640, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "67498898690deacc", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "369f40b079f1dad4"}], "startTime": 1735684541546000, "duration": 16434, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "6c58ce40a480661e", "flags": 1, "operationName": "getEmbeddingScoresForExamples", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "369f40b079f1dad4"}], "startTime": 1735684541583000, "duration": 336774, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "3f5c03833a60ce32", "flags": 1, "operationName": "batchEncode", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "6c58ce40a480661e"}], "startTime": 1735684541583000, "duration": 335890, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "d4432ac7d4c60f52", "flags": 1, "operationName": "getTMLResponseInfoTranslation", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "1ed8291742bf1790"}], "startTime": 1735684541922000, "duration": 2004553, "tags": [{"key": "x.request.id", "type": "string", "value": "665a37a4-5ea6-49f2-b22b-e7e74892b4fd"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684543926000, "fields": [{"key": "event.log", "type": "string", "value": "LLM response = {\n  \"reasoning\": {\n    \"assumptions\": \"The query is asking for the count of unique session IDs for the date 'yesterday'.\"\n  },\n  \"tokens\": \"unique count [User Sessionid] [Eventtime] = 'yesterday'\",\n  \"formulas\": []\n}"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "346125e9f4cd6aa5", "flags": 1, "operationName": "LLMGatewayNLPService::getResponsesFromLLM", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "d4432ac7d4c60f52"}], "startTime": 1735684541923000, "duration": 2002823, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684541924000, "fields": [{"key": "event.log", "type": "string", "value": "Chat Completion prompt = \nSYSTEM:\nYour task is to generate the phrase tokens (a new simple keyword based language) for a natural language query.\nYou are given the following:\n 1. Definition & rules of the language\n 2. References for which functions and date keywords to use with examples.\n 3. Table Schema with column names, their data type, synonyms & sample values.\n 4. Examples of similar queries & their tokens from users feedback mappings.\n\nThe response should be well-formatted JSON as shown below:\n{\n  \"reasoning\": {\"assumptions\":\"\"},\n  \"tokens\": \"\",\n  \"formulas\":[{\"name\":\"\", \"expression\":\"\"}]\n}\nRemember the following types of columns:\n 1. measure: columns with numeric data type: int, double, long, float.\n 2. attribute: columns with categorical type: text, bool or date.\nWhat are 'output columns'?:\nColumn names that are only encapsulated in [] brackets without any filters applied. They are essentially columns used in SELECT clauses.\nIn phrase tokens, column names are present inside [] brackets and the filters applied on them are present in quotes.\nRules to generate the response:\n1. When generating formula names that are used in 'tokens' field, ensure the name is a relevant substring of the current user query.\n2. Formula expressions DO NOT contain column names in quotes [], it has a different syntax that you can infer from the users' examples and function references for formulas.\n3. If from the current query, you are not able to find any column in schema or formula name in users' examples, select a best effort column from the table schema. Do not return an empty answer & do not hallucinate column names.\n4. If in the final tokens there are only filters present, add a relevant 'output column' to the final tokens, because only filters present in 'tokens' output is not a valid answer. Choose the output column based on the context of the query. Example: {\"tokens\": \"[column1] = 'value1' [column2] = 'value2'\"} is not a valid answer, this:\n{\"tokens\": \"[column1] = 'value1' [column2] = 'value2' [column2]\"} is because it has an output column.\n5. Any occurrences of 'jan', 'feb' or related short forms of month names in natural language needs to be expanded to complete name of the month when used as date filters in phrase tokens. However, do not expand them if they are used as filter values in non-date columns.\n6. Only use keywords and formula functions that are present in the provided reference examples and users' usage/feedback history.\n7. If there is a filter on null value, always encapsulate it in quotes and curly brackets '{}' like '{null}'. Example: column_name != '{null}'\n8. count or unique count keywords (or formula functions) are only allowed on attributes i.e. text or date type columns, do not apply them on measure or numeric columns.\n9. In phrase tokens language, values applied on the same column like:\n[column] = 'value1' [column] = 'value2' behave as OR filters, whereas values applied on different columns like: [column1] = 'value1' [column2] = 'value2' behave as AND filters\n10. Comparison between numeric (i.e measure) columns can only be done in formulas. eg: 'measure > sum [measure]' in tokens field is INVALID, but 'measure > sum(measure)' is valid in formula expressions.\n11. When generating formulas, ensure that all dependent formulas are included in the formulas field. A dependent formula is defined as any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\n12. Avoid generating redundant formulas, example: {tokens:\"[Revenue]\",formulas: [{\"name\":\"total revenue\",\"expression\":\"sum(Revenue)\"}], where token: [Revenue] is same as formula name 'total revenue' as [Revenue] is internally evaluated with default aggregation of 'sum'.\n13. In formula expressions, date filters like 'last month' should be represented using formula functions that calculate the date range, such as `diff_months` or `to_date`.\n14. DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \"unique users\", expression: \"unique count ( user id )\",then you cannot apply sum ( unique users ) because it is already aggregated in formula language i.e. \"group_aggregate ( sum ( unique users ) , { } , { } )\" is incorrect because it will fail formula grammar check. The correct expression should be: \"group_aggregate ( unique users , { } , { } )\" i.e. without any aggregation function applied on aggregated formula/column.\n\n\nYou can use the following date keywords only in 'tokens' field (NOT VALID for formula expressions):\n{\"function\":\"last|next month\",\"example\":[\"[Eventtime] = 'last month'\"]}\n{\"function\":\"last|next n days\",\"example\":[\"[Eventtime] = 'last 7 days'\",\"[Eventtime] = 'next 7 days'\"]}\n{\"function\":\"last|next n months\",\"example\":[\"[Eventtime] = 'last 12 months'\"]}\n{\"function\":\"last|next n quarters\",\"example\":[\"[Eventtime] = 'last 12 quarters'\"]}\n{\"function\":\"last|next n weeks\",\"example\":[\"[Eventtime] = 'last 12 weeks'\"]}\n{\"function\":\"last|next n years\",\"example\":[\"[Eventtime] = 'last 12 years'\"]}\n{\"function\":\"last|next quarter\",\"example\":[\"[Eventtime] = 'last quarter'\"]}\n{\"function\":\"last|next week\",\"example\":[\"[Eventtime] = 'last week'\"]}\n{\"function\":\"last|next year\",\"example\":[\"[Eventtime] = 'last year'\"]}\n{\"function\":\"<month>\",\"example\":[\"[Eventtime] = 'march'\",\"[Eventtime] = 'april'\"]}\n{\"function\":\"<year>\",\"example\":[\"[Eventtime] = '2024'\"]}\n{\"function\":\"<weekday>\",\"example\":[\"[Eventtime] = 'Saturday'\",\"[Eventtime] = 'Monday'\"]}\n{\"function\":\"<month_year>\",\"example\":[\"[Eventtime] = 'march 2024'\",\"[Eventtime] = 'april 2024'\"]}\n{\"function\":\"this day|month|year|quarter|week\",\"example\":[\"[Eventtime] = 'this day'\",\"[Eventtime] = 'this quarter'\"]}\n{\"function\":\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\",\"example\":[\"[Eventtime] = 'last 2 quarters for each year'\",\"[Eventtime] = 'last 10 weeks for each month'\"]}\n{\"function\":\"yearly|quarterly|monthly|weekly|daily|hourly\",\"description\":\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\",\"example\":[\"[Eventtime].yearly\",\"[Eventtime].quarterly\",\"[Eventtime].monthly\",\"[Eventtime].weekly\",\"[Eventtime].daily\"]}\n{\"function\":\"between ... and ...\",\"description\":\"Selects records where the date is between the two specified dates. The dates must be in the format 'MM/dd/yyyy'. 'january 2024' type of dates are not supported, they have to be in a date format.\",\"example\":[\"[Eventtime] between '01/30/2012' and '01/30/2014'\"]}\n{\"function\":\"month over month|quarter over quarter|year over year|week over week\",\"description\":\"Only used with 'growth of' keyword. The 'year over year' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The 'month over month' keyword compares data between the same time period from different months.\",\"example\":[\"growth of [Productinfo Units] by [Eventtime] [Eventtime].daily month over month\",\"growth of [Productinfo Units] by [Eventtime] [Eventtime].monthly year over year\",\"growth of [Productinfo Units] by [Eventtime] [Eventtime].monthly quarter over quarter\"]}\n{\"function\":\"day|week of month|quarter|year\",\"description\":\"Returns the day|week number of the month quarter or year for the date value. Example, 'day of month' for 13th Jan would be 13. 'day of year' for 13th Jan would be 13. 'week of month' for 13th Jan would be 2.\",\"example\":[\"[Eventtime].'day of month'\",\"[Eventtime].'month of year'\",\"[Eventtime].'week of year'\"]}\n{\"function\":\"n months|weeks|days|quarters|years ago\",\"example\":[\"[Eventtime] = '10 months ago'\",\"[Eventtime] = '5 years ago'\"]}\n{\"function\":\"detailed\",\"description\":\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\",\"example\":[\"[Eventtime] detailed\"]}\nFor reference today's date in MM/dd/yyyy format: 12/31/2024\n\n\nUSER:\nCREATE TABLE GCP_OneTag_Prod (\nEventtime date /* Values: 'yesterday' Current year is 2024.*/,\nEvent Subevent text /* Values: 'cart_add', 'checkout', 'transaction_complete'*/,\nEvent Id text,\nPage Platform text /* Values: 'app', 'web'*/,\nUser Shopzc text /* Values: '+', '0', '1', 'id'*/,\nProductinfo Utyp text /* Values: 'c', 'count', 'g', 'l'*/,\nPagefilter Carousel text /* Values: '-', '--', 'count-on-clorox', 'p&g', 'shop|unique-wines', 'unique-wines', 'unique-wines-drawer'*/,\nUser Loctck text /* Values: '+', '0', '1', 'id'*/,\nPage Ss1 text /* Values: '', ')', '+', 'count', 'count-on-clorox', 'for=', 'id', 'session', 'unique-recipes'*/,\nPage Ss2 text /* Values: '*', '-', '0', 'count-on-clorox', 'id', 'show-low'*/,\nPage Ss3 text /* Values: '*', '-', '0', 'id', 'show', 'show-code'*/,\nIngestion Time date /* Values: 'yesterday'*/,\nPagefilter Filtyp text /* Values: 'age', 'bone', 'count', 'cut'*/,\nProcessed Time date /* Values: 'yesterday'*/,\nLink Name text /* Values: 'fresh', 'frozen', 'pantry', 'show more'*/,\nError Id text,\nRewards Id text,\nCoupon Id text,\nCart Transaction Dlvwin text /* Values: '1-hours', '2-hours', '4-hours'*/,\nCart Savings Ccsav text /* Values: '0', '1', '2'*/,\nProductinfo Units int,\nCart Savings Ttlsav text /* Values: '0', '1', '2'*/,\nPagefilter Rtyp text /* Values: '1', '2', '3'*/,\nUser Type text /* Values: 'c', 'g'*/,\nSearch Orderby text /* Values: 'inventory(1,price)', 'inventory(2,price)', 'inventory(4,price)'*/,\nSearch Impressions Bia boolean,\nUser Odrsts text /* Values: '0', '1', '2'*/,\nProductinfo Aisle text /* Values: 'beef', 'gum', 'tea'*/,\nProductinfo Cpnapld text /* Values: '0', '1', '2'*/,\nGlobal Attrtoken text,\nCart Transaction Subttlwinecart Sellerid text /* Values: '22222222'*/,\nProductinfo Mto text /* Values: 'false', 'true'*/,\nCart Savings Empsav text /* Values: '0', '1', '2'*/,\nCart Savings Totcpns int,\nSearch Impressions Upc text,\nCoupon Savings text /* Values: '1.7', '2.6', '4.5'*/,\nUser Cookiepref text /* Values: ',,', ',c0001,', 'c0001'*/,\nCart Cartinfo Ismfc text /* Values: 'false'*/,\nProductinfo Pfmdtl text,\nProductinfo Aid text /* Values: '1_', '1_1', '1_2'*/,\nModal Action text /* Values: '', '1', 'close'*/,\nPagefilter Subsfunnel text /* Values: 'checkout-annual', 'checkout-monthly', 'plan-cancelled'*/,\nPage Rurl text,\nSearch Tst text,\nUser Ccn text,\nSearch Impressions Mp text /* Values: 'n', 'y'*/,\nSearch Rescnt text,\nPagefilter Placement text /* Values: 'r00', 'r01', 'r02'*/,\nCart Transaction Dlvtime text,\nUser Custsts text /* Values: 'first', 'returning'*/,\nSearch Impressions Sellerid text,\nProductinfo Bp text /* Values: '0', '1', '2'*/,\nSearch Impressions Pid text,\nCart Transaction Subttl double,\nUser Picloc text /* Values: 'delivery', 'dug'*/,\nCart Transaction Ordid text,\nCart Transaction Subttlwinecart Subtotal double,\nCart Transaction Ordver text,\nPagefilter Filsel text,\nUser Os text /* Values: 'ios 14.0', 'ios 14.1', 'ios 14.2'*/,\nUser Subdate text,\nCart Cartinfo Acrt text,\nSearch Selposition double,\nUser Smsoptin text /* Values: 'd', 'true'*/,\nUser Ostype text /* Values: 'arm', 'tb', 'u'*/,\nProductinfo Iv text /* Values: '0', '1', '2'*/,\nUser Emailoptin text /* Values: 'd', 'true'*/,\nCart Transaction Taxes text,\nCoupon Name text /* Values: '7up', 'c4'*/,\nCart Savings Catinvalidnone text /* Values: '0'*/,\nCart Transaction Shipfee text /* Values: '0', '2', '4'*/,\nCart Savings Cpnsclip int,\nSearch Impressions Index int,\nPagefilter Topnav text,\nUser Cameraallowed text /* Values: 'camera-allowed', 'camera-blocked', 'camera-notdetermined'*/,\nPage Purl text,\nCart Transaction Paymthd text /* Values: 'cc', 'cc|', 'coa'*/,\nCart Cartinfo Totunits text /* Values: '0', '1', '2'*/,\nCart Transaction Dlvst text /* Values: 'flash', 'fp:', 'onehr'*/,\nUser Sessionid text,\nUser Clientua text,\nSearch Impressions Sponsored boolean,\nUser Ssid text /* Values: '0', '1', '2'*/,\nProductinfo Pname text,\nCart Savings Catinvalidid text /* Values: '0'*/,\nSearch Type text /* Values: 'internalsearch:standard', 'search', 'wineshopsearch:standard'*/,\nUser Utype text /* Values: 'c', 'g'*/,\nPagefilter Premslots text /* Values: 'false', 'null', 'true'*/,\nSearch Filter text,\nPage Tp text /* Values: 'yext'*/,\nUser Dlvpre text /* Values: '%27', 'dug', 'j4u'*/,\nProductinfo Each text /* Values: '0', '1', '2'*/,\nUser Datalc boolean,\nProductinfo Iqn text /* Values: '0', '1', '2'*/,\nUser Dlvcomb text /* Values: 'attended', 'null', 'unattended'*/,\nUser Custid text,\nUser Hhid text,\nModal Msg text,\nProductinfo Cpnclpd text /* Values: '0', '1', '2'*/,\nPage Sid text)\n\n'''\n\nRelevant keywords for phrase tokens are given below that can be used if needed (NOT relevant for formula expressions, as they have different functions), do not use any other keywords:\n{\"function\":\"top|bottom n\",\"description\":\"Generates the top (or bottom) n items from a sorted result. Substitute 'n' with number specified by the user in query. When 'sort by' is used with 'top', it automatically implies sorting is done in descending order. If 'bottom' is used with 'sort by', then it is in ascending order by default.\",\"example\":[\"top 10 [Event Subevent] sort by [Productinfo Units]\",\"bottom 25 [Event Subevent] sort by count [Event Subevent]\"]}\n{\"function\":\"sort by\",\"example\":[\"sort by [Productinfo Units] ascending\",\"sort by count [Event Subevent] descending\"]}\n{\"function\":\"by\",\"description\":\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\",\"example\":[\"by [Productinfo Units]\"]}\n{\"function\":\"begins|ends with\",\"description\":\"Returns all column values that begins or ends with a value defined in quotes.\",\"example\":[\"[Event Subevent] begins with 'transaction_complete'\",\"[Event Subevent] ends with 'transaction_complete'\"]}\n{\"function\":\"contains|not contains\",\"description\":\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\",\"example\":[\"[Event Subevent] contains 'transaction_complete'\",\"[Event Subevent] contains 'transaction_complete' 'cart_add'\",\"[Event Subevent] not contains 'transaction_complete'\"]}\n{\"function\":\"vs\",\"description\":\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = 'east' vs [region] = 'west'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = 'value1' vs [attribute] = 'value2'\",\"example\":[\"[Productinfo Units] [Event Subevent] = 'transaction_complete' vs [Event Subevent] = 'cart_add'\",\"[Productinfo Units] [Eventtime] = 'this year' vs [Eventtime] = 'last year'\",\"[Cart Savings Totcpns] [Event Id] = 'a1_value0' vs [Event Id] = 'a1_value1' vs [Event Id] = 'a1_value2'\"]}\n{\"function\":\"growth of\",\"description\":\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\",\"example\":[\"growth of [Productinfo Units] by [Eventtime] [Eventtime].'daily'\"]}\n{\"function\":\"unique count\",\"description\":\"Similar to SQL's SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"unique count [Event Subevent]\"]}\n{\"function\":\"count\",\"description\":\"Similar to SQL's SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"count [Event Subevent]\"]}\n{\"function\":\"in|not in\",\"description\":\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user's query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using 'in' or 'not in' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn't support use of 'vs' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where 'subsearch' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using 'not in'.\",\"example\":[\"[Event Subevent] in ([Event Subevent] [Event Subevent] begins with 'transaction_complete' [Productinfo Units] > 100 top 10 [Event Subevent] sort by [Cart Savings Totcpns] descending)\",\"[Event Subevent] not in ([Event Subevent] [Event Subevent] begins with 'transaction_complete' [Productinfo Units] > 100 top 10 [Event Subevent] sort by [Cart Savings Totcpns] descending)\"]}\n{\"function\":\"sum|average|min|max\",\"description\":\"Similar to SQL's SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\",\"example\":[\"sum [Productinfo Units]\",\"average [Productinfo Units]\"]}\n{\"function\":\"for each\",\"description\":\"Used on attributes i.e. columns with type text.\",\"example\":[\"for each [Event Subevent]\"]}\n\nYou can use the following function references with examples that are valid only for formula expressions. Use only relevant functions, if required:\n{\"function\":\"average\",\"description\":\"Returns the average of all the values of a column.\",\"example\":[\"average ( Productinfo Units )\"]}\n{\"function\":\"count\",\"description\":\"Returns the number of rows in the table containing the column.\",\"example\":[\"count ( Event Subevent )\"]}\n{\"function\":\"count_if\",\"description\":\"Returns the number of rows in the table containing the column that meet a given criteria.\",\"example\":[\"count_if ( (Productinfo Units > 10), Event Subevent )\",\"count_if ( (Productinfo Units > 10) , month ( Eventtime ) )\"]}\n{\"function\":\"cumulative_average\",\"description\":\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_average (Productinfo Units, Event Subevent, Event Id)\"]}\n{\"function\":\"cumulative_sum\",\"description\":\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_sum (Productinfo Units, Event Subevent)\"]}\n{\"function\":\"group_aggregate\",\"description\":\"**Summary of the `group_aggregate` Function**\n\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\n\n**Function Syntax:**\n```\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\n```\n\n**Parameters:**\n\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\n   - `sum(measure0)`\n   - `count(attribute0)`\n   - `unique count (attribute0)`\n   - `average(measure1)`\n   - `avg(measure1)`\n\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\n   - **`query_groups()`**: Includes all groupings from the main query.\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\n\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\n   - **`query_filters()`**: Includes all filters from the main query.\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\n\n**Usage Notes:**\n\n- **Grouping Modifications:**\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\n\n- **Filter Modifications:**\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\n    - Example: `query_filters() + {attribute0 = 'value'}` adds a new filter condition.\n\n- **Process `grouping_set`**:\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\n  - **`query_groups()`**: Use the groupings defined in the main query.\n  - **Modify Groupings with `+` and `-`**:\n    - **Adding Groupings**: Combine main query groupings with additional columns.\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\n\n- **Process `filter_set`**:\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\n  - **`query_filters()`**: Use filters defined in the main query.\n  - **Modify Filters with `+` and `-`**:\n    - **Adding Filters**: Include additional filter conditions.\n    - **Excluding Filters**: Remove filters related to specific columns.\n\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\n\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\n\n**Key Concepts:**\n\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\n\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\n\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\n\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\n\n**Summary of Operators:**\n\n- **Groupings**:\n  - **`{ }`**: No groupings.\n  - **`query_groups()`**: Use main query groupings.\n  - **`+ {columns}`**: Add columns to groupings.\n  - **`- {columns}`**: Remove columns from groupings.\n\n- **Filters**:\n  - **`{ }`**: No filters.\n  - **`query_filters()`**: Use main query filters.\n  - **`+ {conditions}`**: Add filter conditions.\n  - **`- {columns}`**: Remove filters on columns.\n\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\",\"example\":[\"group_aggregate ( sum ( Productinfo Units ) , { Event Subevent } , { } )\",\"group_aggregate ( stddev ( Productinfo Units ) , { } , { } )\",\"group_aggregate ( variance ( Productinfo Units ), { Event Subevent , Event Id }, { day_of_week ( Eventtime ) = 'friday' } )\",\"group_aggregate ( average ( Cart Savings Totcpns ), query_groups ( ), query_filters ( ) )\",\"group_aggregate ( count ( Event Id ), query_groups ( ) + { Event Subevent }, query_filters ( ) - { Event Id } )\",\"group_aggregate ( unique count ( Event Id ) , query_groups ( ) + { Event Subevent }, query_filters ( ) + { Event Id != 'a1_value0' } )\"]}\n{\"function\":\"max\",\"description\":\"Returns the maximum value of a column.\",\"example\":[\"max ( Productinfo Units )\"]}\n{\"function\":\"min\",\"description\":\"Returns the minimum value of a column.\",\"example\":[\"min (Productinfo Units)\"]}\n{\"function\":\"moving_average\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\",\"example\":[\"moving_average (Productinfo Units, 2, 1, Event Subevent)\"]}\n{\"function\":\"moving_sum\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\u2026Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\",\"example\":[\"moving_sum ( Productinfo Units, 2, 1, Event Subevent )\"]}\n{\"function\":\"percentile\",\"description\":\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\",\"example\":[\"percentile ( Productinfo Units , 99 , 'asc' )\",\"percentile ( Productinfo Units , 95 , 'desc' )\"]}\n{\"function\":\"stddev\",\"description\":\"Returns the standard deviation of all values of a column.\",\"example\":[\"stddev ( Productinfo Units )\"]}\n{\"function\":\"sum\",\"description\":\"Returns the sum of all the values of a numeric column i.e. measure.\",\"example\":[\"sum ( Productinfo Units )\"]}\n{\"function\":\"unique count\",\"description\":\"Returns the number of unique values of a column.\",\"example\":[\"unique count ( Event Subevent )\"]}\n{\"function\":\"unique_count_if\",\"description\":\"Returns the number of unique values of a column provided it meets a criteria.\",\"example\":[\"unique_count_if ( (Productinfo Units > 10) , Event Subevent )\",\"unique_count_if ( (Productinfo Units > 10) , month ( Eventtime ) )\"]}\n{\"function\":\"variance\",\"description\":\"Returns the variance of all the values of a column.\",\"example\":[\"variance ( Productinfo Units )\"]}\n{\"function\":\"in|not in\",\"description\":\"Function that takes a column name and a list of values, used in 'formulas' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\",\"example\":[\"Event Subevent in { 'transaction_complete' , 'cart_add' }\",\"Event Subevent not in { 'transaction_complete' , 'cart_add' ,'checkout' }\"]}\n{\"function\":\"to_date\",\"description\":\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like 'march 2024' in formula language, since 'march 2024' is not a valid formula keyword but only valid in main tokens query.\",\"example\":[\"to_date ('2024-05-16', '%Y-%m-%d')\",\"Eventtime >= to_date ('03/01/2024', '%m/%d/%Y') and Eventtime <= to_date ('03/31/2024', '%m/%d/%Y')\"]}\n{\"function\":\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\",\"description\":\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords 'this year', 'this day', 'last year', 'last 2 quarters', so on in formula language.\",\"example\":[\"diff_days ( Eventtime, today ( ) ) = 0\",\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\",\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\"]}\n{\"function\":\"if-else\",\"description\":\"if-else statements similar to the ones in programming languages, only use them in 'formulas' field.\",\"example\":[\"if ( Productinfo Units > 100 ) then 'High' else 'Low'\",\"if ( Productinfo Units > 100 ) then 'High' else if ( Cart Savings Totcpns > 100 and Event Subevent = 'transaction_complete' ) then 'Medium' else 'Low'\"]}\n{\"function\":\"year|month|day\",\"description\":\"Functions below that are used to extract year, month, and day from a date column or even today() function.\",\"example\":[\"year ( Eventtime ) = 2024\",\"month ( Eventtime ) = 'June'\",\"day ( today ( ) ) = 2\"]}\n\n\nBelow are some examples of NL to phrase tokens translation, including usages of formulas. These examples are synthetic and are not derived from user feedback.\nThey are just for understanding of when & how to use the keywords and formula functions defined above:\n\n{\"query\":\"show distinct values for Event Id\",\"desc\":\"Returning just the output column acts as a group by <column> in SQL\",\"tokens\":\"[Event Id]\"}\n{\"query\":\"how many Event Subevent by Event Id were there last month\",\"tokens\":\"unique count [Event Subevent] by [Event Id] [Eventtime] = 'last month'\"}\n{\"query\":\"How many transaction_completes are web for id, show the Productinfo Utyp and Pagefilter Carousel, exclude count and unique-wines\",\"desc\":\"For the phrase in query: 'how many', apply count on the text column name, based on your understanding, & then apply filters mentioned in the question.\",\"tokens\":\"count [Event Subevent] [Event Subevent] = 'transaction_complete' [Page Platform] = 'web' [User Shopzc] = 'id' [Productinfo Utyp] [Pagefilter Carousel] [Productinfo Utyp] not contains 'count' [Pagefilter Carousel] not contains 'unique-wines'\"}\n{\"query\":\"I want to compare Productinfo Units for the last 7 days with the same days from last year\",\"desc\":\"Comparing Productinfo Units over the last 7 days with the exact same calendar days from last year. The `in` query filter `[Date] in ( [Date] [Date].'day of year' [Date].'last 7 days' )` is used to select the specific dates corresponding to the last 7 days of `this year`. By including `[Date].'day of year'`, we ensure that we are matching the exact same days of the year when comparing `this year` to `last year`. The `vs` keyword facilitates the comparison between these matching dates across the two years.\",\"tokens\":\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].'day of year' [Eventtime] = 'last 7 days' ) [Eventtime] = 'this year' vs [Eventtime] = 'last year' [Eventtime].'day of year'\"}\n{\"query\":\"I want to compare Productinfo Units for the last 7 days with the same weekdays in the same period from last year\",\"desc\":\"Comparing Productinfo Units over the last 7 days with the same weekdays from the same period last year. The `in` query filter `[Date] in ( [Date] [Date].'day of year' [Date].'last 7 days' )` selects dates from this year that have the same 'day of year' as the last 7 days, effectively capturing the same weekdays. By applying `[Date].'day of week'`, we align the data by weekdays. The `vs` keyword is used to compare these dates in `this year` with `last year`, enabling a direct comparison of the same weekdays across the two years.\",\"tokens\":\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].'day of year' [Eventtime] = 'last 7 days' ) [Eventtime] = 'this year' vs [Eventtime] = 'last year' [Eventtime].'day of week'\"}\n{\"query\":\"how many Event Subevents did id User Shopzc do last month in comparison to the same period last year\",\"tokens\":\"count [Event Subevent] [Eventtime] = 'last month' vs [Eventtime] = '13 months ago' [User Shopzc] = 'id' [User Shopzc]\"}\n{\"query\":\"what is total count Event Subevent in march 2024 as percentage of total count Event Id in march 2023\",\"tokens\":\"[percentage of Event Subevent in March 2024 over Event Id in March 2023]\",\"formulas\":[{\"name\":\"Total Count Event Subevent in March 2024\",\"expression\":\"count_if( ( Eventtime >= to_date ( '03/01/2024' , '%m/%d/%Y' ) and Eventtime <= to_date ( '03/31/2024' , '%m/%d/%Y' ) ), Event Subevent)\"},{\"name\":\"Total Count Event Id in March 2023\",\"expression\":\"count_if( ( Eventtime >= to_date ( '03/01/2023' , '%m/%d/%Y' ) and Eventtime <= to_date ( '03/31/2023' , '%m/%d/%Y' ) ), Event Id)\"},{\"name\":\"percentage of Event Subevent in March 2024 over Event Id in March 2023\",\"expression\":\"Total Count Event Subevent in March 2024 / Total Count Event Id in March 2023 * 100\"}]}\n{\"query\":\"show me the last month transaction_complete Productinfo Units for the Page Platform which sold the most cart_add last quarter\",\"desc\":\"First, use a top sub-query to find the Page Platform which sold the most cart_add last quarter. Then, use that attribute in the main query to find the last month transaction_complete Productinfo Units\",\"tokens\":\"[Eventtime] = 'last month' [Event Subevent] = 'transaction_complete' [Productinfo Units] [Page Platform] in ( [Page Platform] top 1 sort by [Productinfo Units] [Event Subevent] = 'cart_add' [Eventtime] = 'last quarter' )\"}\n{\"query\":\"I want to compare Productinfo Units for the last 30 days with the 90 days prior to that\",\"tokens\":\"[Productinfo Units] [Eventtime] = 'last 30 days' vs [Eventtime] before '30 days ago' [Eventtime] = 'last 120 days'\"}\n{\"query\":\"can you show the % increase for transaction_complete in the last 8 weeks\",\"tokens\":\"growth of sum [Productinfo Units] by [Eventtime] [Eventtime].weekly [Event Subevent] = 'transaction_complete' [Eventtime] = 'last 8 weeks'\"}\n{\"query\":\"I want to compare Productinfo Units for this year up to today with the same period last year\",\"desc\":\"Comparing year-to-date Productinfo Units up to today for `this year` with the same period from `last year`. The `in` query filter `[Date] in ( [Date] [Date].'day of year' [Date] before [Date].'today' )` selects all dates from the beginning of the year up to today in `this year`. By using `vs` with `[Date] = 'last year'`, we compare these dates with the matching period in `last year`. The phrase `same period last year` is thus calculated by filtering dates in `last year` that are in the same 'day of year' range as in `this year` up to today.\",\"tokens\":\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].'day of year' [Eventtime] before [Eventtime] = 'today' ) [Eventtime] = 'this year' vs [Eventtime] = 'last year' [Eventtime] = 'year to date'\"}\n{\"query\":\"show me the best performing Event Subevents last year in not in transaction_complete\",\"desc\":\"Since the user asked for the best performing attributes (plural form), return all sorted by measure column.\",\"tokens\":\"[Event Subevent] [Productinfo Units] sort by [Productinfo Units] descending [Eventtime] = 'last year' [Event Subevent] != 'transaction_complete'\"}\n{\"query\":\"show details for transaction_complete for web\",\"desc\":\"Show related queries based on some values require to not only apply filter values, but also display relevant attribute and measure columns, based on relevance of those columns with current query.\",\"tokens\":\"[Productinfo Units] [User Shopzc] [Productinfo Utyp] [Event Subevent] = 'transaction_complete' [Page Platform] = 'web'\"}\n{\"query\":\"I want to see Productinfo Units of Event Subevents, for Event Subevents that were Productinfo Units yesterday, where those same Event Subevents have not had any Productinfo Units today\",\"desc\":\"In this query, we aim to display the 'Productinfo Units' of 'Event Subevent's that had recorded 'Productinfo Units' **yesterday** but have **no 'Productinfo Units' today**. Essentially, we're identifying 'Event Subevent's where 'Productinfo Units' was greater than zero yesterday and zero today.\",\"tokens\":\"[Productinfo Units] [Event Subevent] [Eventtime] = 'today' vs [Eventtime] = 'yesterday' [Productinfo Units ( today )] = 0 [Productinfo Units ( yesterday )] > 0\",\"formulas\":[{\"name\":\"Productinfo Units ( today )\",\"expression\":\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_days ( Eventtime , today() ) = 0 } )\"},{\"name\":\"Productinfo Units ( yesterday )\",\"expression\":\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_days ( Eventtime , today() ) = -1 } )\"}]}\n{\"query\":\"show this year's transaction_complete, web Productinfo Units compare to last year along with percentage change\",\"desc\":\"In this query, we are comparing 'Productinfo Units' for 'Event Subevent' equal to ''transaction_complete'' and 'Page Platform' equal to ''web'' between this year and last year, calculating the percentage change between the two periods. The formulas provided use 'group_aggregate' to sum 'Productinfo Units' for both years while applying the necessary filters for the specified attributes and dates. Specifically, 'Productinfo Units this year' sums 'Productinfo Units' where 'Eventtime' is in the current year ('diff_years(Eventtime, today()) = 0'), and 'Productinfo Units last year' sums it where 'Eventtime' is in the previous year ('diff_years(Eventtime, today()) = -1'). The 'percentage change' is then calculated by subtracting last year's 'Productinfo Units' from this year's, dividing by last year's 'Productinfo Units', and multiplying by 100. These formulas match the query accurately, as they correctly compute the sums for each year and calculate the percentage change, fulfilling the query's requirements.\",\"tokens\":\"[Event Subevent] = 'transaction_complete' [Page Platform] = 'web' [Productinfo Units] [Eventtime] = 'this year' vs [Eventtime] = 'last year' [percentage change]\",\"formulas\":[{\"name\":\"Productinfo Units this year\",\"expression\":\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_years ( Eventtime, today ( ) ) = 0 } )\"},{\"name\":\"Productinfo Units last year\",\"expression\":\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_years ( Eventtime, today ( ) ) = -1 } )\"},{\"name\":\"percentage change\",\"expression\":\"( Productinfo Units this year - Productinfo Units last year ) / Productinfo Units last year * 100\"}]}\n'''\n\nBelow are exact value matches found from the current user query that can be used directly in final tokens result, if relevant:\n[{\"phrase\":\"[User Shopzc] = 'id'\"}, {\"phrase\":\"[Productinfo Utyp] = 'count'\"}, {\"phrase\":\"[User Loctck] = 'id'\"}, {\"phrase\":\"[Page Ss1] = 'id'\"}, {\"phrase\":\"[Page Ss1] = 'count'\"}, {\"phrase\":\"[Page Ss1] = 'session'\"}, {\"phrase\":\"[Page Ss1] = ''\"}, {\"phrase\":\"[Page Ss2] = 'id'\"}, {\"phrase\":\"[Page Ss3] = 'id'\"}, {\"phrase\":\"[Page Ss3] = 'show'\"}, {\"phrase\":\"[Pagefilter Filtyp] = 'count'\"}, {\"phrase\":\"[Modal Action] = ''\"}]\nIMPORTANT: Column names below separated by comma (,) co-occur with each other and form a use-case/group. When trying to select column names relevant for current user query, prefer the co-occurring/neighboring columns for answering the question. Columns from across the groups are not generally used together.\n\nGroup 0 Event Id,Event Subevent,Eventtime,Page Platform\n\n\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\u2014never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query's intent.\n**Include Formula Names in Tokens for Display**: - If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI.\n\nThe response should be well-formatted JSON as shown below:\n{ \"reasoning\": {\"assumptions\":\"\"}, \"tokens\": \"\", \"formulas\":[{\"name\":\"\", \"expression\":\"\"}]}\nEnsure the assumptions is short & concise.\nQuestion: show me the count of unique session id for yesterday\n"}]}, {"timestamp": 1735684541925000, "fields": [{"key": "event.log", "type": "string", "value": "Completion Request = headers {\n  tenant_id: \"17510819-5784-11ee-8f97-3da98\"\n  client_id: \"eureka-searcher\"\n  request_id: \"665a37a4-5ea6-49f2-b22b-e7e74892b4fd\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"Your task is to generate the phrase tokens (a new simple keyword based language) for a natural language query.\\nYou are given the following:\\n 1. Definition & rules of the language\\n 2. References for which functions and date keywords to use with examples.\\n 3. Table Schema with column names, their data type, synonyms & sample values.\\n 4. Examples of similar queries & their tokens from users feedback mappings.\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"reasoning\\\": {\\\"assumptions\\\":\\\"\\\"},\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\":[{\\\"name\\\":\\\"\\\", \\\"expression\\\":\\\"\\\"}]\\n}\\nRemember the following types of columns:\\n 1. measure: columns with numeric data type: int, double, long, float.\\n 2. attribute: columns with categorical type: text, bool or date.\\nWhat are \\'output columns\\'?:\\nColumn names that are only encapsulated in [] brackets without any filters applied. They are essentially columns used in SELECT clauses.\\nIn phrase tokens, column names are present inside [] brackets and the filters applied on them are present in quotes.\\nRules to generate the response:\\n1. When generating formula names that are used in \\'tokens\\' field, ensure the name is a relevant substring of the current user query.\\n2. Formula expressions DO NOT contain column names in quotes [], it has a different syntax that you can infer from the users\\' examples and function references for formulas.\\n3. If from the current query, you are not able to find any column in schema or formula name in users\\' examples, select a best effort column from the table schema. Do not return an empty answer & do not hallucinate column names.\\n4. If in the final tokens there are only filters present, add a relevant \\'output column\\' to the final tokens, because only filters present in \\'tokens\\' output is not a valid answer. Choose the output column based on the context of the query. Example: {\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"} is not a valid answer, this:\\n{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column2]\\\"} is because it has an output column.\\n5. Any occurrences of \\'jan\\', \\'feb\\' or related short forms of month names in natural language needs to be expanded to complete name of the month when used as date filters in phrase tokens. However, do not expand them if they are used as filter values in non-date columns.\\n6. Only use keywords and formula functions that are present in the provided reference examples and users\\' usage/feedback history.\\n7. If there is a filter on null value, always encapsulate it in quotes and curly brackets \\'{}\\' like \\'{null}\\'. Example: column_name != \\'{null}\\'\\n8. count or unique count keywords (or formula functions) are only allowed on attributes i.e. text or date type columns, do not apply them on measure or numeric columns.\\n9. In phrase tokens language, values applied on the same column like:\\n[column] = \\'value1\\' [column] = \\'value2\\' behave as OR filters, whereas values applied on different columns like: [column1] = \\'value1\\' [column2] = \\'value2\\' behave as AND filters\\n10. Comparison between numeric (i.e measure) columns can only be done in formulas. eg: \\'measure > sum [measure]\\' in tokens field is INVALID, but \\'measure > sum(measure)\\' is valid in formula expressions.\\n11. When generating formulas, ensure that all dependent formulas are included in the formulas field. A dependent formula is defined as any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n12. Avoid generating redundant formulas, example: {tokens:\\\"[Revenue]\\\",formulas: [{\\\"name\\\":\\\"total revenue\\\",\\\"expression\\\":\\\"sum(Revenue)\\\"}], where token: [Revenue] is same as formula name \\'total revenue\\' as [Revenue] is internally evaluated with default aggregation of \\'sum\\'.\\n13. In formula expressions, date filters like \\'last month\\' should be represented using formula functions that calculate the date range, such as `diff_months` or `to_date`.\\n14. DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\",then you cannot apply sum ( unique users ) because it is already aggregated in formula language i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n\\nYou can use the following date keywords only in \\'tokens\\' field (NOT VALID for formula expressions):\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 7 days\\'\\\",\\\"[Eventtime] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Eventtime] = \\'march\\'\\\",\\\"[Eventtime] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Eventtime] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Eventtime] = \\'Saturday\\'\\\",\\\"[Eventtime] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Eventtime] = \\'march 2024\\'\\\",\\\"[Eventtime] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Eventtime] = \\'this day\\'\\\",\\\"[Eventtime] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 2 quarters for each year\\'\\\",\\\"[Eventtime] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Eventtime].yearly\\\",\\\"[Eventtime].quarterly\\\",\\\"[Eventtime].monthly\\\",\\\"[Eventtime].weekly\\\",\\\"[Eventtime].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Eventtime] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Productinfo Units] by [Eventtime] [Eventtime].daily month over month\\\",\\\"growth of [Productinfo Units] by [Eventtime] [Eventtime].monthly year over year\\\",\\\"growth of [Productinfo Units] by [Eventtime] [Eventtime].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Eventtime].\\'day of month\\'\\\",\\\"[Eventtime].\\'month of year\\'\\\",\\\"[Eventtime].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Eventtime] = \\'10 months ago\\'\\\",\\\"[Eventtime] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Eventtime] detailed\\\"]}\\nFor reference today\\'s date in MM/dd/yyyy format: 12/31/2024\\n\"\n}\nchat_messages {\n  role: USER\n  content: \"CREATE TABLE GCP_OneTag_Prod (\\nEventtime date /* Values: \\'yesterday\\' Current year is 2024.*/,\\nEvent Subevent text /* Values: \\'cart_add\\', \\'checkout\\', \\'transaction_complete\\'*/,\\nEvent Id text,\\nPage Platform text /* Values: \\'app\\', \\'web\\'*/,\\nUser Shopzc text /* Values: \\'+\\', \\'0\\', \\'1\\', \\'id\\'*/,\\nProductinfo Utyp text /* Values: \\'c\\', \\'count\\', \\'g\\', \\'l\\'*/,\\nPagefilter Carousel text /* Values: \\'-\\', \\'--\\', \\'count-on-clorox\\', \\'p&g\\', \\'shop|unique-wines\\', \\'unique-wines\\', \\'unique-wines-drawer\\'*/,\\nUser Loctck text /* Values: \\'+\\', \\'0\\', \\'1\\', \\'id\\'*/,\\nPage Ss1 text /* Values: \\'\\', \\')\\', \\'+\\', \\'count\\', \\'count-on-clorox\\', \\'for=\\', \\'id\\', \\'session\\', \\'unique-recipes\\'*/,\\nPage Ss2 text /* Values: \\'*\\', \\'-\\', \\'0\\', \\'count-on-clorox\\', \\'id\\', \\'show-low\\'*/,\\nPage Ss3 text /* Values: \\'*\\', \\'-\\', \\'0\\', \\'id\\', \\'show\\', \\'show-code\\'*/,\\nIngestion Time date /* Values: \\'yesterday\\'*/,\\nPagefilter Filtyp text /* Values: \\'age\\', \\'bone\\', \\'count\\', \\'cut\\'*/,\\nProcessed Time date /* Values: \\'yesterday\\'*/,\\nLink Name text /* Values: \\'fresh\\', \\'frozen\\', \\'pantry\\', \\'show more\\'*/,\\nError Id text,\\nRewards Id text,\\nCoupon Id text,\\nCart Transaction Dlvwin text /* Values: \\'1-hours\\', \\'2-hours\\', \\'4-hours\\'*/,\\nCart Savings Ccsav text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nProductinfo Units int,\\nCart Savings Ttlsav text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nPagefilter Rtyp text /* Values: \\'1\\', \\'2\\', \\'3\\'*/,\\nUser Type text /* Values: \\'c\\', \\'g\\'*/,\\nSearch Orderby text /* Values: \\'inventory(1,price)\\', \\'inventory(2,price)\\', \\'inventory(4,price)\\'*/,\\nSearch Impressions Bia boolean,\\nUser Odrsts text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nProductinfo Aisle text /* Values: \\'beef\\', \\'gum\\', \\'tea\\'*/,\\nProductinfo Cpnapld text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nGlobal Attrtoken text,\\nCart Transaction Subttlwinecart Sellerid text /* Values: \\'22222222\\'*/,\\nProductinfo Mto text /* Values: \\'false\\', \\'true\\'*/,\\nCart Savings Empsav text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nCart Savings Totcpns int,\\nSearch Impressions Upc text,\\nCoupon Savings text /* Values: \\'1.7\\', \\'2.6\\', \\'4.5\\'*/,\\nUser Cookiepref text /* Values: \\',,\\', \\',c0001,\\', \\'c0001\\'*/,\\nCart Cartinfo Ismfc text /* Values: \\'false\\'*/,\\nProductinfo Pfmdtl text,\\nProductinfo Aid text /* Values: \\'1_\\', \\'1_1\\', \\'1_2\\'*/,\\nModal Action text /* Values: \\'\\', \\'1\\', \\'close\\'*/,\\nPagefilter Subsfunnel text /* Values: \\'checkout-annual\\', \\'checkout-monthly\\', \\'plan-cancelled\\'*/,\\nPage Rurl text,\\nSearch Tst text,\\nUser Ccn text,\\nSearch Impressions Mp text /* Values: \\'n\\', \\'y\\'*/,\\nSearch Rescnt text,\\nPagefilter Placement text /* Values: \\'r00\\', \\'r01\\', \\'r02\\'*/,\\nCart Transaction Dlvtime text,\\nUser Custsts text /* Values: \\'first\\', \\'returning\\'*/,\\nSearch Impressions Sellerid text,\\nProductinfo Bp text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nSearch Impressions Pid text,\\nCart Transaction Subttl double,\\nUser Picloc text /* Values: \\'delivery\\', \\'dug\\'*/,\\nCart Transaction Ordid text,\\nCart Transaction Subttlwinecart Subtotal double,\\nCart Transaction Ordver text,\\nPagefilter Filsel text,\\nUser Os text /* Values: \\'ios 14.0\\', \\'ios 14.1\\', \\'ios 14.2\\'*/,\\nUser Subdate text,\\nCart Cartinfo Acrt text,\\nSearch Selposition double,\\nUser Smsoptin text /* Values: \\'d\\', \\'true\\'*/,\\nUser Ostype text /* Values: \\'arm\\', \\'tb\\', \\'u\\'*/,\\nProductinfo Iv text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nUser Emailoptin text /* Values: \\'d\\', \\'true\\'*/,\\nCart Transaction Taxes text,\\nCoupon Name text /* Values: \\'7up\\', \\'c4\\'*/,\\nCart Savings Catinvalidnone text /* Values: \\'0\\'*/,\\nCart Transaction Shipfee text /* Values: \\'0\\', \\'2\\', \\'4\\'*/,\\nCart Savings Cpnsclip int,\\nSearch Impressions Index int,\\nPagefilter Topnav text,\\nUser Cameraallowed text /* Values: \\'camera-allowed\\', \\'camera-blocked\\', \\'camera-notdetermined\\'*/,\\nPage Purl text,\\nCart Transaction Paymthd text /* Values: \\'cc\\', \\'cc|\\', \\'coa\\'*/,\\nCart Cartinfo Totunits text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nCart Transaction Dlvst text /* Values: \\'flash\\', \\'fp:\\', \\'onehr\\'*/,\\nUser Sessionid text,\\nUser Clientua text,\\nSearch Impressions Sponsored boolean,\\nUser Ssid text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nProductinfo Pname text,\\nCart Savings Catinvalidid text /* Values: \\'0\\'*/,\\nSearch Type text /* Values: \\'internalsearch:standard\\', \\'search\\', \\'wineshopsearch:standard\\'*/,\\nUser Utype text /* Values: \\'c\\', \\'g\\'*/,\\nPagefilter Premslots text /* Values: \\'false\\', \\'null\\', \\'true\\'*/,\\nSearch Filter text,\\nPage Tp text /* Values: \\'yext\\'*/,\\nUser Dlvpre text /* Values: \\'%27\\', \\'dug\\', \\'j4u\\'*/,\\nProductinfo Each text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nUser Datalc boolean,\\nProductinfo Iqn text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nUser Dlvcomb text /* Values: \\'attended\\', \\'null\\', \\'unattended\\'*/,\\nUser Custid text,\\nUser Hhid text,\\nModal Msg text,\\nProductinfo Cpnclpd text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nPage Sid text)\\n\\n\\'\\'\\'\\n\\nRelevant keywords for phrase tokens are given below that can be used if needed (NOT relevant for formula expressions, as they have different functions), do not use any other keywords:\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [Event Subevent] sort by [Productinfo Units]\\\",\\\"bottom 25 [Event Subevent] sort by count [Event Subevent]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Productinfo Units] ascending\\\",\\\"sort by count [Event Subevent] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Productinfo Units]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[Event Subevent] begins with \\'transaction_complete\\'\\\",\\\"[Event Subevent] ends with \\'transaction_complete\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[Event Subevent] contains \\'transaction_complete\\'\\\",\\\"[Event Subevent] contains \\'transaction_complete\\' \\'cart_add\\'\\\",\\\"[Event Subevent] not contains \\'transaction_complete\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Productinfo Units] [Event Subevent] = \\'transaction_complete\\' vs [Event Subevent] = \\'cart_add\\'\\\",\\\"[Productinfo Units] [Eventtime] = \\'this year\\' vs [Eventtime] = \\'last year\\'\\\",\\\"[Cart Savings Totcpns] [Event Id] = \\'a1_value0\\' vs [Event Id] = \\'a1_value1\\' vs [Event Id] = \\'a1_value2\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Productinfo Units] by [Eventtime] [Eventtime].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [Event Subevent]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [Event Subevent]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[Event Subevent] in ([Event Subevent] [Event Subevent] begins with \\'transaction_complete\\' [Productinfo Units] > 100 top 10 [Event Subevent] sort by [Cart Savings Totcpns] descending)\\\",\\\"[Event Subevent] not in ([Event Subevent] [Event Subevent] begins with \\'transaction_complete\\' [Productinfo Units] > 100 top 10 [Event Subevent] sort by [Cart Savings Totcpns] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Productinfo Units]\\\",\\\"average [Productinfo Units]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [Event Subevent]\\\"]}\\n\\nYou can use the following function references with examples that are valid only for formula expressions. Use only relevant functions, if required:\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Productinfo Units )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( Event Subevent )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Productinfo Units > 10), Event Subevent )\\\",\\\"count_if ( (Productinfo Units > 10) , month ( Eventtime ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Productinfo Units, Event Subevent, Event Id)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Productinfo Units, Event Subevent)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Productinfo Units ) , { Event Subevent } , { } )\\\",\\\"group_aggregate ( stddev ( Productinfo Units ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Productinfo Units ), { Event Subevent , Event Id }, { day_of_week ( Eventtime ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Cart Savings Totcpns ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( Event Id ), query_groups ( ) + { Event Subevent }, query_filters ( ) - { Event Id } )\\\",\\\"group_aggregate ( unique count ( Event Id ) , query_groups ( ) + { Event Subevent }, query_filters ( ) + { Event Id != \\'a1_value0\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Productinfo Units )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Productinfo Units)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Productinfo Units, 2, 1, Event Subevent)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Productinfo Units, 2, 1, Event Subevent )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Productinfo Units , 99 , \\'asc\\' )\\\",\\\"percentile ( Productinfo Units , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Productinfo Units )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Productinfo Units )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( Event Subevent )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Productinfo Units > 10) , Event Subevent )\\\",\\\"unique_count_if ( (Productinfo Units > 10) , month ( Eventtime ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Productinfo Units )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"Event Subevent in { \\'transaction_complete\\' , \\'cart_add\\' }\\\",\\\"Event Subevent not in { \\'transaction_complete\\' , \\'cart_add\\' ,\\'checkout\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Eventtime >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Eventtime <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Eventtime, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Productinfo Units > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Productinfo Units > 100 ) then \\'High\\' else if ( Cart Savings Totcpns > 100 and Event Subevent = \\'transaction_complete\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Eventtime ) = 2024\\\",\\\"month ( Eventtime ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\nBelow are some examples of NL to phrase tokens translation, including usages of formulas. These examples are synthetic and are not derived from user feedback.\\nThey are just for understanding of when & how to use the keywords and formula functions defined above:\\n\\n{\\\"query\\\":\\\"show distinct values for Event Id\\\",\\\"desc\\\":\\\"Returning just the output column acts as a group by <column> in SQL\\\",\\\"tokens\\\":\\\"[Event Id]\\\"}\\n{\\\"query\\\":\\\"how many Event Subevent by Event Id were there last month\\\",\\\"tokens\\\":\\\"unique count [Event Subevent] by [Event Id] [Eventtime] = \\'last month\\'\\\"}\\n{\\\"query\\\":\\\"How many transaction_completes are web for id, show the Productinfo Utyp and Pagefilter Carousel, exclude count and unique-wines\\\",\\\"desc\\\":\\\"For the phrase in query: \\'how many\\', apply count on the text column name, based on your understanding, & then apply filters mentioned in the question.\\\",\\\"tokens\\\":\\\"count [Event Subevent] [Event Subevent] = \\'transaction_complete\\' [Page Platform] = \\'web\\' [User Shopzc] = \\'id\\' [Productinfo Utyp] [Pagefilter Carousel] [Productinfo Utyp] not contains \\'count\\' [Pagefilter Carousel] not contains \\'unique-wines\\'\\\"}\\n{\\\"query\\\":\\\"I want to compare Productinfo Units for the last 7 days with the same days from last year\\\",\\\"desc\\\":\\\"Comparing Productinfo Units over the last 7 days with the exact same calendar days from last year. The `in` query filter `[Date] in ( [Date] [Date].\\'day of year\\' [Date].\\'last 7 days\\' )` is used to select the specific dates corresponding to the last 7 days of `this year`. By including `[Date].\\'day of year\\'`, we ensure that we are matching the exact same days of the year when comparing `this year` to `last year`. The `vs` keyword facilitates the comparison between these matching dates across the two years.\\\",\\\"tokens\\\":\\\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].\\'day of year\\' [Eventtime] = \\'last 7 days\\' ) [Eventtime] = \\'this year\\' vs [Eventtime] = \\'last year\\' [Eventtime].\\'day of year\\'\\\"}\\n{\\\"query\\\":\\\"I want to compare Productinfo Units for the last 7 days with the same weekdays in the same period from last year\\\",\\\"desc\\\":\\\"Comparing Productinfo Units over the last 7 days with the same weekdays from the same period last year. The `in` query filter `[Date] in ( [Date] [Date].\\'day of year\\' [Date].\\'last 7 days\\' )` selects dates from this year that have the same \\'day of year\\' as the last 7 days, effectively capturing the same weekdays. By applying `[Date].\\'day of week\\'`, we align the data by weekdays. The `vs` keyword is used to compare these dates in `this year` with `last year`, enabling a direct comparison of the same weekdays across the two years.\\\",\\\"tokens\\\":\\\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].\\'day of year\\' [Eventtime] = \\'last 7 days\\' ) [Eventtime] = \\'this year\\' vs [Eventtime] = \\'last year\\' [Eventtime].\\'day of week\\'\\\"}\\n{\\\"query\\\":\\\"how many Event Subevents did id User Shopzc do last month in comparison to the same period last year\\\",\\\"tokens\\\":\\\"count [Event Subevent] [Eventtime] = \\'last month\\' vs [Eventtime] = \\'13 months ago\\' [User Shopzc] = \\'id\\' [User Shopzc]\\\"}\\n{\\\"query\\\":\\\"what is total count Event Subevent in march 2024 as percentage of total count Event Id in march 2023\\\",\\\"tokens\\\":\\\"[percentage of Event Subevent in March 2024 over Event Id in March 2023]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Total Count Event Subevent in March 2024\\\",\\\"expression\\\":\\\"count_if( ( Eventtime >= to_date ( \\'03/01/2024\\' , \\'%m/%d/%Y\\' ) and Eventtime <= to_date ( \\'03/31/2024\\' , \\'%m/%d/%Y\\' ) ), Event Subevent)\\\"},{\\\"name\\\":\\\"Total Count Event Id in March 2023\\\",\\\"expression\\\":\\\"count_if( ( Eventtime >= to_date ( \\'03/01/2023\\' , \\'%m/%d/%Y\\' ) and Eventtime <= to_date ( \\'03/31/2023\\' , \\'%m/%d/%Y\\' ) ), Event Id)\\\"},{\\\"name\\\":\\\"percentage of Event Subevent in March 2024 over Event Id in March 2023\\\",\\\"expression\\\":\\\"Total Count Event Subevent in March 2024 / Total Count Event Id in March 2023 * 100\\\"}]}\\n{\\\"query\\\":\\\"show me the last month transaction_complete Productinfo Units for the Page Platform which sold the most cart_add last quarter\\\",\\\"desc\\\":\\\"First, use a top sub-query to find the Page Platform which sold the most cart_add last quarter. Then, use that attribute in the main query to find the last month transaction_complete Productinfo Units\\\",\\\"tokens\\\":\\\"[Eventtime] = \\'last month\\' [Event Subevent] = \\'transaction_complete\\' [Productinfo Units] [Page Platform] in ( [Page Platform] top 1 sort by [Productinfo Units] [Event Subevent] = \\'cart_add\\' [Eventtime] = \\'last quarter\\' )\\\"}\\n{\\\"query\\\":\\\"I want to compare Productinfo Units for the last 30 days with the 90 days prior to that\\\",\\\"tokens\\\":\\\"[Productinfo Units] [Eventtime] = \\'last 30 days\\' vs [Eventtime] before \\'30 days ago\\' [Eventtime] = \\'last 120 days\\'\\\"}\\n{\\\"query\\\":\\\"can you show the % increase for transaction_complete in the last 8 weeks\\\",\\\"tokens\\\":\\\"growth of sum [Productinfo Units] by [Eventtime] [Eventtime].weekly [Event Subevent] = \\'transaction_complete\\' [Eventtime] = \\'last 8 weeks\\'\\\"}\\n{\\\"query\\\":\\\"I want to compare Productinfo Units for this year up to today with the same period last year\\\",\\\"desc\\\":\\\"Comparing year-to-date Productinfo Units up to today for `this year` with the same period from `last year`. The `in` query filter `[Date] in ( [Date] [Date].\\'day of year\\' [Date] before [Date].\\'today\\' )` selects all dates from the beginning of the year up to today in `this year`. By using `vs` with `[Date] = \\'last year\\'`, we compare these dates with the matching period in `last year`. The phrase `same period last year` is thus calculated by filtering dates in `last year` that are in the same \\'day of year\\' range as in `this year` up to today.\\\",\\\"tokens\\\":\\\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].\\'day of year\\' [Eventtime] before [Eventtime] = \\'today\\' ) [Eventtime] = \\'this year\\' vs [Eventtime] = \\'last year\\' [Eventtime] = \\'year to date\\'\\\"}\\n{\\\"query\\\":\\\"show me the best performing Event Subevents last year in not in transaction_complete\\\",\\\"desc\\\":\\\"Since the user asked for the best performing attributes (plural form), return all sorted by measure column.\\\",\\\"tokens\\\":\\\"[Event Subevent] [Productinfo Units] sort by [Productinfo Units] descending [Eventtime] = \\'last year\\' [Event Subevent] != \\'transaction_complete\\'\\\"}\\n{\\\"query\\\":\\\"show details for transaction_complete for web\\\",\\\"desc\\\":\\\"Show related queries based on some values require to not only apply filter values, but also display relevant attribute and measure columns, based on relevance of those columns with current query.\\\",\\\"tokens\\\":\\\"[Productinfo Units] [User Shopzc] [Productinfo Utyp] [Event Subevent] = \\'transaction_complete\\' [Page Platform] = \\'web\\'\\\"}\\n{\\\"query\\\":\\\"I want to see Productinfo Units of Event Subevents, for Event Subevents that were Productinfo Units yesterday, where those same Event Subevents have not had any Productinfo Units today\\\",\\\"desc\\\":\\\"In this query, we aim to display the \\'Productinfo Units\\' of \\'Event Subevent\\'s that had recorded \\'Productinfo Units\\' **yesterday** but have **no \\'Productinfo Units\\' today**. Essentially, we\\'re identifying \\'Event Subevent\\'s where \\'Productinfo Units\\' was greater than zero yesterday and zero today.\\\",\\\"tokens\\\":\\\"[Productinfo Units] [Event Subevent] [Eventtime] = \\'today\\' vs [Eventtime] = \\'yesterday\\' [Productinfo Units ( today )] = 0 [Productinfo Units ( yesterday )] > 0\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Productinfo Units ( today )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_days ( Eventtime , today() ) = 0 } )\\\"},{\\\"name\\\":\\\"Productinfo Units ( yesterday )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_days ( Eventtime , today() ) = -1 } )\\\"}]}\\n{\\\"query\\\":\\\"show this year\\'s transaction_complete, web Productinfo Units compare to last year along with percentage change\\\",\\\"desc\\\":\\\"In this query, we are comparing \\'Productinfo Units\\' for \\'Event Subevent\\' equal to \\'\\'transaction_complete\\'\\' and \\'Page Platform\\' equal to \\'\\'web\\'\\' between this year and last year, calculating the percentage change between the two periods. The formulas provided use \\'group_aggregate\\' to sum \\'Productinfo Units\\' for both years while applying the necessary filters for the specified attributes and dates. Specifically, \\'Productinfo Units this year\\' sums \\'Productinfo Units\\' where \\'Eventtime\\' is in the current year (\\'diff_years(Eventtime, today()) = 0\\'), and \\'Productinfo Units last year\\' sums it where \\'Eventtime\\' is in the previous year (\\'diff_years(Eventtime, today()) = -1\\'). The \\'percentage change\\' is then calculated by subtracting last year\\'s \\'Productinfo Units\\' from this year\\'s, dividing by last year\\'s \\'Productinfo Units\\', and multiplying by 100. These formulas match the query accurately, as they correctly compute the sums for each year and calculate the percentage change, fulfilling the query\\'s requirements.\\\",\\\"tokens\\\":\\\"[Event Subevent] = \\'transaction_complete\\' [Page Platform] = \\'web\\' [Productinfo Units] [Eventtime] = \\'this year\\' vs [Eventtime] = \\'last year\\' [percentage change]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Productinfo Units this year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_years ( Eventtime, today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Productinfo Units last year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_years ( Eventtime, today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"percentage change\\\",\\\"expression\\\":\\\"( Productinfo Units this year - Productinfo Units last year ) / Productinfo Units last year * 100\\\"}]}\\n\\'\\'\\'\\n\\nBelow are exact value matches found from the current user query that can be used directly in final tokens result, if relevant:\\n[{\\\"phrase\\\":\\\"[User Shopzc] = \\'id\\'\\\"}, {\\\"phrase\\\":\\\"[Productinfo Utyp] = \\'count\\'\\\"}, {\\\"phrase\\\":\\\"[User Loctck] = \\'id\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss1] = \\'id\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss1] = \\'count\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss1] = \\'session\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss1] = \\'\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss2] = \\'id\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss3] = \\'id\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss3] = \\'show\\'\\\"}, {\\\"phrase\\\":\\\"[Pagefilter Filtyp] = \\'count\\'\\\"}, {\\\"phrase\\\":\\\"[Modal Action] = \\'\\'\\\"}]\\nIMPORTANT: Column names below separated by comma (,) co-occur with each other and form a use-case/group. When trying to select column names relevant for current user query, prefer the co-occurring/neighboring columns for answering the question. Columns from across the groups are not generally used together.\\n\\nGroup 0 Event Id,Event Subevent,Eventtime,Page Platform\\n\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: - If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI.\\n\\nThe response should be well-formatted JSON as shown below:\\n{ \\\"reasoning\\\": {\\\"assumptions\\\":\\\"\\\"}, \\\"tokens\\\": \\\"\\\", \\\"formulas\\\":[{\\\"name\\\":\\\"\\\", \\\"expression\\\":\\\"\\\"}]}\\nEnsure the assumptions is short & concise.\\nQuestion: show me the count of unique session id for yesterday\"\n}\n"}]}, {"timestamp": 1735684543926000, "fields": [{"key": "event.log", "type": "string", "value": "Response from LLM Gateway:\ncompletions {\n  id: \"chatcmpl-Akf7uKh7umHFbo44tEVjKtOO2f8mz\"\n  created: 1735684542\n  choices {\n    text: \"{\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The query is asking for the count of unique session IDs for the date \\'yesterday\\'.\\\"\\n  },\\n  \\\"tokens\\\": \\\"unique count [User Sessionid] [Eventtime] = \\'yesterday\\'\\\",\\n  \\\"formulas\\\": []\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 63\n    prompt_tokens: 10122\n    total_tokens: 10185\n  }\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "3bd82d624f07c921", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "e1a1d6c3c109bfaa"}], "startTime": 1735684541927000, "duration": 1998865, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "e1a1d6c3c109bfaa", "flags": 1, "operationName": "getResponseFromTimedRPCCall", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "938d5eef0143f580"}], "startTime": 1735684541927000, "duration": 1998907, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "65c816e56f99beaa", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "3bd82d624f07c921"}], "startTime": 1735684541928000, "duration": 1997573, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.llmgateway.LLMCompletionsService/Complete"}, {"key": "peer.address", "type": "string", "value": "10.252.242.59:45862"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "31e8718c7d89af27", "flags": 1, "operationName": "getModelsForTenantAndOrg", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "e60345d5d30592d6"}], "startTime": 1735684541929000, "duration": 158, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "e60345d5d30592d6", "flags": 1, "operationName": "getLLMConfigMap", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "5bd4b8ff55a28fa6"}], "startTime": 1735684541929000, "duration": 199, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "d6d400ca2f30e466", "flags": 1, "operationName": "getDefaultModel", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "c2c13509120b4480"}], "startTime": 1735684541929000, "duration": 23, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "c2c13509120b4480", "flags": 1, "operationName": "getLLMApiProperties", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "5bd4b8ff55a28fa6"}], "startTime": 1735684541929000, "duration": 224, "tags": [{"key": "is-custom-model", "type": "string", "value": "false"}, {"key": "api-version", "type": "string", "value": "2024-02-01"}, {"key": "endpoint", "type": "string", "value": "https://na-west-us.openai.azure.com/"}, {"key": "deployment-id", "type": "string", "value": "eureka-gpt-4o"}, {"key": "client-name", "type": "string", "value": "eureka-searcher"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "5bd4b8ff55a28fa6", "flags": 1, "operationName": "getProtoResponseWithCustomModel", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "23516a79ec2bff8b"}], "startTime": 1735684541929000, "duration": 1996080, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684541930000, "fields": [{"key": "event.log", "type": "string", "value": "Completions proto request: headers {\n  tenant_id: \"17510819-5784-11ee-8f97-3da98\"\n  client_id: \"eureka-searcher\"\n  request_id: \"665a37a4-5ea6-49f2-b22b-e7e74892b4fd\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"Your task is to generate the phrase tokens (a new simple keyword based language) for a natural language query.\\nYou are given the following:\\n 1. Definition & rules of the language\\n 2. References for which functions and date keywords to use with examples.\\n 3. Table Schema with column names, their data type, synonyms & sample values.\\n 4. Examples of similar queries & their tokens from users feedback mappings.\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"reasoning\\\": {\\\"assumptions\\\":\\\"\\\"},\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\":[{\\\"name\\\":\\\"\\\", \\\"expression\\\":\\\"\\\"}]\\n}\\nRemember the following types of columns:\\n 1. measure: columns with numeric data type: int, double, long, float.\\n 2. attribute: columns with categorical type: text, bool or date.\\nWhat are \\'output columns\\'?:\\nColumn names that are only encapsulated in [] brackets without any filters applied. They are essentially columns used in SELECT clauses.\\nIn phrase tokens, column names are present inside [] brackets and the filters applied on them are present in quotes.\\nRules to generate the response:\\n1. When generating formula names that are used in \\'tokens\\' field, ensure the name is a relevant substring of the current user query.\\n2. Formula expressions DO NOT contain column names in quotes [], it has a different syntax that you can infer from the users\\' examples and function references for formulas.\\n3. If from the current query, you are not able to find any column in schema or formula name in users\\' examples, select a best effort column from the table schema. Do not return an empty answer & do not hallucinate column names.\\n4. If in the final tokens there are only filters present, add a relevant \\'output column\\' to the final tokens, because only filters present in \\'tokens\\' output is not a valid answer. Choose the output column based on the context of the query. Example: {\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"} is not a valid answer, this:\\n{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column2]\\\"} is because it has an output column.\\n5. Any occurrences of \\'jan\\', \\'feb\\' or related short forms of month names in natural language needs to be expanded to complete name of the month when used as date filters in phrase tokens. However, do not expand them if they are used as filter values in non-date columns.\\n6. Only use keywords and formula functions that are present in the provided reference examples and users\\' usage/feedback history.\\n7. If there is a filter on null value, always encapsulate it in quotes and curly brackets \\'{}\\' like \\'{null}\\'. Example: column_name != \\'{null}\\'\\n8. count or unique count keywords (or formula functions) are only allowed on attributes i.e. text or date type columns, do not apply them on measure or numeric columns.\\n9. In phrase tokens language, values applied on the same column like:\\n[column] = \\'value1\\' [column] = \\'value2\\' behave as OR filters, whereas values applied on different columns like: [column1] = \\'value1\\' [column2] = \\'value2\\' behave as AND filters\\n10. Comparison between numeric (i.e measure) columns can only be done in formulas. eg: \\'measure > sum [measure]\\' in tokens field is INVALID, but \\'measure > sum(measure)\\' is valid in formula expressions.\\n11. When generating formulas, ensure that all dependent formulas are included in the formulas field. A dependent formula is defined as any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n12. Avoid generating redundant formulas, example: {tokens:\\\"[Revenue]\\\",formulas: [{\\\"name\\\":\\\"total revenue\\\",\\\"expression\\\":\\\"sum(Revenue)\\\"}], where token: [Revenue] is same as formula name \\'total revenue\\' as [Revenue] is internally evaluated with default aggregation of \\'sum\\'.\\n13. In formula expressions, date filters like \\'last month\\' should be represented using formula functions that calculate the date range, such as `diff_months` or `to_date`.\\n14. DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\",then you cannot apply sum ( unique users ) because it is already aggregated in formula language i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n\\nYou can use the following date keywords only in \\'tokens\\' field (NOT VALID for formula expressions):\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 7 days\\'\\\",\\\"[Eventtime] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Eventtime] = \\'march\\'\\\",\\\"[Eventtime] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Eventtime] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Eventtime] = \\'Saturday\\'\\\",\\\"[Eventtime] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Eventtime] = \\'march 2024\\'\\\",\\\"[Eventtime] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Eventtime] = \\'this day\\'\\\",\\\"[Eventtime] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Eventtime] = \\'last 2 quarters for each year\\'\\\",\\\"[Eventtime] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Eventtime].yearly\\\",\\\"[Eventtime].quarterly\\\",\\\"[Eventtime].monthly\\\",\\\"[Eventtime].weekly\\\",\\\"[Eventtime].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Eventtime] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Productinfo Units] by [Eventtime] [Eventtime].daily month over month\\\",\\\"growth of [Productinfo Units] by [Eventtime] [Eventtime].monthly year over year\\\",\\\"growth of [Productinfo Units] by [Eventtime] [Eventtime].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Eventtime].\\'day of month\\'\\\",\\\"[Eventtime].\\'month of year\\'\\\",\\\"[Eventtime].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Eventtime] = \\'10 months ago\\'\\\",\\\"[Eventtime] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Eventtime] detailed\\\"]}\\nFor reference today\\'s date in MM/dd/yyyy format: 12/31/2024\\n\"\n}\nchat_messages {\n  role: USER\n  content: \"CREATE TABLE GCP_OneTag_Prod (\\nEventtime date /* Values: \\'yesterday\\' Current year is 2024.*/,\\nEvent Subevent text /* Values: \\'cart_add\\', \\'checkout\\', \\'transaction_complete\\'*/,\\nEvent Id text,\\nPage Platform text /* Values: \\'app\\', \\'web\\'*/,\\nUser Shopzc text /* Values: \\'+\\', \\'0\\', \\'1\\', \\'id\\'*/,\\nProductinfo Utyp text /* Values: \\'c\\', \\'count\\', \\'g\\', \\'l\\'*/,\\nPagefilter Carousel text /* Values: \\'-\\', \\'--\\', \\'count-on-clorox\\', \\'p&g\\', \\'shop|unique-wines\\', \\'unique-wines\\', \\'unique-wines-drawer\\'*/,\\nUser Loctck text /* Values: \\'+\\', \\'0\\', \\'1\\', \\'id\\'*/,\\nPage Ss1 text /* Values: \\'\\', \\')\\', \\'+\\', \\'count\\', \\'count-on-clorox\\', \\'for=\\', \\'id\\', \\'session\\', \\'unique-recipes\\'*/,\\nPage Ss2 text /* Values: \\'*\\', \\'-\\', \\'0\\', \\'count-on-clorox\\', \\'id\\', \\'show-low\\'*/,\\nPage Ss3 text /* Values: \\'*\\', \\'-\\', \\'0\\', \\'id\\', \\'show\\', \\'show-code\\'*/,\\nIngestion Time date /* Values: \\'yesterday\\'*/,\\nPagefilter Filtyp text /* Values: \\'age\\', \\'bone\\', \\'count\\', \\'cut\\'*/,\\nProcessed Time date /* Values: \\'yesterday\\'*/,\\nLink Name text /* Values: \\'fresh\\', \\'frozen\\', \\'pantry\\', \\'show more\\'*/,\\nError Id text,\\nRewards Id text,\\nCoupon Id text,\\nCart Transaction Dlvwin text /* Values: \\'1-hours\\', \\'2-hours\\', \\'4-hours\\'*/,\\nCart Savings Ccsav text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nProductinfo Units int,\\nCart Savings Ttlsav text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nPagefilter Rtyp text /* Values: \\'1\\', \\'2\\', \\'3\\'*/,\\nUser Type text /* Values: \\'c\\', \\'g\\'*/,\\nSearch Orderby text /* Values: \\'inventory(1,price)\\', \\'inventory(2,price)\\', \\'inventory(4,price)\\'*/,\\nSearch Impressions Bia boolean,\\nUser Odrsts text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nProductinfo Aisle text /* Values: \\'beef\\', \\'gum\\', \\'tea\\'*/,\\nProductinfo Cpnapld text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nGlobal Attrtoken text,\\nCart Transaction Subttlwinecart Sellerid text /* Values: \\'22222222\\'*/,\\nProductinfo Mto text /* Values: \\'false\\', \\'true\\'*/,\\nCart Savings Empsav text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nCart Savings Totcpns int,\\nSearch Impressions Upc text,\\nCoupon Savings text /* Values: \\'1.7\\', \\'2.6\\', \\'4.5\\'*/,\\nUser Cookiepref text /* Values: \\',,\\', \\',c0001,\\', \\'c0001\\'*/,\\nCart Cartinfo Ismfc text /* Values: \\'false\\'*/,\\nProductinfo Pfmdtl text,\\nProductinfo Aid text /* Values: \\'1_\\', \\'1_1\\', \\'1_2\\'*/,\\nModal Action text /* Values: \\'\\', \\'1\\', \\'close\\'*/,\\nPagefilter Subsfunnel text /* Values: \\'checkout-annual\\', \\'checkout-monthly\\', \\'plan-cancelled\\'*/,\\nPage Rurl text,\\nSearch Tst text,\\nUser Ccn text,\\nSearch Impressions Mp text /* Values: \\'n\\', \\'y\\'*/,\\nSearch Rescnt text,\\nPagefilter Placement text /* Values: \\'r00\\', \\'r01\\', \\'r02\\'*/,\\nCart Transaction Dlvtime text,\\nUser Custsts text /* Values: \\'first\\', \\'returning\\'*/,\\nSearch Impressions Sellerid text,\\nProductinfo Bp text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nSearch Impressions Pid text,\\nCart Transaction Subttl double,\\nUser Picloc text /* Values: \\'delivery\\', \\'dug\\'*/,\\nCart Transaction Ordid text,\\nCart Transaction Subttlwinecart Subtotal double,\\nCart Transaction Ordver text,\\nPagefilter Filsel text,\\nUser Os text /* Values: \\'ios 14.0\\', \\'ios 14.1\\', \\'ios 14.2\\'*/,\\nUser Subdate text,\\nCart Cartinfo Acrt text,\\nSearch Selposition double,\\nUser Smsoptin text /* Values: \\'d\\', \\'true\\'*/,\\nUser Ostype text /* Values: \\'arm\\', \\'tb\\', \\'u\\'*/,\\nProductinfo Iv text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nUser Emailoptin text /* Values: \\'d\\', \\'true\\'*/,\\nCart Transaction Taxes text,\\nCoupon Name text /* Values: \\'7up\\', \\'c4\\'*/,\\nCart Savings Catinvalidnone text /* Values: \\'0\\'*/,\\nCart Transaction Shipfee text /* Values: \\'0\\', \\'2\\', \\'4\\'*/,\\nCart Savings Cpnsclip int,\\nSearch Impressions Index int,\\nPagefilter Topnav text,\\nUser Cameraallowed text /* Values: \\'camera-allowed\\', \\'camera-blocked\\', \\'camera-notdetermined\\'*/,\\nPage Purl text,\\nCart Transaction Paymthd text /* Values: \\'cc\\', \\'cc|\\', \\'coa\\'*/,\\nCart Cartinfo Totunits text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nCart Transaction Dlvst text /* Values: \\'flash\\', \\'fp:\\', \\'onehr\\'*/,\\nUser Sessionid text,\\nUser Clientua text,\\nSearch Impressions Sponsored boolean,\\nUser Ssid text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nProductinfo Pname text,\\nCart Savings Catinvalidid text /* Values: \\'0\\'*/,\\nSearch Type text /* Values: \\'internalsearch:standard\\', \\'search\\', \\'wineshopsearch:standard\\'*/,\\nUser Utype text /* Values: \\'c\\', \\'g\\'*/,\\nPagefilter Premslots text /* Values: \\'false\\', \\'null\\', \\'true\\'*/,\\nSearch Filter text,\\nPage Tp text /* Values: \\'yext\\'*/,\\nUser Dlvpre text /* Values: \\'%27\\', \\'dug\\', \\'j4u\\'*/,\\nProductinfo Each text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nUser Datalc boolean,\\nProductinfo Iqn text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nUser Dlvcomb text /* Values: \\'attended\\', \\'null\\', \\'unattended\\'*/,\\nUser Custid text,\\nUser Hhid text,\\nModal Msg text,\\nProductinfo Cpnclpd text /* Values: \\'0\\', \\'1\\', \\'2\\'*/,\\nPage Sid text)\\n\\n\\'\\'\\'\\n\\nRelevant keywords for phrase tokens are given below that can be used if needed (NOT relevant for formula expressions, as they have different functions), do not use any other keywords:\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [Event Subevent] sort by [Productinfo Units]\\\",\\\"bottom 25 [Event Subevent] sort by count [Event Subevent]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Productinfo Units] ascending\\\",\\\"sort by count [Event Subevent] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Productinfo Units]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[Event Subevent] begins with \\'transaction_complete\\'\\\",\\\"[Event Subevent] ends with \\'transaction_complete\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[Event Subevent] contains \\'transaction_complete\\'\\\",\\\"[Event Subevent] contains \\'transaction_complete\\' \\'cart_add\\'\\\",\\\"[Event Subevent] not contains \\'transaction_complete\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Productinfo Units] [Event Subevent] = \\'transaction_complete\\' vs [Event Subevent] = \\'cart_add\\'\\\",\\\"[Productinfo Units] [Eventtime] = \\'this year\\' vs [Eventtime] = \\'last year\\'\\\",\\\"[Cart Savings Totcpns] [Event Id] = \\'a1_value0\\' vs [Event Id] = \\'a1_value1\\' vs [Event Id] = \\'a1_value2\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Productinfo Units] by [Eventtime] [Eventtime].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [Event Subevent]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [Event Subevent]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[Event Subevent] in ([Event Subevent] [Event Subevent] begins with \\'transaction_complete\\' [Productinfo Units] > 100 top 10 [Event Subevent] sort by [Cart Savings Totcpns] descending)\\\",\\\"[Event Subevent] not in ([Event Subevent] [Event Subevent] begins with \\'transaction_complete\\' [Productinfo Units] > 100 top 10 [Event Subevent] sort by [Cart Savings Totcpns] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Productinfo Units]\\\",\\\"average [Productinfo Units]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [Event Subevent]\\\"]}\\n\\nYou can use the following function references with examples that are valid only for formula expressions. Use only relevant functions, if required:\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Productinfo Units )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( Event Subevent )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Productinfo Units > 10), Event Subevent )\\\",\\\"count_if ( (Productinfo Units > 10) , month ( Eventtime ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Productinfo Units, Event Subevent, Event Id)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Productinfo Units, Event Subevent)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Productinfo Units ) , { Event Subevent } , { } )\\\",\\\"group_aggregate ( stddev ( Productinfo Units ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Productinfo Units ), { Event Subevent , Event Id }, { day_of_week ( Eventtime ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Cart Savings Totcpns ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( Event Id ), query_groups ( ) + { Event Subevent }, query_filters ( ) - { Event Id } )\\\",\\\"group_aggregate ( unique count ( Event Id ) , query_groups ( ) + { Event Subevent }, query_filters ( ) + { Event Id != \\'a1_value0\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Productinfo Units )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Productinfo Units)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Productinfo Units, 2, 1, Event Subevent)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Productinfo Units, 2, 1, Event Subevent )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Productinfo Units , 99 , \\'asc\\' )\\\",\\\"percentile ( Productinfo Units , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Productinfo Units )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Productinfo Units )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( Event Subevent )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Productinfo Units > 10) , Event Subevent )\\\",\\\"unique_count_if ( (Productinfo Units > 10) , month ( Eventtime ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Productinfo Units )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"Event Subevent in { \\'transaction_complete\\' , \\'cart_add\\' }\\\",\\\"Event Subevent not in { \\'transaction_complete\\' , \\'cart_add\\' ,\\'checkout\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Eventtime >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Eventtime <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Eventtime, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Productinfo Units > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Productinfo Units > 100 ) then \\'High\\' else if ( Cart Savings Totcpns > 100 and Event Subevent = \\'transaction_complete\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Eventtime ) = 2024\\\",\\\"month ( Eventtime ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\nBelow are some examples of NL to phrase tokens translation, including usages of formulas. These examples are synthetic and are not derived from user feedback.\\nThey are just for understanding of when & how to use the keywords and formula functions defined above:\\n\\n{\\\"query\\\":\\\"show distinct values for Event Id\\\",\\\"desc\\\":\\\"Returning just the output column acts as a group by <column> in SQL\\\",\\\"tokens\\\":\\\"[Event Id]\\\"}\\n{\\\"query\\\":\\\"how many Event Subevent by Event Id were there last month\\\",\\\"tokens\\\":\\\"unique count [Event Subevent] by [Event Id] [Eventtime] = \\'last month\\'\\\"}\\n{\\\"query\\\":\\\"How many transaction_completes are web for id, show the Productinfo Utyp and Pagefilter Carousel, exclude count and unique-wines\\\",\\\"desc\\\":\\\"For the phrase in query: \\'how many\\', apply count on the text column name, based on your understanding, & then apply filters mentioned in the question.\\\",\\\"tokens\\\":\\\"count [Event Subevent] [Event Subevent] = \\'transaction_complete\\' [Page Platform] = \\'web\\' [User Shopzc] = \\'id\\' [Productinfo Utyp] [Pagefilter Carousel] [Productinfo Utyp] not contains \\'count\\' [Pagefilter Carousel] not contains \\'unique-wines\\'\\\"}\\n{\\\"query\\\":\\\"I want to compare Productinfo Units for the last 7 days with the same days from last year\\\",\\\"desc\\\":\\\"Comparing Productinfo Units over the last 7 days with the exact same calendar days from last year. The `in` query filter `[Date] in ( [Date] [Date].\\'day of year\\' [Date].\\'last 7 days\\' )` is used to select the specific dates corresponding to the last 7 days of `this year`. By including `[Date].\\'day of year\\'`, we ensure that we are matching the exact same days of the year when comparing `this year` to `last year`. The `vs` keyword facilitates the comparison between these matching dates across the two years.\\\",\\\"tokens\\\":\\\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].\\'day of year\\' [Eventtime] = \\'last 7 days\\' ) [Eventtime] = \\'this year\\' vs [Eventtime] = \\'last year\\' [Eventtime].\\'day of year\\'\\\"}\\n{\\\"query\\\":\\\"I want to compare Productinfo Units for the last 7 days with the same weekdays in the same period from last year\\\",\\\"desc\\\":\\\"Comparing Productinfo Units over the last 7 days with the same weekdays from the same period last year. The `in` query filter `[Date] in ( [Date] [Date].\\'day of year\\' [Date].\\'last 7 days\\' )` selects dates from this year that have the same \\'day of year\\' as the last 7 days, effectively capturing the same weekdays. By applying `[Date].\\'day of week\\'`, we align the data by weekdays. The `vs` keyword is used to compare these dates in `this year` with `last year`, enabling a direct comparison of the same weekdays across the two years.\\\",\\\"tokens\\\":\\\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].\\'day of year\\' [Eventtime] = \\'last 7 days\\' ) [Eventtime] = \\'this year\\' vs [Eventtime] = \\'last year\\' [Eventtime].\\'day of week\\'\\\"}\\n{\\\"query\\\":\\\"how many Event Subevents did id User Shopzc do last month in comparison to the same period last year\\\",\\\"tokens\\\":\\\"count [Event Subevent] [Eventtime] = \\'last month\\' vs [Eventtime] = \\'13 months ago\\' [User Shopzc] = \\'id\\' [User Shopzc]\\\"}\\n{\\\"query\\\":\\\"what is total count Event Subevent in march 2024 as percentage of total count Event Id in march 2023\\\",\\\"tokens\\\":\\\"[percentage of Event Subevent in March 2024 over Event Id in March 2023]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Total Count Event Subevent in March 2024\\\",\\\"expression\\\":\\\"count_if( ( Eventtime >= to_date ( \\'03/01/2024\\' , \\'%m/%d/%Y\\' ) and Eventtime <= to_date ( \\'03/31/2024\\' , \\'%m/%d/%Y\\' ) ), Event Subevent)\\\"},{\\\"name\\\":\\\"Total Count Event Id in March 2023\\\",\\\"expression\\\":\\\"count_if( ( Eventtime >= to_date ( \\'03/01/2023\\' , \\'%m/%d/%Y\\' ) and Eventtime <= to_date ( \\'03/31/2023\\' , \\'%m/%d/%Y\\' ) ), Event Id)\\\"},{\\\"name\\\":\\\"percentage of Event Subevent in March 2024 over Event Id in March 2023\\\",\\\"expression\\\":\\\"Total Count Event Subevent in March 2024 / Total Count Event Id in March 2023 * 100\\\"}]}\\n{\\\"query\\\":\\\"show me the last month transaction_complete Productinfo Units for the Page Platform which sold the most cart_add last quarter\\\",\\\"desc\\\":\\\"First, use a top sub-query to find the Page Platform which sold the most cart_add last quarter. Then, use that attribute in the main query to find the last month transaction_complete Productinfo Units\\\",\\\"tokens\\\":\\\"[Eventtime] = \\'last month\\' [Event Subevent] = \\'transaction_complete\\' [Productinfo Units] [Page Platform] in ( [Page Platform] top 1 sort by [Productinfo Units] [Event Subevent] = \\'cart_add\\' [Eventtime] = \\'last quarter\\' )\\\"}\\n{\\\"query\\\":\\\"I want to compare Productinfo Units for the last 30 days with the 90 days prior to that\\\",\\\"tokens\\\":\\\"[Productinfo Units] [Eventtime] = \\'last 30 days\\' vs [Eventtime] before \\'30 days ago\\' [Eventtime] = \\'last 120 days\\'\\\"}\\n{\\\"query\\\":\\\"can you show the % increase for transaction_complete in the last 8 weeks\\\",\\\"tokens\\\":\\\"growth of sum [Productinfo Units] by [Eventtime] [Eventtime].weekly [Event Subevent] = \\'transaction_complete\\' [Eventtime] = \\'last 8 weeks\\'\\\"}\\n{\\\"query\\\":\\\"I want to compare Productinfo Units for this year up to today with the same period last year\\\",\\\"desc\\\":\\\"Comparing year-to-date Productinfo Units up to today for `this year` with the same period from `last year`. The `in` query filter `[Date] in ( [Date] [Date].\\'day of year\\' [Date] before [Date].\\'today\\' )` selects all dates from the beginning of the year up to today in `this year`. By using `vs` with `[Date] = \\'last year\\'`, we compare these dates with the matching period in `last year`. The phrase `same period last year` is thus calculated by filtering dates in `last year` that are in the same \\'day of year\\' range as in `this year` up to today.\\\",\\\"tokens\\\":\\\"[Productinfo Units] [Eventtime] in ( [Eventtime] [Eventtime].\\'day of year\\' [Eventtime] before [Eventtime] = \\'today\\' ) [Eventtime] = \\'this year\\' vs [Eventtime] = \\'last year\\' [Eventtime] = \\'year to date\\'\\\"}\\n{\\\"query\\\":\\\"show me the best performing Event Subevents last year in not in transaction_complete\\\",\\\"desc\\\":\\\"Since the user asked for the best performing attributes (plural form), return all sorted by measure column.\\\",\\\"tokens\\\":\\\"[Event Subevent] [Productinfo Units] sort by [Productinfo Units] descending [Eventtime] = \\'last year\\' [Event Subevent] != \\'transaction_complete\\'\\\"}\\n{\\\"query\\\":\\\"show details for transaction_complete for web\\\",\\\"desc\\\":\\\"Show related queries based on some values require to not only apply filter values, but also display relevant attribute and measure columns, based on relevance of those columns with current query.\\\",\\\"tokens\\\":\\\"[Productinfo Units] [User Shopzc] [Productinfo Utyp] [Event Subevent] = \\'transaction_complete\\' [Page Platform] = \\'web\\'\\\"}\\n{\\\"query\\\":\\\"I want to see Productinfo Units of Event Subevents, for Event Subevents that were Productinfo Units yesterday, where those same Event Subevents have not had any Productinfo Units today\\\",\\\"desc\\\":\\\"In this query, we aim to display the \\'Productinfo Units\\' of \\'Event Subevent\\'s that had recorded \\'Productinfo Units\\' **yesterday** but have **no \\'Productinfo Units\\' today**. Essentially, we\\'re identifying \\'Event Subevent\\'s where \\'Productinfo Units\\' was greater than zero yesterday and zero today.\\\",\\\"tokens\\\":\\\"[Productinfo Units] [Event Subevent] [Eventtime] = \\'today\\' vs [Eventtime] = \\'yesterday\\' [Productinfo Units ( today )] = 0 [Productinfo Units ( yesterday )] > 0\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Productinfo Units ( today )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_days ( Eventtime , today() ) = 0 } )\\\"},{\\\"name\\\":\\\"Productinfo Units ( yesterday )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_days ( Eventtime , today() ) = -1 } )\\\"}]}\\n{\\\"query\\\":\\\"show this year\\'s transaction_complete, web Productinfo Units compare to last year along with percentage change\\\",\\\"desc\\\":\\\"In this query, we are comparing \\'Productinfo Units\\' for \\'Event Subevent\\' equal to \\'\\'transaction_complete\\'\\' and \\'Page Platform\\' equal to \\'\\'web\\'\\' between this year and last year, calculating the percentage change between the two periods. The formulas provided use \\'group_aggregate\\' to sum \\'Productinfo Units\\' for both years while applying the necessary filters for the specified attributes and dates. Specifically, \\'Productinfo Units this year\\' sums \\'Productinfo Units\\' where \\'Eventtime\\' is in the current year (\\'diff_years(Eventtime, today()) = 0\\'), and \\'Productinfo Units last year\\' sums it where \\'Eventtime\\' is in the previous year (\\'diff_years(Eventtime, today()) = -1\\'). The \\'percentage change\\' is then calculated by subtracting last year\\'s \\'Productinfo Units\\' from this year\\'s, dividing by last year\\'s \\'Productinfo Units\\', and multiplying by 100. These formulas match the query accurately, as they correctly compute the sums for each year and calculate the percentage change, fulfilling the query\\'s requirements.\\\",\\\"tokens\\\":\\\"[Event Subevent] = \\'transaction_complete\\' [Page Platform] = \\'web\\' [Productinfo Units] [Eventtime] = \\'this year\\' vs [Eventtime] = \\'last year\\' [percentage change]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Productinfo Units this year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_years ( Eventtime, today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Productinfo Units last year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Productinfo Units ) , query_groups ( ) , query_filters ( ) + { diff_years ( Eventtime, today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"percentage change\\\",\\\"expression\\\":\\\"( Productinfo Units this year - Productinfo Units last year ) / Productinfo Units last year * 100\\\"}]}\\n\\'\\'\\'\\n\\nBelow are exact value matches found from the current user query that can be used directly in final tokens result, if relevant:\\n[{\\\"phrase\\\":\\\"[User Shopzc] = \\'id\\'\\\"}, {\\\"phrase\\\":\\\"[Productinfo Utyp] = \\'count\\'\\\"}, {\\\"phrase\\\":\\\"[User Loctck] = \\'id\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss1] = \\'id\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss1] = \\'count\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss1] = \\'session\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss1] = \\'\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss2] = \\'id\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss3] = \\'id\\'\\\"}, {\\\"phrase\\\":\\\"[Page Ss3] = \\'show\\'\\\"}, {\\\"phrase\\\":\\\"[Pagefilter Filtyp] = \\'count\\'\\\"}, {\\\"phrase\\\":\\\"[Modal Action] = \\'\\'\\\"}]\\nIMPORTANT: Column names below separated by comma (,) co-occur with each other and form a use-case/group. When trying to select column names relevant for current user query, prefer the co-occurring/neighboring columns for answering the question. Columns from across the groups are not generally used together.\\n\\nGroup 0 Event Id,Event Subevent,Eventtime,Page Platform\\n\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: - If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI.\\n\\nThe response should be well-formatted JSON as shown below:\\n{ \\\"reasoning\\\": {\\\"assumptions\\\":\\\"\\\"}, \\\"tokens\\\": \\\"\\\", \\\"formulas\\\":[{\\\"name\\\":\\\"\\\", \\\"expression\\\":\\\"\\\"}]}\\nEnsure the assumptions is short & concise.\\nQuestion: show me the count of unique session id for yesterday\"\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "23516a79ec2bff8b", "flags": 1, "operationName": "complete", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "65c816e56f99beaa"}], "startTime": 1735684541929000, "duration": 1996731, "tags": [{"key": "component", "type": "string", "value": "eureka-llm-gateway"}, {"key": "pod.name", "type": "string", "value": "eureka-llmgateway-75fccffb49-8r6fn"}, {"key": "x.request.id", "type": "string", "value": "665a37a4-5ea6-49f2-b22b-e7e74892b4fd"}, {"key": "self.ip", "type": "string", "value": "eureka-llmgateway-75fccffb49-8r6fn/10.252.242.171"}, {"key": "client.name", "type": "string", "value": "eureka-searcher"}, {"key": "tenant.id", "type": "string", "value": "17510819-5784-11ee-8f97-3da98"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684543925000, "fields": [{"key": "event.log", "type": "string", "value": "Completions response = completions {\n  id: \"chatcmpl-Akf7uKh7umHFbo44tEVjKtOO2f8mz\"\n  created: 1735684542\n  choices {\n    text: \"{\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The query is asking for the count of unique session IDs for the date \\'yesterday\\'.\\\"\\n  },\\n  \\\"tokens\\\": \\\"unique count [User Sessionid] [Eventtime] = \\'yesterday\\'\\\",\\n  \\\"formulas\\\": []\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 63\n    prompt_tokens: 10122\n    total_tokens: 10185\n  }\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "676dfa42ffc5be40", "flags": 1, "operationName": "get", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "fe8a0d4d41a6c964"}], "startTime": 1735684541931000, "duration": 1218, "tags": [{"key": "cacheHit", "type": "string", "value": "false"}, {"key": "get.key", "type": "string", "value": "eureka-gpt-4o--612500773"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=fe8a0d4d41a6c964; skipping clock skew adjustment"]}, {"traceID": "2967e2693391fff7", "spanID": "e22fe692fe26d3df", "flags": 1, "operationName": "chatCompletion", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "fe8a0d4d41a6c964"}], "startTime": 1735684541937000, "duration": 1985858, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=fe8a0d4d41a6c964; skipping clock skew adjustment"]}, {"traceID": "2967e2693391fff7", "spanID": "6530cfff9f4d7e87", "flags": 1, "operationName": "put", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "fe8a0d4d41a6c964"}], "startTime": 1735684543923000, "duration": 1330, "tags": [{"key": "put.key", "type": "string", "value": "eureka-gpt-4o--612500773"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=fe8a0d4d41a6c964; skipping clock skew adjustment"]}, {"traceID": "2967e2693391fff7", "spanID": "48d42257c84e83d9", "flags": 1, "operationName": "TMLPostProcessor.process", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "7f38f48dac6454f3"}], "startTime": 1735684543926000, "duration": 869, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684543927000, "fields": [{"key": "event.log", "type": "string", "value": "Post processed tokens: unique count [User Sessionid] [Eventtime] = 'yesterday'"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "7f38f48dac6454f3", "flags": 1, "operationName": "getResultFromTML", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "1ed8291742bf1790"}], "startTime": 1735684543926000, "duration": 1000, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684543926000, "fields": [{"key": "event.log", "type": "string", "value": "Using TML translation directly: tokens: \"unique count [User Sessionid] [Eventtime] = \\'yesterday\\'\"\nreasoning {\n  assumptions: \"The query is asking for the count of unique session IDs for the date \\'yesterday\\'.\"\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "8189c8eaae85b8ab", "flags": 1, "operationName": "translateTokens", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "48d42257c84e83d9"}], "startTime": 1735684543927000, "duration": 12, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "b5219c3c1faaf255", "flags": 1, "operationName": "updateSearchHistoryRepository", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "616a0206148fa131"}], "startTime": 1735684543935000, "duration": 17916, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "58615ab683ce6acf", "flags": 1, "operationName": "hasIndex", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "9bb1ca23dfa29f9e"}], "startTime": 1735684543935000, "duration": 3934, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "743e3f3aaee04738", "flags": 1, "operationName": "populateConvAssistDebugInfo", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "16319863bc0182f6"}], "startTime": 1735684543935000, "duration": 39, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "9bb1ca23dfa29f9e", "flags": 1, "operationName": "createIndex", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "b5219c3c1faaf255"}], "startTime": 1735684543935000, "duration": 7889, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "616a0206148fa131", "flags": 1, "operationName": "updateSearchHistoryRepositoryAsync", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "23de6ca7d31d90e8"}], "startTime": 1735684543935000, "duration": 18026, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "x.request.id", "type": "string", "value": "665a37a4-5ea6-49f2-b22b-e7e74892b4fd"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx/10.252.242.59"}, {"key": "tenant.id", "type": "string", "value": "17510819-5784-11ee-8f97-3da98"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "032e39bf6a4512d0", "flags": 1, "operationName": "updateDefaultIngestPipeline", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "9bb1ca23dfa29f9e"}], "startTime": 1735684543939000, "duration": 3670, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "5ec38c8c72a8b1f2", "flags": 1, "operationName": "others.others.getExistingDocument.get", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "b339b8d09a6da78a"}], "startTime": 1735684543943000, "duration": 3247, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "b339b8d09a6da78a", "flags": 1, "operationName": "getExistingDocument", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "b5219c3c1faaf255"}], "startTime": 1735684543943000, "duration": 3402, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "b2a6868a5dee10e3", "flags": 1, "operationName": "_update_conversation_save", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "c2cb7b9c8a74ec35"}], "startTime": 1735684543944758, "duration": 16612, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "d8fc1ca696b3acee", "flags": 1, "operationName": "add_conv", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "b2a6868a5dee10e3"}], "startTime": 1735684543958763, "duration": 2565, "tags": [{"key": "conv.id", "type": "string", "value": "855a4cb9-a51a-44d3-a490-1b96ba3bf30c"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "f376e16be43534ff", "flags": 1, "operationName": "handleGraphQl.serialize", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "f07db507197f397e"}], "startTime": 1735684544043000, "duration": 473, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "36d1ffc71779cfe0", "flags": 1, "operationName": "getFilteredResponse", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "2967e2693391fff7"}], "startTime": 1735684544079000, "duration": 408513, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "413bf0734bf2aa5a", "flags": 1, "operationName": "StringFilterHeuristic.apply", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "36d1ffc71779cfe0"}], "startTime": 1735684544080000, "duration": 313479, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "919236ea324d171b", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "413bf0734bf2aa5a"}], "startTime": 1735684544082000, "duration": 311558, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "85f9dfcfeeac4799", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "0e858977c89e87bf"}], "startTime": 1735684544358000, "duration": 924, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-6c45fc5c8b-zrpcz"}, {"key": "x.request.id", "type": "string", "value": "143c5d2f4aa1feba14a79026d793d3bd"}, {"key": "user.id", "type": "string", "value": ""}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-6c45fc5c8b-zrpcz/10.252.243.44"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "0e858977c89e87bf", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "919236ea324d171b"}], "startTime": 1735684544358000, "duration": 1399, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.metadata.MetadataService/applyValueHeuristic"}, {"key": "peer.address", "type": "string", "value": "10.252.240.87:60738"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "617ed096d4d25294", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "85f9dfcfeeac4799"}], "startTime": 1735684544358000, "duration": 722, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-6c45fc5c8b-zrpcz"}, {"key": "x.request.id", "type": "string", "value": "665a37a4-5ea6-49f2-b22b-e7e74892b4fd"}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-6c45fc5c8b-zrpcz/10.252.243.44"}, {"key": "x.tenant.id", "type": "string", "value": "17510819-5784-11ee-8f97-3da98"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684544359000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic request: (unique count [User Sessionid] [Eventtime] = 'yesterday',[])"}]}, {"timestamp": 1735684544359000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic response: query: \"unique count [User Sessionid] [Eventtime] = \\'yesterday\\'\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "2960c2238faaa547", "flags": 1, "operationName": "applyFilterHeuristics", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "617ed096d4d25294"}], "startTime": 1735684544359000, "duration": 232, "tags": [{"key": "query.updated", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735684544359000, "fields": [{"key": "event.log", "type": "string", "value": "ValueHeuristicsResponse query: \"unique count [User Sessionid] [Eventtime] = \\'yesterday\\'\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "2967e2693391fff7", "spanID": "6187506e68271906", "flags": 1, "operationName": "sanitizeTMLQuery", "references": [{"refType": "CHILD_OF", "traceID": "2967e2693391fff7", "spanID": "36d1ffc71779cfe0"}], "startTime": 1735684544404000, "duration": 52216, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735684544404000, "fields": [{"key": "event.log", "type": "string", "value": "TML query Before Sanitization: [unique count [User Sessionid] [Eventtime] = 'yesterday']"}]}, {"timestamp": 1735684544456000, "fields": [{"key": "event.log", "type": "string", "value": "TML query After Sanitization: [unique count [User Sessionid] [Eventtime] = 'yesterday']"}]}], "processID": "p1", "warnings": null}], "processes": {"p1": {"serviceName": "eureka-agent", "tags": [{"key": "hostname", "type": "string", "value": "ip-10-228-190-8.us-west-2.compute.internal"}, {"key": "ip", "type": "string", "value": "10.228.190.8"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p2": {"serviceName": "eureka-graphql", "tags": [{"key": "hostname", "type": "string", "value": "eureka-graphql-57db89b787-lklsd"}, {"key": "ip", "type": "string", "value": "10.252.242.28"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p3": {"serviceName": "convassist", "tags": [{"key": "hostname", "type": "string", "value": "convassist-6c6ccb4d4c-zt75z"}, {"key": "ip", "type": "string", "value": "10.252.242.11"}, {"key": "jaeger.version", "type": "string", "value": "Python-4.8.0"}]}, "p4": {"serviceName": "eureka-searcher", "tags": [{"key": "hostname", "type": "string", "value": "eureka-searcher-56995744c8-q9xzx"}, {"key": "ip", "type": "string", "value": "10.252.242.59"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p5": {"serviceName": "eureka-llm-gateway", "tags": [{"key": "hostname", "type": "string", "value": "eureka-llmgateway-75fccffb49-8r6fn"}, {"key": "ip", "type": "string", "value": "10.252.242.171"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p6": {"serviceName": "eureka-metadata-service", "tags": [{"key": "hostname", "type": "string", "value": "eureka-metadata-6c45fc5c8b-zrpcz"}, {"key": "ip", "type": "string", "value": "10.252.243.44"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}}, "warnings": null}], "total": 0, "limit": 0, "offset": 0, "errors": null}