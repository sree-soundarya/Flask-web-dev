{"data": [{"traceID": "325b2c3981548556", "spans": [{"traceID": "325b2c3981548556", "spanID": "325b2c3981548556", "flags": 1, "operationName": "Agent.graphQLHandler", "references": [], "startTime": 1735845985449978, "duration": 5120676, "tags": [{"key": "component", "type": "string", "value": "eureka-agent"}, {"key": "x.request.id", "type": "string", "value": "c7177405-06bd-4bac-ba6d-593c64cfe0bf"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "sampler.type", "type": "string", "value": "const"}, {"key": "sampler.param", "type": "bool", "value": true}, {"key": "org.id", "type": "string", "value": "33363357"}, {"key": "self.ip", "type": "string", "value": "ip-10-254-128-10.ec2.internal/10.254.128.10"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985451776, "fields": [{"key": "event.log", "type": "string", "value": "Explicitly adding org admin group 61a00200-8e6f-4517-9564-79a3d86a1456 for user 00000844-4d3c-81bc-877f-b1179c5153f5 in permissions as user is org admin"}]}], "processID": "p1", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "37cc4d322a0b2f8c", "flags": 1, "operationName": "handleGraphQLReqEnrichment", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "325b2c3981548556"}], "startTime": 1735845985451847, "duration": 99947, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985451855, "fields": [{"key": "event.log", "type": "string", "value": "Enriching message class com.thoughtspot.convassist.SendMessageRequest"}]}, {"timestamp": 1735845985452220, "fields": [{"key": "event.log", "type": "string", "value": "Enriching SendMessageRequest"}]}, {"timestamp": 1735845985452252, "fields": [{"key": "event.log", "type": "string", "value": "SendMessageRequest: conv_id: \"3b79dc52-1c2d-4020-ba34-6e1e16bb6010\"\nmsg {\n  msg_id: \"0264b99f-6994-46c7-ac4e-a60174065878\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"total closed won opps in 2024\"\n      nls_data {\n        worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      }\n    }\n  }\n}\n"}]}, {"timestamp": 1735845985452363, "fields": [{"key": "event.log", "type": "string", "value": "Enriching USER_COMMAND message payload"}]}, {"timestamp": 1735845985551463, "fields": [{"key": "event.log", "type": "string", "value": "Returning SendMessageReq conv_id: \"3b79dc52-1c2d-4020-ba34-6e1e16bb6010\"\nmsg {\n  msg_id: \"0264b99f-6994-46c7-ac4e-a60174065878\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"total closed won opps in 2024\"\n      nls_data {\n        query_hypothesis_columns {\n          column_name: \"Closedate\"\n          sample_values: \"2024\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"2024\"\n          guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n          sample_value_to_recognized_token {\n            key: \"2024\"\n            value {\n              token: \"2024\"\n              type_enum: VALUE\n              data_type: DATE\n              match_type: EXACT\n              guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n              join_path {\n                root_table {\n                  guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                  name: \"TSEMBED\"\n                }\n                leaf_table {\n                  guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                  name: \"TSEMBED\"\n                }\n              }\n              token_metadata {\n                name: \"Closedate\"\n                table {\n                  guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                  name: \"TSEMBED\"\n                }\n                root_tables {\n                  guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                  name: \"TSEMBED\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.5357142857142857\n              can_be_extended: false\n              client_state {\n                original_token: \"2024\"\n              }\n              date_filter {\n                type: YEAR_ONLY\n                op: EQ\n                year_name: \"2024\"\n              }\n              re_resolve: true\n              canonical_form: \"2024\"\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"Account Createddate\"\n          sample_values: \"2024\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"2024\"\n          guid: \"d70acc35-030b-4a0f-942a-aa9d01b8d5d5\"\n          sample_value_to_recognized_token {\n            key: \"2024\"\n            value {\n              token: \"2024\"\n              type_enum: VALUE\n              data_type: DATE\n              match_type: EXACT\n              guid: \"d70acc35-030b-4a0f-942a-aa9d01b8d5d5\"\n              token_metadata {\n                name: \"Account Createddate\"\n                table {\n                  guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                  name: \"TSEMBED\"\n                }\n                root_tables {\n                  guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                  name: \"TSEMBED\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.5357142857142857\n              can_be_extended: false\n              client_state {\n                original_token: \"2024\"\n              }\n              date_filter {\n                type: YEAR_ONLY\n                op: EQ\n                year_name: \"2024\"\n              }\n              re_resolve: true\n              canonical_form: \"2024\"\n              is_cohort: false\n            }\n          }\n        }\n        query_hypothesis_columns {\n          column_name: \"Createddate\"\n          sample_values: \"2024\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"2024\"\n          guid: \"ccca8f82-83a5-4e06-a409-a946ce1b98ca\"\n          sample_value_to_recognized_token {\n            key: \"2024\"\n            value {\n              token: \"2024\"\n              type_enum: VALUE\n              data_type: DATE\n              match_type: EXACT\n              guid: \"ccca8f82-83a5-4e06-a409-a946ce1b98ca\"\n              token_metadata {\n                name: \"Createddate\"\n                table {\n                  guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                  name: \"TSEMBED\"\n                }\n                root_tables {\n                  guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                  name: \"TSEMBED\"\n                }\n                is_formula: false\n              }\n              value_match: false\n              ranking_score: 0.5357142857142857\n              can_be_extended: false\n              client_state {\n                original_token: \"2024\"\n              }\n              date_filter {\n                type: YEAR_ONLY\n                op: EQ\n                year_name: \"2024\"\n              }\n              re_resolve: true\n              canonical_form: \"2024\"\n              is_cohort: false\n            }\n          }\n        }\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: 1444047642\n        permission_guids: -1564398878\n        permission_guids: 1467743907\n        permission_guids: -1585248667\n        permission_guids: -1564398878\n        non_sharable: false\n        worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      }\n    }\n  }\n}\n"}]}], "processID": "p1", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "095d7e46ab017438", "flags": 1, "operationName": "getResponseBodyFromCloud", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "325b2c3981548556"}], "startTime": 1735845985551953, "duration": 4490508, "tags": [{"key": "proxy.eurekaCloudApiLatency", "type": "string", "value": "4490"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "b20829f003c4d731", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "095d7e46ab017438"}], "startTime": 1735845985552268, "duration": 4489876, "tags": [{"key": "component", "type": "string", "value": "apache-httpclient"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "d65d8474aa14aa8a", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "b20829f003c4d731"}], "startTime": 1735845985552274, "duration": 4489753, "tags": [{"key": "http.status_code", "type": "int64", "value": 200}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "http.url", "type": "string", "value": "https://eureka.thoughtspotstaging.cloud/graphql"}, {"key": "peer.hostname", "type": "string", "value": "eureka.thoughtspotstaging.cloud"}, {"key": "peer.port", "type": "int64", "value": 443}, {"key": "http.method", "type": "string", "value": "POST"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "454002ed52081580", "flags": 1, "operationName": "handleGraphQl", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "3668d4c2ad41cf48"}], "startTime": 1735845985775000, "duration": 4236208, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "x.request.id", "type": "string", "value": "c7177405-06bd-4bac-ba6d-593c64cfe0bf"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "x.thought.spot.orgs", "type": "string", "value": "33363357"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4/10.252.225.72"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "3668d4c2ad41cf48", "flags": 1, "operationName": "handle", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "d65d8474aa14aa8a"}], "startTime": 1735845985775000, "duration": 4236340, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "x.request.id", "type": "string", "value": "c7177405-06bd-4bac-ba6d-593c64cfe0bf"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4/10.252.225.72"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "a5bc4d6e94383da1", "flags": 1, "operationName": "convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "454002ed52081580"}], "startTime": 1735845985779000, "duration": 4230674, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "5601abb3147307ae", "flags": 1, "operationName": "/convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "d65d8474aa14aa8a"}], "startTime": 1735845985788356, "duration": 4221189, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "peer.ipv4", "type": "string", "value": "10.252.225.72"}, {"key": "peer.port", "type": "string", "value": "33414"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845985788414, "fields": [{"key": "request", "type": "string", "value": "conv_id: \"3b79dc52-1c2d-4020-ba34-6e1e16bb6010\"\nmsg {\n  msg_id: \"0264b99f-6994-46c7-ac4e-a60174065878\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"total closed won opps in 2024\"\n      nls_data {\n        query_hypothesis_columns {\n          guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n          column_name: \"Closedate\"\n          sample_values: \"2024\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"2024\"\n          sample_value_to_recognized_token {\n            key: \"2024\"\n            value {\n              token: \"2024\"\n              canonical_form: \"2024\"\n              type_enum: VALUE\n              data_type: DATE\n              match_type: EXACT\n              guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n              date_filter {\n                type: YEAR_ONLY\n                year_name: \"2024\"\n                op: EQ\n              }\n              join_path {\n                root_table {\n                  guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n         "}]}, {"timestamp": 1735845990009460, "fields": [{"key": "response", "type": "string", "value": "responses {\n  msg_id: \"a2413b68-7109-4024-90c0-d02838406f0c\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          tokens: \"count of closed won opps Isclosed = \\'1\\' Iswon = \\'1\\' Closedate = \\'2024\\'\"\n          title: \"\"\n          tml_tokens: \"[count of closed won opps] [Isclosed] = \\'1\\' [Iswon] = \\'1\\' [Closedate] = \\'2024\\'\"\n          cached: false\n          sql_query: \"\"\n          formula_info {\n            name: \"count of closed won opps\"\n            expression: \"count ( id )\"\n          }\n          visualization_suggestion {\n            display_mode: UNDEFINED\n            chart_type: NONE\n            users_viz_intent_applied: false\n          }\n          is_partial: false\n          ambiguous_phrases {\n            token {\n              token: \"1\"\n              type_enum: VALUE\n              guid: \"39012fb3-5df9-44e3-a0d7-739c981cde07\"\n              token_metadata "}]}], "processID": "p3", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "70e640a5c6c48406", "flags": 1, "operationName": "SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "5601abb3147307ae"}], "startTime": 1735845985788569, "duration": 4220822, "tags": [{"key": "x.request.id", "type": "string", "value": "c7177405-06bd-4bac-ba6d-593c64cfe0bf"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "org.id", "type": "string", "value": "33363357"}, {"key": "locale", "type": "string", "value": "en-us"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845985791138, "fields": [{"key": "event", "type": "string", "value": "User Query"}, {"key": "value", "type": "string", "value": "User Query: total closed won opps in 2024"}]}], "processID": "p3", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "efcce18d89f26af3", "flags": 1, "operationName": "get_conv", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "70e640a5c6c48406"}], "startTime": 1735845985789588, "duration": 970, "tags": [{"key": "conv.id", "type": "string", "value": "3b79dc52-1c2d-4020-ba34-6e1e16bb6010"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "dbcd55b016747dc3", "flags": 1, "operationName": "find_tool", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "70e640a5c6c48406"}], "startTime": 1735845985791218, "duration": 270, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845985791459, "fields": [{"key": "event", "type": "string", "value": "Find Tool is not enabled. Returning NLSTool."}]}], "processID": "p3", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "841279c7eb5407ab", "flags": 1, "operationName": "_get_tool_response", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "70e640a5c6c48406"}], "startTime": 1735845985791559, "duration": 4136936, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "5843bf4233b7ca09", "flags": 1, "operationName": "get_response_from_nls", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "841279c7eb5407ab"}], "startTime": 1735845985791834, "duration": 4136636, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "0f28930dea08b9cf", "flags": 1, "operationName": "get_response_latest", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "5843bf4233b7ca09"}], "startTime": 1735845985794157, "duration": 4134236, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "aaeeb9da6cac597c", "flags": 1, "operationName": "/eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "0f28930dea08b9cf"}], "startTime": 1735845985794605, "duration": 4131908, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845985794652, "fields": [{"key": "request", "type": "string", "value": "msg_payload {\n  msg_id: \"0264b99f-6994-46c7-ac4e-a60174065878\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"total closed won opps in 2024\"\n      nls_data {\n        query_hypothesis_columns {\n          guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n          column_name: \"Closedate\"\n          sample_values: \"2024\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"2024\"\n          sample_value_to_recognized_token {\n            key: \"2024\"\n            value {\n              token: \"2024\"\n              canonical_form: \"2024\"\n              type_enum: VALUE\n              data_type: DATE\n              match_type: EXACT\n              guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n              date_filter {\n                type: YEAR_ONLY\n                year_name: \"2024\"\n                op: EQ\n              }\n              join_path {\n                root_table {\n                  guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                  name: \"TSEMBED\"\n               "}]}, {"timestamp": 1735845989926319, "fields": [{"key": "response", "type": "string", "value": "tool: TS_NLS\nmessages {\n  msg_id: \"a2413b68-7109-4024-90c0-d02838406f0c\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          tokens: \"count of closed won opps Isclosed = \\'1\\' Iswon = \\'1\\' Closedate = \\'2024\\'\"\n          title: \"\"\n          tml_tokens: \"[count of closed won opps] [Isclosed] = \\'1\\' [Iswon] = \\'1\\' [Closedate] = \\'2024\\'\"\n          cached: false\n          sql_query: \"\"\n          formula_info {\n            name: \"count of closed won opps\"\n            expression: \"count ( id )\"\n          }\n          visualization_suggestion {\n            display_mode: UNDEFINED\n            chart_type: NONE\n            users_viz_intent_applied: false\n          }\n          is_partial: false\n          ambiguous_phrases {\n            token {\n              token: \"1\"\n              type_enum: VALUE\n              guid: \"39012fb3-5df9-44e3-a0d7-739c981cde07\"\n              tok"}]}], "processID": "p3", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "cc9788014e1a305e", "flags": 1, "operationName": "eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "aaeeb9da6cac597c"}], "startTime": 1735845985804000, "duration": 4121454, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.EurekaGrpcService/ConvAssistNLSearch"}, {"key": "peer.address", "type": "string", "value": "10.252.225.166:47434"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "beeb0351b1cf2c8f", "flags": 1, "operationName": "createIndex", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "e360766b021977fc"}], "startTime": 1735845985805000, "duration": 105793, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "e360766b021977fc", "flags": 1, "operationName": "NLInstructionsHandler.createIndex", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "398907b526ec967f"}], "startTime": 1735845985805000, "duration": 105945, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "398907b526ec967f", "flags": 1, "operationName": "convAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "cc9788014e1a305e"}], "startTime": 1735845985805000, "duration": 4120741, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "c7177405-06bd-4bac-ba6d-593c64cfe0bf"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "6e3c92cee5a7cee6", "flags": 1, "operationName": "hasIndex", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "beeb0351b1cf2c8f"}], "startTime": 1735845985805000, "duration": 100806, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "221ce60be5e49277", "flags": 1, "operationName": "updateDefaultIngestPipeline", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "beeb0351b1cf2c8f"}], "startTime": 1735845985906000, "duration": 4352, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "07cc83b1323b7227", "flags": 1, "operationName": "getConvAssistResult", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "398907b526ec967f"}], "startTime": 1735845985912000, "duration": 4011828, "tags": [{"key": "user.command", "type": "string", "value": "total closed won opps in 2024"}, {"key": "_debugInfo.eureka.ConvAssistDebugInfo", "type": "string", "value": "{\n  \"tenantId\": \"fa794c92-1470-11ee-8c81-cbe72\",\n  \"userId\": \"00000844-4d3c-81bc-877f-b1179c5153f5\",\n  \"userName\": \"\",\n  \"convId\": \"3b79dc52-1c2d-4020-ba34-6e1e16bb6010\",\n  \"userMsgId\": \"0264b99f-6994-46c7-ac4e-a60174065878\",\n  \"datasourceId\": \"5f92ed57-6310-43c7-9184-7acb9e57829c\",\n  \"userQuery\": \"total closed won opps in 2024\",\n  \"generatedTmlTokens\": \"[count of closed won opps] [Isclosed] \\u003d \\u00271\\u0027 [Iswon] \\u003d \\u00271\\u0027 [Closedate] \\u003d \\u00272024\\u0027\",\n  \"generatedSql\": \"\",\n  \"userFeedback\": \"NEUTRAL\",\n  \"timestamp\": \"1735845989923\",\n  \"orgId\": \"33363357\",\n  \"requestId\": \"c7177405-06bd-4bac-ba6d-593c64cfe0bf\",\n  \"userMessageCount\": \"1\",\n  \"datasourceName\": \"TSEMBED\",\n  \"asstMsgId\": \"a2413b68-7109-4024-90c0-d02838406f0c\"\n}"}, {"key": "query.id", "type": "string", "value": ""}, {"key": "query", "type": "string", "value": "total closed won opps in 2024"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "0767db2b927d0da5", "flags": 1, "operationName": "getNLSResults", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "07cc83b1323b7227"}], "startTime": 1735845985915000, "duration": 4008071, "tags": [{"key": "empty_nl_query", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985915000, "fields": [{"key": "event.log", "type": "string", "value": "Number of worksheet columns = 45"}]}, {"timestamp": 1735845985915000, "fields": [{"key": "event.log", "type": "string", "value": "clientRequest = ctx {\n  init_ctx {\n    worksheet {\n      worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      worksheet_name: \"TSEMBED\"\n      column_details {\n        column_name: \"Account Name\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"5f26ac42-582b-4f09-84ad-c42ea7f2b791\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"dca81639-647e-4fb4-b6af-27d1c0d7aa8b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Account Createddate\"\n        data_type: DATE\n        sample_values: \"2024\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"2024\"\n        guid: \"d70acc35-030b-4a0f-942a-aa9d01b8d5d5\"\n        sample_value_to_recognized_token {\n          key: \"2024\"\n          value {\n            token: \"2024\"\n            type_enum: VALUE\n            data_type: DATE\n            match_type: EXACT\n            guid: \"d70acc35-030b-4a0f-942a-aa9d01b8d5d5\"\n            token_metadata {\n              name: \"Account Createddate\"\n              table {\n                guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                name: \"TSEMBED\"\n              }\n              root_tables {\n                guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                name: \"TSEMBED\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.5357142857142857\n            can_be_extended: false\n            client_state {\n              original_token: \"2024\"\n            }\n            date_filter {\n              type: YEAR_ONLY\n              op: EQ\n              year_name: \"2024\"\n            }\n            re_resolve: true\n            canonical_form: \"2024\"\n            is_cohort: false\n          }\n        }\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"9b9ae546-a6e0-42f6-906f-2363505a3904\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Account Type\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"21524f1c-e44a-4364-b65a-54926e5277ce\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"f5548ed5-12f3-4a9c-966d-fd8bb42f39d2\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingpostalcode\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"a1b21320-adea-4390-b24a-7462d38bf456\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"9cdab7d4-d71c-4dbb-b5ad-2b709edba8f8\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Phone\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"d33978b7-487e-4311-9637-ae3affd65976\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"0933b5bf-888c-4052-bca6-a74dd12a658c\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Website\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"0686530e-7218-4e00-99a8-19a8bf4a06f0\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"295c2f8e-2c40-470f-b1ee-1eb557199beb\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippinglongitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"fbaf4150-929a-4e76-9bc5-0ee90bc2d1cf\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"8f5737f7-45a4-41b3-850b-d13dc7719b09\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingcity\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"b9449654-bc94-4860-9d42-50d38f6fdf2f\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"f80485b7-adba-4f40-8fca-1910400ef7f9\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingpostalcode\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"0e05497f-054e-4c84-948d-89646c67042c\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"bbe29e1b-e29f-4561-8b3a-33c570d1209b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Createdbyid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"af765d93-1060-4e92-af86-9c47e7283810\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"6371710b-1718-487d-9993-5e2d050e57da\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Account Ownerid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"9c10e880-abef-4a3e-9347-a466ad5a24b2\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"9da19e76-209d-4c7b-9146-4765fead576a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Tickersymbol\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"77a233c6-0f5f-46a5-80c5-58c938c7fe26\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"34e55fa7-7f48-4b8d-b5e6-4a12941f1572\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Active C\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"49e834db-6126-4a68-aa38-1d90f1645384\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"012ecb09-66cd-47b1-b303-47709250e1e6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingcity\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"604446b1-bf48-4b78-82d8-855dac21c8d2\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"23e371d8-81e7-4c33-9ff8-e7cb7af09da4\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Accountnumber\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"848ca949-7d12-43e0-baf3-0f4dd01ad661\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"38370d07-1f32-4ebe-9bc4-58b7c14bb94a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billinglatitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"af6f7ebd-bb91-49ba-8a0c-434e8b795333\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"8b64bbb7-bf38-44f1-b118-2d11abec1ff0\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingcountry\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"69c14d6a-dab1-4950-ab06-0cf7232933a2\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"b629caf4-ef7f-4e7c-a812-f6e1716de164\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Annualrevenue\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"7e1f49f3-344a-47a9-9dd6-0a980b44d417\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"d4d3545a-3279-445e-95a8-51d6ff9cc0a0\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingstreet\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"65274e01-ab4a-47fc-8e0d-70ff5592a4d4\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"95166ea0-9ba4-4d8b-870e-7e81fa433b95\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"SF Opp Link\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"faff01d3-0476-405a-8256-af207e8b8819\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billinggeocodeaccuracy\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"38dbf124-f601-4e28-af4f-6e2efddf7595\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"1078265f-9f15-4012-b3b3-95d4aabeac6b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingcountry\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"18d7f1bd-7102-4f7e-a14c-82c61f07e203\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"514d9496-696f-43b0-bb3d-d6562dacdd4a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Numberofemployees\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"9ed653d5-74e4-4aba-931e-2d534f25434b\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"817aac67-5011-47ce-a062-99c4e6c94de2\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Parentid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"04c411f4-c986-4878-b422-f898ff785638\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"6e5aba8b-ac28-496a-80b8-1e556f72fa1d\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippinglatitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"1a2d309d-7fdd-446c-be3d-f2af32aed8a1\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"21c3d171-f7da-457f-858b-d6705be1b110\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingstreet\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"12592b79-fe4c-429d-b838-847b0a04033f\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"1b2c53f4-3b2e-4789-bca8-ef1f8b39756a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Isclosed\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"39012fb3-5df9-44e3-a0d7-739c981cde07\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"308dfb84-6244-4935-8927-282a4d1a29f6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Lastactivitydate\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"5f3a5253-1c15-4020-ba05-394da062a4b3\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"2a56b0bd-979c-4616-8029-813aba444f5b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Createddate\"\n        data_type: DATE\n        sample_values: \"2024\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"2024\"\n        guid: \"ccca8f82-83a5-4e06-a409-a946ce1b98ca\"\n        sample_value_to_recognized_token {\n          key: \"2024\"\n          value {\n            token: \"2024\"\n            type_enum: VALUE\n            data_type: DATE\n            match_type: EXACT\n            guid: \"ccca8f82-83a5-4e06-a409-a946ce1b98ca\"\n            token_metadata {\n              name: \"Createddate\"\n              table {\n                guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                name: \"TSEMBED\"\n              }\n              root_tables {\n                guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                name: \"TSEMBED\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.5357142857142857\n            can_be_extended: false\n            client_state {\n              original_token: \"2024\"\n            }\n            date_filter {\n              type: YEAR_ONLY\n              op: EQ\n              year_name: \"2024\"\n            }\n            re_resolve: true\n            canonical_form: \"2024\"\n            is_cohort: false\n          }\n        }\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"ecfd2be5-78cd-4225-93e5-aa135694d870\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Name\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"c2a5962a-fe88-433d-8dc9-901339901013\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"47fb3214-efe9-4317-84a3-59613faedf88\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Closedate\"\n        data_type: DATE\n        sample_values: \"2024\"\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"2024\"\n        guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n        sample_value_to_recognized_token {\n          key: \"2024\"\n          value {\n            token: \"2024\"\n            type_enum: VALUE\n            data_type: DATE\n            match_type: EXACT\n            guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n            join_path {\n              root_table {\n                guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                name: \"TSEMBED\"\n              }\n              leaf_table {\n                guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                name: \"TSEMBED\"\n              }\n            }\n            token_metadata {\n              name: \"Closedate\"\n              table {\n                guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                name: \"TSEMBED\"\n              }\n              root_tables {\n                guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n                name: \"TSEMBED\"\n              }\n              is_formula: false\n            }\n            value_match: false\n            ranking_score: 0.5357142857142857\n            can_be_extended: false\n            client_state {\n              original_token: \"2024\"\n            }\n            date_filter {\n              type: YEAR_ONLY\n              op: EQ\n              year_name: \"2024\"\n            }\n            re_resolve: true\n            canonical_form: \"2024\"\n            is_cohort: false\n          }\n        }\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"0ba211b9-b93e-4a31-b655-601acba160e4\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Iswon\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"cddc0149-87c3-48a7-ad34-fbd08d276667\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"b3968ab5-9558-4fc3-a9d2-fbc2b6239785\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Accountid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"061439eb-cd65-4808-a0ab-14ff9b497e88\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"b260869d-8deb-45d5-baca-aab5f99f4b5f\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Forecastcategory\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"f0a25a61-db9f-491a-bcb9-81a101203036\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"3494a4a2-0cab-44bf-8160-16300b4e283f\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Description\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"66414b98-29a7-4479-9776-7473b20420ea\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"4ef19d18-00b4-444b-a9e2-45874dbcb60d\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Amount\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"c8449fee-340f-4dfa-b790-6826089a9fd1\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a1eb1b38-f42c-4774-8795-5a3a0bbb3241\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Type\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"344c0273-d437-40b9-88a9-6694b8090e43\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a62adebf-e2a5-4020-9c1d-2174f25c32a2\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Stagename\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"4fe13431-9237-4652-ad06-78c682876d60\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"fa1a77af-689d-4a59-b249-e907a3448872\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Ownerid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"20d909cd-2a2d-477a-8cab-dce37149978a\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"5bec33ac-97d5-4ab7-973e-ba5cb77cb5c6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Expectedrevenue\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"7be227c3-88bb-48d0-a457-472b00735ba6\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"45e1c432-7cd2-478e-ac74-5fe85b7e5377\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingstate\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"d0d34b90-2ca9-4be6-aa1e-972ad5dd0d02\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"7b0eb1a6-0358-434e-b30e-bcfdaf86e1b4\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billinglongitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"4080f840-4f73-483a-9f37-88787629eff0\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"144b0a65-cb7a-4b35-9e4a-bed872e98ae6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingstate\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"56fa83a3-4a05-4733-8e61-512c1ae5d2b7\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"b9c39977-9291-476d-8747-6e8c9605f7b9\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Partneraccountid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"755ea752-bc47-4192-919f-db0e8cdc291e\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"64a6e816-e516-4fbd-be17-dae394d2760f\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Id\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"da430c99-1045-4b93-a088-93a70a017218\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n        is_group_aggregate: false\n      }\n    }\n  }\n}\nquery: \"total closed won opps in 2024\"\nnl_handler_version: LATEST\n"}]}, {"timestamp": 1735845985915000, "fields": [{"key": "event.log", "type": "string", "value": "nlHandlerVersion = LATEST"}]}, {"timestamp": 1735845985916000, "fields": [{"key": "event.log", "type": "string", "value": "worksheetFacetPayload = worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\nworksheet_name: \"TSEMBED\"\ncolumn_details {\n  column_name: \"Account Name\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"5f26ac42-582b-4f09-84ad-c42ea7f2b791\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"dca81639-647e-4fb4-b6af-27d1c0d7aa8b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Account Createddate\"\n  data_type: DATE\n  sample_values: \"2024\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"2024\"\n  guid: \"d70acc35-030b-4a0f-942a-aa9d01b8d5d5\"\n  sample_value_to_recognized_token {\n    key: \"2024\"\n    value {\n      token: \"2024\"\n      type_enum: VALUE\n      data_type: DATE\n      match_type: EXACT\n      guid: \"d70acc35-030b-4a0f-942a-aa9d01b8d5d5\"\n      token_metadata {\n        name: \"Account Createddate\"\n        table {\n          guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          name: \"TSEMBED\"\n        }\n        root_tables {\n          guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          name: \"TSEMBED\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.5357142857142857\n      can_be_extended: false\n      client_state {\n        original_token: \"2024\"\n      }\n      date_filter {\n        type: YEAR_ONLY\n        op: EQ\n        year_name: \"2024\"\n      }\n      re_resolve: true\n      canonical_form: \"2024\"\n      is_cohort: false\n    }\n  }\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"9b9ae546-a6e0-42f6-906f-2363505a3904\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Account Type\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"21524f1c-e44a-4364-b65a-54926e5277ce\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"f5548ed5-12f3-4a9c-966d-fd8bb42f39d2\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingpostalcode\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"a1b21320-adea-4390-b24a-7462d38bf456\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"9cdab7d4-d71c-4dbb-b5ad-2b709edba8f8\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Phone\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"d33978b7-487e-4311-9637-ae3affd65976\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"0933b5bf-888c-4052-bca6-a74dd12a658c\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Website\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"0686530e-7218-4e00-99a8-19a8bf4a06f0\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"295c2f8e-2c40-470f-b1ee-1eb557199beb\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippinglongitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"fbaf4150-929a-4e76-9bc5-0ee90bc2d1cf\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"8f5737f7-45a4-41b3-850b-d13dc7719b09\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingcity\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"b9449654-bc94-4860-9d42-50d38f6fdf2f\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"f80485b7-adba-4f40-8fca-1910400ef7f9\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingpostalcode\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"0e05497f-054e-4c84-948d-89646c67042c\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"bbe29e1b-e29f-4561-8b3a-33c570d1209b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Createdbyid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"af765d93-1060-4e92-af86-9c47e7283810\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"6371710b-1718-487d-9993-5e2d050e57da\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Account Ownerid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"9c10e880-abef-4a3e-9347-a466ad5a24b2\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"9da19e76-209d-4c7b-9146-4765fead576a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Tickersymbol\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"77a233c6-0f5f-46a5-80c5-58c938c7fe26\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"34e55fa7-7f48-4b8d-b5e6-4a12941f1572\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Active C\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"49e834db-6126-4a68-aa38-1d90f1645384\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"012ecb09-66cd-47b1-b303-47709250e1e6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingcity\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"604446b1-bf48-4b78-82d8-855dac21c8d2\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"23e371d8-81e7-4c33-9ff8-e7cb7af09da4\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Accountnumber\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"848ca949-7d12-43e0-baf3-0f4dd01ad661\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"38370d07-1f32-4ebe-9bc4-58b7c14bb94a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billinglatitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"af6f7ebd-bb91-49ba-8a0c-434e8b795333\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"8b64bbb7-bf38-44f1-b118-2d11abec1ff0\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingcountry\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"69c14d6a-dab1-4950-ab06-0cf7232933a2\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"b629caf4-ef7f-4e7c-a812-f6e1716de164\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Annualrevenue\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"7e1f49f3-344a-47a9-9dd6-0a980b44d417\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"d4d3545a-3279-445e-95a8-51d6ff9cc0a0\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingstreet\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"65274e01-ab4a-47fc-8e0d-70ff5592a4d4\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"95166ea0-9ba4-4d8b-870e-7e81fa433b95\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"SF Opp Link\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"faff01d3-0476-405a-8256-af207e8b8819\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billinggeocodeaccuracy\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"38dbf124-f601-4e28-af4f-6e2efddf7595\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"1078265f-9f15-4012-b3b3-95d4aabeac6b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingcountry\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"18d7f1bd-7102-4f7e-a14c-82c61f07e203\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"514d9496-696f-43b0-bb3d-d6562dacdd4a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Numberofemployees\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"9ed653d5-74e4-4aba-931e-2d534f25434b\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"817aac67-5011-47ce-a062-99c4e6c94de2\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Parentid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"04c411f4-c986-4878-b422-f898ff785638\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"6e5aba8b-ac28-496a-80b8-1e556f72fa1d\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippinglatitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"1a2d309d-7fdd-446c-be3d-f2af32aed8a1\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"21c3d171-f7da-457f-858b-d6705be1b110\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingstreet\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"12592b79-fe4c-429d-b838-847b0a04033f\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"1b2c53f4-3b2e-4789-bca8-ef1f8b39756a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Isclosed\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"39012fb3-5df9-44e3-a0d7-739c981cde07\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"308dfb84-6244-4935-8927-282a4d1a29f6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Lastactivitydate\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"5f3a5253-1c15-4020-ba05-394da062a4b3\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"2a56b0bd-979c-4616-8029-813aba444f5b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Createddate\"\n  data_type: DATE\n  sample_values: \"2024\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"2024\"\n  guid: \"ccca8f82-83a5-4e06-a409-a946ce1b98ca\"\n  sample_value_to_recognized_token {\n    key: \"2024\"\n    value {\n      token: \"2024\"\n      type_enum: VALUE\n      data_type: DATE\n      match_type: EXACT\n      guid: \"ccca8f82-83a5-4e06-a409-a946ce1b98ca\"\n      token_metadata {\n        name: \"Createddate\"\n        table {\n          guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          name: \"TSEMBED\"\n        }\n        root_tables {\n          guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          name: \"TSEMBED\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.5357142857142857\n      can_be_extended: false\n      client_state {\n        original_token: \"2024\"\n      }\n      date_filter {\n        type: YEAR_ONLY\n        op: EQ\n        year_name: \"2024\"\n      }\n      re_resolve: true\n      canonical_form: \"2024\"\n      is_cohort: false\n    }\n  }\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"ecfd2be5-78cd-4225-93e5-aa135694d870\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Name\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"c2a5962a-fe88-433d-8dc9-901339901013\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"47fb3214-efe9-4317-84a3-59613faedf88\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Closedate\"\n  data_type: DATE\n  sample_values: \"2024\"\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"2024\"\n  guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n  sample_value_to_recognized_token {\n    key: \"2024\"\n    value {\n      token: \"2024\"\n      type_enum: VALUE\n      data_type: DATE\n      match_type: EXACT\n      guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n      join_path {\n        root_table {\n          guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          name: \"TSEMBED\"\n        }\n        leaf_table {\n          guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          name: \"TSEMBED\"\n        }\n      }\n      token_metadata {\n        name: \"Closedate\"\n        table {\n          guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          name: \"TSEMBED\"\n        }\n        root_tables {\n          guid: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          name: \"TSEMBED\"\n        }\n        is_formula: false\n      }\n      value_match: false\n      ranking_score: 0.5357142857142857\n      can_be_extended: false\n      client_state {\n        original_token: \"2024\"\n      }\n      date_filter {\n        type: YEAR_ONLY\n        op: EQ\n        year_name: \"2024\"\n      }\n      re_resolve: true\n      canonical_form: \"2024\"\n      is_cohort: false\n    }\n  }\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"0ba211b9-b93e-4a31-b655-601acba160e4\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Iswon\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"cddc0149-87c3-48a7-ad34-fbd08d276667\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"b3968ab5-9558-4fc3-a9d2-fbc2b6239785\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Accountid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"061439eb-cd65-4808-a0ab-14ff9b497e88\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"b260869d-8deb-45d5-baca-aab5f99f4b5f\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Forecastcategory\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"f0a25a61-db9f-491a-bcb9-81a101203036\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"3494a4a2-0cab-44bf-8160-16300b4e283f\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Description\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"66414b98-29a7-4479-9776-7473b20420ea\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"4ef19d18-00b4-444b-a9e2-45874dbcb60d\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Amount\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"c8449fee-340f-4dfa-b790-6826089a9fd1\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a1eb1b38-f42c-4774-8795-5a3a0bbb3241\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Type\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"344c0273-d437-40b9-88a9-6694b8090e43\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a62adebf-e2a5-4020-9c1d-2174f25c32a2\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Stagename\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"4fe13431-9237-4652-ad06-78c682876d60\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"fa1a77af-689d-4a59-b249-e907a3448872\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Ownerid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"20d909cd-2a2d-477a-8cab-dce37149978a\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"5bec33ac-97d5-4ab7-973e-ba5cb77cb5c6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Expectedrevenue\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"7be227c3-88bb-48d0-a457-472b00735ba6\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"45e1c432-7cd2-478e-ac74-5fe85b7e5377\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingstate\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"d0d34b90-2ca9-4be6-aa1e-972ad5dd0d02\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"7b0eb1a6-0358-434e-b30e-bcfdaf86e1b4\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billinglongitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"4080f840-4f73-483a-9f37-88787629eff0\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"144b0a65-cb7a-4b35-9e4a-bed872e98ae6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingstate\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"56fa83a3-4a05-4733-8e61-512c1ae5d2b7\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"b9c39977-9291-476d-8747-6e8c9605f7b9\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Partneraccountid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"755ea752-bc47-4192-919f-db0e8cdc291e\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"64a6e816-e516-4fbd-be17-dae394d2760f\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Id\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"da430c99-1045-4b93-a088-93a70a017218\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n  is_group_aggregate: false\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "d01f0d47980f84dc", "flags": 1, "operationName": "lambda$getAnswerSuggestionFuture$33", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "398907b526ec967f"}], "startTime": 1735845985916000, "duration": 4006178, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845989922000, "fields": [{"key": "event.log", "type": "string", "value": "Sage TML token list = [[count of closed won opps] [Isclosed] = '1' [Iswon] = '1' [Closedate] = '2024']"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "0ba7ce668ae1148f", "flags": 1, "operationName": "fetch", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "1f982f470bc7b157"}], "startTime": 1735845985917000, "duration": 5079, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985918000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=00000844-4d3c-81bc-877f-b1179c5153f5 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"5f92ed57-6310-43c7-9184-7acb9e57829c\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"fa794c92-1470-11ee-8c81-cbe72\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"match_phrase\":{\"NL_QUERY\":{\"query\":\"total closed won opps in 2024\"}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 1\"}}},{\"term\":{\"ORG_ID\":{\"value\":\"33363357\"}}},{\"bool\":{\"minimum_should_match\":\"1\",\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"00000844-4d3c-81bc-877f-b1179c5153f5\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}}]}},\"size\":10}"}]}, {"timestamp": 1735845985922000, "fields": [{"key": "event.log", "type": "string", "value": "search-response : SearchResponse: {\"took\":1,\"timed_out\":false,\"_shards\":{\"failed\":0.0,\"successful\":1.0,\"total\":1.0,\"skipped\":0.0},\"hits\":{\"total\":{\"relation\":\"eq\",\"value\":0},\"hits\":[],\"max_score\":null}}"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "3d540524e953f094", "flags": 1, "operationName": "getSageQueryGenResults", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "d01f0d47980f84dc"}], "startTime": 1735845985917000, "duration": 4005441, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985917000, "fields": [{"key": "event.log", "type": "string", "value": "Couldnt find cache value for key: fa794c92-1470-11ee-8c81-cbe72_5f92ed57-6310-43c7-9184-7acb9e57829c"}]}, {"timestamp": 1735845985917000, "fields": [{"key": "event.log", "type": "string", "value": "Populated properties in WorksheetFacetPayload"}]}, {"timestamp": 1735845985923000, "fields": [{"key": "event.log", "type": "string", "value": "Sage query gen cache hit = false"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "9374b1ec490bc9ff", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "0ba7ce668ae1148f"}], "startTime": 1735845985917000, "duration": 61, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "1f982f470bc7b157", "flags": 1, "operationName": "getCachedSageQueryGenResultFromElastic", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "3d540524e953f094"}], "startTime": 1735845985917000, "duration": 5135, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "85d81626f0a13368", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "0ba7ce668ae1148f"}], "startTime": 1735845985918000, "duration": 4400, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "49830a01ac1f6de6", "flags": 1, "operationName": "getEntriesForNLQuery", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "fc0e41c1d061cb2b"}], "startTime": 1735845985923000, "duration": 19192, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "c7177405-06bd-4bac-ba6d-593c64cfe0bf"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "fc0e41c1d061cb2b", "flags": 1, "operationName": "getSageQueryResultsFromQB", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "3d540524e953f094"}], "startTime": 1735845985923000, "duration": 19267, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985942000, "fields": [{"key": "event.log", "type": "string", "value": "Found 0 entries from question bank for query total closed won opps in 2024"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "b4b52389cc48929e", "flags": 1, "operationName": "getSchemaFromDescriptors", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "65dd5d7bdc211432"}], "startTime": 1735845985942000, "duration": 45612, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "65dd5d7bdc211432", "flags": 1, "operationName": "getSchema", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "58cd4a39b2c4ce48"}], "startTime": 1735845985942000, "duration": 46215, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985988000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from NL-to-SQL map: "}]}, {"timestamp": 1735845985988000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Query Hypothesis: Closedate,Createddate,Account Createddate"}]}, {"timestamp": 1735845985988000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from KNN search on saved answers: "}]}, {"timestamp": 1735845985988000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Semantic Value Search: "}]}, {"timestamp": 1735845985988000, "fields": [{"key": "event.log", "type": "string", "value": "Query Hypothesis column, sample values: {Account Createddate=[2024], Closedate=[2024], Createddate=[2024]}"}]}, {"timestamp": 1735845985988000, "fields": [{"key": "event.log", "type": "string", "value": "Final Ranked Query Relevant Columns: Closedate,Createddate,Account Createddate,SF Opp Link"}]}, {"timestamp": 1735845985988000, "fields": [{"key": "event.log", "type": "string", "value": "Final Query relevant column, sample values: {Account Createddate=[2024], Closedate=[2024], Createddate=[2024], SF Opp Link=[]}"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "58cd4a39b2c4ce48", "flags": 1, "operationName": "generateSageQueries", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "3d540524e953f094"}], "startTime": 1735845985942000, "duration": 3978973, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985942000, "fields": [{"key": "event.log", "type": "string", "value": "NLPConfig: NLPConfig(dateTokenExtractionHeuristics=false, dateSQLFunctionHeuristics=true, dateSQLFunctionDefinitionV2=false, nl2TMLPromptGeneration=false, comparisonHeuristic=true, dateAggregationHeuristic=true, nlHandlerVersion=STABLE, removeOverlappingColumnDetailSampleValues=false, includeColumnSynonymsInPrompt=true, generateColumnMap=false, includeColumnValueSynonymsInPrompt=false, forEachHeuristic=true, seasonHeuristic=true, bypassCache=false, isColdStart=false, useZeroShotTMLPromptGeneration=true, includeColumnTableInfo=true, literacyPromptingEnabled=true, noSage=false, doNotReplaceWildcard=false, maxNumSelectItems=5, cotPromptingEnabled=true)"}]}, {"timestamp": 1735845989921000, "fields": [{"key": "event.log", "type": "string", "value": "Ambiguities in phrases: token {\n  token: \"1\"\n  type_enum: VALUE\n  guid: \"39012fb3-5df9-44e3-a0d7-739c981cde07\"\n  token_metadata {\n    name: \"Isclosed\"\n  }\n}\nambiguity_type: VALUE_SELECTION\nphrase_type: FILTER_PHRASE\n\ntoken {\n  token: \"1\"\n  type_enum: VALUE\n  guid: \"cddc0149-87c3-48a7-ad34-fbd08d276667\"\n  token_metadata {\n    name: \"Iswon\"\n  }\n}\nambiguity_type: VALUE_SELECTION\nphrase_type: FILTER_PHRASE\n"}]}, {"timestamp": 1735845989921000, "fields": [{"key": "event.log", "type": "string", "value": "UsedColumns-QUERY_HYPOTHESIS: 1"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "b56d0fb3b7c4cef7", "flags": 1, "operationName": "fetchKnnEntries", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "d01f0d47980f84dc"}], "startTime": 1735845985943000, "duration": 40350, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985983000, "fields": [{"key": "event.log", "type": "string", "value": "Feedback Column scores: "}]}, {"timestamp": 1735845985983000, "fields": [{"key": "event.log", "type": "string", "value": "Columns dropped from Knn Search "}]}, {"timestamp": 1735845985983000, "fields": [{"key": "event.log", "type": "string", "value": "Final Column scores: "}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "2c9bb41cdcf3eb4a", "flags": 1, "operationName": "fetchNLSqlMappingsForQuery", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "d01f0d47980f84dc"}], "startTime": 1735845985943000, "duration": 12252, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "255468ea84f5253d", "flags": 1, "operationName": "getSchemaFromQH", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "d01f0d47980f84dc"}], "startTime": 1735845985943000, "duration": 1155, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "1102ba37f7ef5c2d", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "105d4f1ab8a4f851"}], "startTime": 1735845985944000, "duration": 4910, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "105d4f1ab8a4f851", "flags": 1, "operationName": "fetchRelevantFeedbackForQuery", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "2c9bb41cdcf3eb4a"}], "startTime": 1735845985944000, "duration": 10795, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "bb53b1d485000cad", "flags": 1, "operationName": "KNNSearch", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "b56d0fb3b7c4cef7"}], "startTime": 1735845985944000, "duration": 38667, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985949000, "fields": [{"key": "event.log", "type": "string", "value": "Fetching KNN for query: total closed won opps in 2024"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "39a2eadad4c95ee9", "flags": 1, "operationName": "fetchSchemaFromConvContext", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "d01f0d47980f84dc"}], "startTime": 1735845985944000, "duration": 31, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "7d7a50336c4b59d2", "flags": 1, "operationName": "ElasticNLSqlMappingFetcher.fetch", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "105d4f1ab8a4f851"}], "startTime": 1735845985949000, "duration": 5822, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985950000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=00000844-4d3c-81bc-877f-b1179c5153f5 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"5f92ed57-6310-43c7-9184-7acb9e57829c\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"fa794c92-1470-11ee-8c81-cbe72\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"bool\":{\"minimum_should_match\":\"1\",\"must\":[{\"term\":{\"ORG_ID\":{\"value\":\"33363357\"}}}],\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"00000844-4d3c-81bc-877f-b1179c5153f5\"}}},{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"WORKSHEET_USER\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}},{\"range\":{\"UP_VOTES\":{\"gte\":1}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 0\"}}}],\"minimum_should_match\":\"1\",\"should\":[{\"match\":{\"PARENT_QUERY\":{\"query\":\"total closed won opps in 2024\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"opps\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"total\"}}}]}},\"size\":20,\"track_scores\":true}"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "cbd2b87f33516728", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "bb53b1d485000cad"}], "startTime": 1735845985950000, "duration": 16940, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "b909629cb42a16bf", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "7d7a50336c4b59d2"}], "startTime": 1735845985950000, "duration": 283, "tags": [{"key": "NLSqlMappingRequest.worksheet", "type": "string", "value": "5f92ed57-6310-43c7-9184-7acb9e57829c"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "4483db6360309670", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "7d7a50336c4b59d2"}], "startTime": 1735845985950000, "duration": 4364, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "fc69009300538d42", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "7d7a50336c4b59d2"}], "startTime": 1735845985955000, "duration": 290, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "6140aa4f37f0ac3b", "flags": 1, "operationName": "searchByEmbedding", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "bb53b1d485000cad"}], "startTime": 1735845985967000, "duration": 16166, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "c7177405-06bd-4bac-ba6d-593c64cfe0bf"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "7eebe73a5a4e623c", "flags": 1, "operationName": "applyImpressionWeightedFiltering", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "b56d0fb3b7c4cef7"}], "startTime": 1735845985983000, "duration": 76, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985983000, "fields": [{"key": "event.log", "type": "string", "value": "Total Answers Filtered out: 0"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "c77ea2e8ef509df4", "flags": 1, "operationName": "fetchSemanticValueMatches", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "d01f0d47980f84dc"}], "startTime": 1735845985984000, "duration": 3935, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "81d32c054384a0f5", "flags": 1, "operationName": "filterColumnDetails", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "58cd4a39b2c4ce48"}], "startTime": 1735845985988000, "duration": 459, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845985988000, "fields": [{"key": "event.log", "type": "string", "value": "Original Column Details: Closedate,Createddate,Id,Partneraccountid,Shippingstate,Billinglongitude,Billingstate,Expectedrevenue,Ownerid,Stagename,Type,Amount,Description,Forecastcategory,Accountid,Iswon,Name,Lastactivitydate,Isclosed,Shippingstreet,Shippinglatitude,Parentid,Numberofemployees,Shippingcountry,Billinggeocodeaccuracy,SF Opp Link,Billingstreet,Annualrevenue,Billingcountry,Billinglatitude,Accountnumber,Shippingcity,Active C,Tickersymbol,Account Ownerid,Createdbyid,Shippingpostalcode,Billingcity,Shippinglongitude,Website,Phone,Billingpostalcode,Account Type,Account Createddate,Account Name"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "e6e535013844693a", "flags": 1, "operationName": "mergeSchemas", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "65dd5d7bdc211432"}], "startTime": 1735845985988000, "duration": 129, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "949cabb852b9739a", "flags": 1, "operationName": "generateResponse", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "9c7d2ed554a84039"}], "startTime": 1735845985989000, "duration": 3930344, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "d0a0755f05cabd3f", "flags": 1, "operationName": "generateQueries", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "58cd4a39b2c4ce48"}], "startTime": 1735845985989000, "duration": 3930398, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "d22144afe51d312b", "flags": 1, "operationName": "selectColumns", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "81d32c054384a0f5"}], "startTime": 1735845985989000, "duration": 182, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "9c7d2ed554a84039", "flags": 1, "operationName": "generateTMLResponse", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "d0a0755f05cabd3f"}], "startTime": 1735845985989000, "duration": 3930380, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "dea451f27e63a7c6", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "949cabb852b9739a"}], "startTime": 1735845985999000, "duration": 16327, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "44b66146d73ed455", "flags": 1, "operationName": "getEmbeddingScoresForExamples", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "949cabb852b9739a"}], "startTime": 1735845986021000, "duration": 344939, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "e7d5ffccc0666a62", "flags": 1, "operationName": "batchEncode", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "44b66146d73ed455"}], "startTime": 1735845986021000, "duration": 343905, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "1d79e49915fdb96d", "flags": 1, "operationName": "getTMLResponseInfoTranslation", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "949cabb852b9739a"}], "startTime": 1735845986369000, "duration": 3548552, "tags": [{"key": "x.request.id", "type": "string", "value": "c7177405-06bd-4bac-ba6d-593c64cfe0bf"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845989918000, "fields": [{"key": "event.log", "type": "string", "value": "LLM response = {\n  \"rephrasedQuery\": \"Total number of closed won opportunities in 2024\",\n  \"reasoning\": {\n    \"assumptions\": \"The query is asking for the total count of opportunities that are closed and won in the year 2024.\",\n    \"stepByStepThinking\": \"1. Identify the relevant columns: 'Isclosed', 'Iswon', and 'Closedate'. 2. Apply filters to select records where 'Isclosed' is true, 'Iswon' is true, and 'Closedate' is in 2024. 3. Use the 'count' function to get the total number of such records.\"\n  },\n  \"tokens\": \"[count of closed won opps] [Isclosed] = '1' [Iswon] = '1' [Closedate] = '2024'\",\n  \"formulas\": [\n    {\n      \"name\": \"count of closed won opps\",\n      \"expression\": \"count ( Id )\"\n    }\n  ]\n}"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "836927143f0765e2", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "1d79e49915fdb96d"}], "startTime": 1735845986371000, "duration": 15629, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "c092a6e20e8d3dab", "flags": 1, "operationName": "LLMGatewayNLPService::getResponsesFromLLM", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "1d79e49915fdb96d"}], "startTime": 1735845986387000, "duration": 3530674, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845986389000, "fields": [{"key": "event.log", "type": "string", "value": "Chat Completion prompt = \nSYSTEM:\n**Task:**\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\n\nYou are given the following:\n1. Definition & rules of the language.\n2. References for which functions and keywords to use with examples.\n3. Table Schema with column names, their data type, synonyms & sample values.\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\n5. Chat History, if any, containing all the previous interactions between user and assistant.\n\n**Definitions and Rules of the Phrase Token Language:**\n\n### **Key Definitions**\n\n1. **Column Types**\n\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\n\n2. **Output Columns**\n\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `' '`.\n- **Examples**:\n  - **Output Column**: [column]\n  - **Filter Applied**: [column] = 'value'\n\n3. **Filters**\n\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `' '`. The general format is `[column] operator 'value'`.\n- **Filter Logic**:\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\n    - **Example**: [column] = 'value1' [column] = 'value2'\n    *(Matches records where `column` is 'value1' **or** 'value2')*\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\n    - **Example**: [column1] = 'value1' [column2] = 'value2'\n    *(Matches records where `column1` is 'value1' **and** `column2` is 'value2')*\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].'value'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\n\n4. **Formulas**\n\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\n- **Usage**:\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\n- **Structure**:\n  - **Formulas Field**:\n    \"formulas\": [\n      {\n        \"name\": \"<formula_name>\",\n        \"expression\": \"<formula_expression>\"\n      },\n      ...\n    ]\n  - **Tokens Field Example**:\n    {\n      \"tokens\": \"[Formula Name] by [Column Name]\",\n      \"formulas\": [ ... ]\n    }\n- **Key Points**:\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user's query, for example, pick a relevant substring of the query.\n  - **Expressions**:\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\n    - Refer to the examples provided later for formula syntax and better understanding.\n  - **Dependencies**:\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \"unique users\", expression: \"unique count ( user id )\", then you cannot apply \"sum ( unique users )\"\" because it is already aggregated i.e. \"group_aggregate ( sum ( unique users ) , { } , { } )\" is incorrect because it will fail formula grammar check. The correct expression should be: \"group_aggregate ( unique users , { } , { } )\" i.e. without any aggregation function applied on aggregated formula/column.\n\n**5. Column and Value Selection**\n\n- **Column Selection**:\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user's query. Columns are sorted by relevance in the schema, with the most relevant first.\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\n\n- **Value Selection**:\n  - **Use Schema Values**:\n    - When applying filters, prioritize sample values from the schema that match the user's query.\n  - **If Values Are Missing**:\n    - If matching values are not found in the schema, you may:\n    - Select the nearest appropriate value from the schema.\n    - Generate a suitable value based on the query context.\n    Choose the approach that best captures the user's intent, without bias towards the schema.\n  - **Ensure Relevance**:\n    - Only include values that make sense within the context of the query.\n    - Avoid illogical or irrelevant values.\n\n### **Table Schema**\n\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\n\nCREATE TABLE TSEMBED (\nClosedate date /* Values: '2024' Current year is 2025.. Group: TSEMBED Dev Org - Opps.*/,\nCreateddate date /* Values: '2024'. Group: TSEMBED Dev Org - Opps.*/,\nAccount Createddate date /* Values: '2024'. Group: TSEMBED Dev Org Export - Account.*/,\nSF Opp Link text /*. Group: TSEMBED Dev Org - Opps.*/,\nId text /*. Group: TSEMBED Dev Org - Opps.*/,\nPartneraccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\nShippingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\nExpectedrevenue int /*. Group: TSEMBED Dev Org - Opps.*/,\nOwnerid text /*. Group: TSEMBED Dev Org - Opps.*/,\nStagename text /*. Group: TSEMBED Dev Org - Opps.*/,\nType text /*. Group: TSEMBED Dev Org - Opps.*/,\nAmount int /*. Group: TSEMBED Dev Org - Opps.*/,\nDescription text /*. Group: TSEMBED Dev Org - Opps.*/,\nForecastcategory text /*. Group: TSEMBED Dev Org - Opps.*/,\nAccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\nIswon int /*. Group: TSEMBED Dev Org - Opps.*/,\nName text /*. Group: TSEMBED Dev Org - Opps.*/,\nLastactivitydate text /*. Group: TSEMBED Dev Org - Opps.*/,\nIsclosed int /*. Group: TSEMBED Dev Org - Opps.*/,\nShippingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nParentid text /*. Group: TSEMBED Dev Org Export - Account.*/,\nNumberofemployees int /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillinggeocodeaccuracy text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAnnualrevenue int /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccountnumber text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\nActive C text /*. Group: TSEMBED Dev Org Export - Account.*/,\nTickersymbol text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccount Ownerid text /*. Group: TSEMBED Dev Org Export - Account.*/,\nCreatedbyid text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nWebsite text /*. Group: TSEMBED Dev Org Export - Account.*/,\nPhone text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccount Type text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccount Name text /*. Group: TSEMBED Dev Org Export - Account.*/)\n\n### **Supported Keyword and Function References with Examples**\n\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\n\n**Relevant Keywords for Phrase Tokens**\n\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\n\n{\"function\":\"top|bottom n\",\"description\":\"Generates the top (or bottom) n items from a sorted result. Substitute 'n' with number specified by the user in query. When 'sort by' is used with 'top', it automatically implies sorting is done in descending order. If 'bottom' is used with 'sort by', then it is in ascending order by default.\",\"example\":[\"top 10 [SF Opp Link] sort by [Expectedrevenue]\",\"bottom 25 [SF Opp Link] sort by count [SF Opp Link]\"]}\n{\"function\":\"sort by\",\"example\":[\"sort by [Expectedrevenue] ascending\",\"sort by count [SF Opp Link] descending\"]}\n{\"function\":\"by\",\"description\":\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\",\"example\":[\"by [Expectedrevenue]\"]}\n{\"function\":\"begins|ends with\",\"description\":\"Returns all column values that begins or ends with a value defined in quotes.\",\"example\":[\"[SF Opp Link] begins with 'a0_value0'\",\"[SF Opp Link] ends with 'a0_value0'\"]}\n{\"function\":\"contains|not contains\",\"description\":\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\",\"example\":[\"[SF Opp Link] contains 'a0_value0'\",\"[SF Opp Link] contains 'a0_value0' 'a0_value1'\",\"[SF Opp Link] not contains 'a0_value0'\"]}\n{\"function\":\"vs\",\"description\":\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = 'east' vs [region] = 'west'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = 'value1' vs [attribute] = 'value2'\",\"example\":[\"[Expectedrevenue] [SF Opp Link] = 'a0_value0' vs [SF Opp Link] = 'a0_value1'\",\"[Expectedrevenue] [Closedate] = 'this year' vs [Closedate] = 'last year'\",\"[Amount] [Id] = 'a1_value0' vs [Id] = 'a1_value1' vs [Id] = 'a1_value2'\"]}\n{\"function\":\"growth of\",\"description\":\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\",\"example\":[\"growth of [Expectedrevenue] by [Closedate] [Closedate].'daily'\"]}\n{\"function\":\"unique count\",\"description\":\"Similar to SQL's SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"unique count [SF Opp Link]\"]}\n{\"function\":\"count\",\"description\":\"Similar to SQL's SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"count [SF Opp Link]\"]}\n{\"function\":\"in|not in\",\"description\":\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user's query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using 'in' or 'not in' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn't support use of 'vs' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where 'subsearch' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using 'not in'.\",\"example\":[\"[SF Opp Link] in ([SF Opp Link] [SF Opp Link] begins with 'a0_value0' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\",\"[SF Opp Link] not in ([SF Opp Link] [SF Opp Link] begins with 'a0_value0' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\"]}\n{\"function\":\"sum|average|min|max\",\"description\":\"Similar to SQL's SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\",\"example\":[\"sum [Expectedrevenue]\",\"average [Expectedrevenue]\"]}\n{\"function\":\"for each\",\"description\":\"Used on attributes i.e. columns with type text.\",\"example\":[\"for each [SF Opp Link]\"]}\n\n\n**Function References for Formulas**\n\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\n\n{\"function\":\"average\",\"description\":\"Returns the average of all the values of a column.\",\"example\":[\"average ( Expectedrevenue )\"]}\n{\"function\":\"count\",\"description\":\"Returns the number of rows in the table containing the column.\",\"example\":[\"count ( SF Opp Link )\"]}\n{\"function\":\"count_if\",\"description\":\"Returns the number of rows in the table containing the column that meet a given criteria.\",\"example\":[\"count_if ( (Expectedrevenue > 10), SF Opp Link )\",\"count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\"]}\n{\"function\":\"cumulative_average\",\"description\":\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_average (Expectedrevenue, SF Opp Link, Id)\"]}\n{\"function\":\"cumulative_sum\",\"description\":\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_sum (Expectedrevenue, SF Opp Link)\"]}\n{\"function\":\"group_aggregate\",\"description\":\"**Summary of the `group_aggregate` Function**\n\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\n\n**Function Syntax:**\n```\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\n```\n\n**Parameters:**\n\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\n   - `sum(measure0)`\n   - `count(attribute0)`\n   - `unique count (attribute0)`\n   - `average(measure1)`\n   - `avg(measure1)`\n\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\n   - **`query_groups()`**: Includes all groupings from the main query.\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\n\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\n   - **`query_filters()`**: Includes all filters from the main query.\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\n\n**Usage Notes:**\n\n- **Grouping Modifications:**\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\n\n- **Filter Modifications:**\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\n    - Example: `query_filters() + {attribute0 = 'value'}` adds a new filter condition.\n\n- **Process `grouping_set`**:\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\n  - **`query_groups()`**: Use the groupings defined in the main query.\n  - **Modify Groupings with `+` and `-`**:\n    - **Adding Groupings**: Combine main query groupings with additional columns.\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\n\n- **Process `filter_set`**:\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\n  - **`query_filters()`**: Use filters defined in the main query.\n  - **Modify Filters with `+` and `-`**:\n    - **Adding Filters**: Include additional filter conditions.\n    - **Excluding Filters**: Remove filters related to specific columns.\n\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\n\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\n\n**Key Concepts:**\n\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\n\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\n\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\n\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\n\n**Summary of Operators:**\n\n- **Groupings**:\n  - **`{ }`**: No groupings.\n  - **`query_groups()`**: Use main query groupings.\n  - **`+ {columns}`**: Add columns to groupings.\n  - **`- {columns}`**: Remove columns from groupings.\n\n- **Filters**:\n  - **`{ }`**: No filters.\n  - **`query_filters()`**: Use main query filters.\n  - **`+ {conditions}`**: Add filter conditions.\n  - **`- {columns}`**: Remove filters on columns.\n\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\",\"example\":[\"group_aggregate ( sum ( Expectedrevenue ) , { SF Opp Link } , { } )\",\"group_aggregate ( stddev ( Expectedrevenue ) , { } , { } )\",\"group_aggregate ( variance ( Expectedrevenue ), { SF Opp Link , Id }, { day_of_week ( Closedate ) = 'friday' } )\",\"group_aggregate ( average ( Amount ), query_groups ( ), query_filters ( ) )\",\"group_aggregate ( count ( Id ), query_groups ( ) + { SF Opp Link }, query_filters ( ) - { Id } )\",\"group_aggregate ( unique count ( Id ) , query_groups ( ) + { SF Opp Link }, query_filters ( ) + { Id != 'a1_value0' } )\"]}\n{\"function\":\"max\",\"description\":\"Returns the maximum value of a column.\",\"example\":[\"max ( Expectedrevenue )\"]}\n{\"function\":\"min\",\"description\":\"Returns the minimum value of a column.\",\"example\":[\"min (Expectedrevenue)\"]}\n{\"function\":\"moving_average\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\",\"example\":[\"moving_average (Expectedrevenue, 2, 1, SF Opp Link)\"]}\n{\"function\":\"moving_sum\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\u2026Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\",\"example\":[\"moving_sum ( Expectedrevenue, 2, 1, SF Opp Link )\"]}\n{\"function\":\"percentile\",\"description\":\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\",\"example\":[\"percentile ( Expectedrevenue , 99 , 'asc' )\",\"percentile ( Expectedrevenue , 95 , 'desc' )\"]}\n{\"function\":\"stddev\",\"description\":\"Returns the standard deviation of all values of a column.\",\"example\":[\"stddev ( Expectedrevenue )\"]}\n{\"function\":\"sum\",\"description\":\"Returns the sum of all the values of a numeric column i.e. measure.\",\"example\":[\"sum ( Expectedrevenue )\"]}\n{\"function\":\"unique count\",\"description\":\"Returns the number of unique values of a column.\",\"example\":[\"unique count ( SF Opp Link )\"]}\n{\"function\":\"unique_count_if\",\"description\":\"Returns the number of unique values of a column provided it meets a criteria.\",\"example\":[\"unique_count_if ( (Expectedrevenue > 10) , SF Opp Link )\",\"unique_count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\"]}\n{\"function\":\"variance\",\"description\":\"Returns the variance of all the values of a column.\",\"example\":[\"variance ( Expectedrevenue )\"]}\n{\"function\":\"in|not in\",\"description\":\"Function that takes a column name and a list of values, used in 'formulas' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\",\"example\":[\"SF Opp Link in { 'a0_value0' , 'a0_value1' }\",\"SF Opp Link not in { 'a0_value0' , 'a0_value1' ,'a0_value2' }\"]}\n{\"function\":\"to_date\",\"description\":\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like 'march 2024' in formula language, since 'march 2024' is not a valid formula keyword but only valid in main tokens query.\",\"example\":[\"to_date ('2024-05-16', '%Y-%m-%d')\",\"Closedate >= to_date ('03/01/2024', '%m/%d/%Y') and Closedate <= to_date ('03/31/2024', '%m/%d/%Y')\"]}\n{\"function\":\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\",\"description\":\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords 'this year', 'this day', 'last year', 'last 2 quarters', so on in formula language.\",\"example\":[\"diff_days ( Closedate, today ( ) ) = 0\",\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\",\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\"]}\n{\"function\":\"if-else\",\"description\":\"if-else statements similar to the ones in programming languages, only use them in 'formulas' field.\",\"example\":[\"if ( Expectedrevenue > 100 ) then 'High' else 'Low'\",\"if ( Expectedrevenue > 100 ) then 'High' else if ( Amount > 100 and SF Opp Link = 'a0_value0' ) then 'Medium' else 'Low'\"]}\n{\"function\":\"year|month|day\",\"description\":\"Functions below that are used to extract year, month, and day from a date column or even today() function.\",\"example\":[\"year ( Closedate ) = 2024\",\"month ( Closedate ) = 'June'\",\"day ( today ( ) ) = 2\"]}\n\n\n**Date Keywords**\n\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\n\n{\"function\":\"last|next month\",\"example\":[\"[Closedate] = 'last month'\"]}\n{\"function\":\"last|next n days\",\"example\":[\"[Closedate] = 'last 7 days'\",\"[Closedate] = 'next 7 days'\"]}\n{\"function\":\"last|next n months\",\"example\":[\"[Closedate] = 'last 12 months'\"]}\n{\"function\":\"last|next n quarters\",\"example\":[\"[Closedate] = 'last 12 quarters'\"]}\n{\"function\":\"last|next n weeks\",\"example\":[\"[Closedate] = 'last 12 weeks'\"]}\n{\"function\":\"last|next n years\",\"example\":[\"[Closedate] = 'last 12 years'\"]}\n{\"function\":\"last|next quarter\",\"example\":[\"[Closedate] = 'last quarter'\"]}\n{\"function\":\"last|next week\",\"example\":[\"[Closedate] = 'last week'\"]}\n{\"function\":\"last|next year\",\"example\":[\"[Closedate] = 'last year'\"]}\n{\"function\":\"<month>\",\"example\":[\"[Closedate] = 'march'\",\"[Closedate] = 'april'\"]}\n{\"function\":\"<year>\",\"example\":[\"[Closedate] = '2024'\"]}\n{\"function\":\"<weekday>\",\"example\":[\"[Closedate] = 'Saturday'\",\"[Closedate] = 'Monday'\"]}\n{\"function\":\"<month_year>\",\"example\":[\"[Closedate] = 'march 2024'\",\"[Closedate] = 'april 2024'\"]}\n{\"function\":\"this day|month|year|quarter|week\",\"example\":[\"[Closedate] = 'this day'\",\"[Closedate] = 'this quarter'\"]}\n{\"function\":\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\",\"example\":[\"[Closedate] = 'last 2 quarters for each year'\",\"[Closedate] = 'last 10 weeks for each month'\"]}\n{\"function\":\"yearly|quarterly|monthly|weekly|daily|hourly\",\"description\":\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\",\"example\":[\"[Closedate].yearly\",\"[Closedate].quarterly\",\"[Closedate].monthly\",\"[Closedate].weekly\",\"[Closedate].daily\"]}\n{\"function\":\"between ... and ...\",\"description\":\"Selects records where the date is between the two specified dates. The dates must be in the format 'MM/dd/yyyy'. 'january 2024' type of dates are not supported, they have to be in a date format.\",\"example\":[\"[Closedate] between '01/30/2012' and '01/30/2014'\"]}\n{\"function\":\"month over month|quarter over quarter|year over year|week over week\",\"description\":\"Only used with 'growth of' keyword. The 'year over year' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The 'month over month' keyword compares data between the same time period from different months.\",\"example\":[\"growth of [Expectedrevenue] by [Closedate] [Closedate].daily month over month\",\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly year over year\",\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly quarter over quarter\"]}\n{\"function\":\"day|week of month|quarter|year\",\"description\":\"Returns the day|week number of the month quarter or year for the date value. Example, 'day of month' for 13th Jan would be 13. 'day of year' for 13th Jan would be 13. 'week of month' for 13th Jan would be 2.\",\"example\":[\"[Closedate].'day of month'\",\"[Closedate].'month of year'\",\"[Closedate].'week of year'\"]}\n{\"function\":\"n months|weeks|days|quarters|years ago\",\"example\":[\"[Closedate] = '10 months ago'\",\"[Closedate] = '5 years ago'\"]}\n{\"function\":\"detailed\",\"description\":\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\",\"example\":[\"[Closedate] detailed\"]}\n\n\n**Instructions:**\n\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\n\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\n\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today's date in\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\n\n### **Additional Rules for Generating Phrase Tokens**\n\n1. **Including Output Columns**\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\n    - Choose the output column based on the context of the query.\n    - **Example**:\n       - *Invalid*: `{\"tokens\": \"[column1] = 'value1' [column2] = 'value2'\"}`\n       - *Valid*: `{\"tokens\": \"[column1] = 'value1' [column2] = 'value2' [column3]\"}`\n2. **Expanding Month Abbreviations**\n    - Expand month abbreviations (e.g., 'Jan', 'Feb') to full names when used as **date filters** in phrase tokens.\n    - Do **not** expand them if used as filter values in **non-date columns**.\n3. **Count and Unique Count Usage**\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\n    - Do **not** apply them to **measures** or numeric columns.\n4. **Numeric Comparisons in Formulas**\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\n5. **Representing Date Filters in Formulas**\n    - In **formula expressions**, represent date filters like `'last month'` using functions such as `diff_months` or `to_date` that calculate the date range.\n6. **Avoid Redundant Formulas**\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don't need to create an additional formula for it.\n    - **Example to Avoid**:\n       - `{\"tokens\": \"[Measure]\", \"formulas\": [{\"name\": \"Total Measure\", \"expression\": \"sum(Measure)\"}]}`\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\n7. **Filtering on Null Values**\n    - When filtering on **null values**, encapsulate `'null'` in single quotes and curly braces `{ }`, like `'{null}'`.\n    - **Example**: `[column] != '{null}'`\n8. **Growth of phrase cannot co-exist with versus phrase**\n    - If there is a growth phrase like: 'growth of sum [measure] by [date] [date].monthly', it cannot co-exist with '[attribute] = 'value' vs [attribute] = 'value''. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = 'value' [attribute] = 'value' where 'vs' keyword is removed.\n9. **Avoid Counting and Grouping on the Same Column**\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\n10. **Avoid adding 'by' keyword to date bucket**\n    - When using date bucket in the final answer, do not add 'by' keyword. Remove by keyword and just add date bucket alone.\n11. **Query-on-Query Intent**:\n     - **Definition**:\n        - Occurs when the user's query references previous results or includes subquery logic, similar to SQL subqueries.\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\u2014conditions on the **same column** that cannot be true simultaneously in a single row.\n     - **Handling Subqueries**:\n        - Represent such queries using the `in` or `not in` keywords.\n     - **Syntax**:\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\n     - **Application**:\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\n        - To determine if a query has subquery intent, rephrase the user's query to make it clear and unambiguous, accurately capturing their intent.\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\n\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\n\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\n\n\n**Single Query Examples**\n\n{\"query\":\"For every year, which SF Opp Link had largest Expectedrevenue.\",\"desc\":\"'for each' phrase is used when using 'top x' phrase with a date bucketing filter.\",\"tokens\":\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\"}\n{\"query\":\"which SF Opp Links had the most increase in Expectedrevenue this year compared to last year\",\"desc\":\"In this query, we are determining which 'SF Opp Link's have experienced the greatest increase in 'Expectedrevenue' from last year to this year. The data is grouped by 'SF Opp Link', calculating the sum of 'Expectedrevenue' for each one for both years. The formula 'Expectedrevenue ( this year )' computes the sum of 'Expectedrevenue' for each 'SF Opp Link' where 'Closedate' falls within the current year ('diff_years(Closedate, today()) = 0'). Similarly, 'Expectedrevenue ( last year )' calculates the sum for the previous year ('diff_years(Closedate, today()) = -1'). The 'change' is then determined by subtracting last year's sum from this year's for each 'SF Opp Link' using 'change = Expectedrevenue ( this year ) - Expectedrevenue ( last year )'. Finally, the results are sorted by 'change' in descending order to highlight the 'SF Opp Link's with the most significant increases in 'Expectedrevenue'.\",\"tokens\":\"[SF Opp Link] [Expectedrevenue ( this year )] [Expectedrevenue ( last year )] [change] sort by [change] descending\",\"formulas\":[{\"name\":\"change\",\"expression\":\"Expectedrevenue ( this year ) - Expectedrevenue ( last year )\"},{\"name\":\"Expectedrevenue ( this year )\",\"expression\":\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_years ( Closedate , today() ) = 0 } )\"},{\"name\":\"Expectedrevenue ( last year )\",\"expression\":\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_years ( Closedate , today() ) = -1 } )\"}]}\n{\"query\":\"show SF Opp Links with the highest Expectedrevenue this year\",\"tokens\":\"[SF Opp Link] sort by [Expectedrevenue] descending [Closedate] = 'this year'\"}\n{\"query\":\"what is percentage of Expectedrevenue broken down by SF Opp Link in 2024\",\"desc\":\"In this query, we are calculating the percentage of 'Expectedrevenue' broken down by 'SF Opp Link' for the year 2024. The main query groups the data by 'SF Opp Link' and applies the filter 'Closedate = '2024''. The denominator ('Expectedrevenue (all)') is computed using 'group_aggregate(sum(Expectedrevenue), query_groups() - { SF Opp Link }, query_filters())', which aggregates 'Expectedrevenue' while removing 'SF Opp Link' from the groupings\u2014effectively summing 'Expectedrevenue' for the entire year 2024 without distinction of 'SF Opp Link'. The numerator ('Expectedrevenue by SF Opp Link') is calculated with 'group_aggregate(sum(Expectedrevenue), query_groups(), query_filters())', utilizing the main query's groupings and filters. The percentage of 'Expectedrevenue' is then determined by dividing the numerator by the denominator for each 'SF Opp Link' and multiplying by 100.\",\"tokens\":\"[percentage of Expectedrevenue] [Closedate] = '2024' by [SF Opp Link]\",\"formulas\":[{\"name\":\"Expectedrevenue (all)\",\"expression\":\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) - { SF Opp Link } , query_filters ( ) )\"},{\"name\":\"Expectedrevenue by SF Opp Link\",\"expression\":\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) )\"},{\"name\":\"percentage Expectedrevenue\",\"expression\":\"Expectedrevenue by SF Opp Link / Expectedrevenue (all) * 100\"}]}\n{\"query\":\"which SF Opp Link had the lowest/least average Expectedrevenue\",\"tokens\":\"bottom 1 [SF Opp Link] sort by average [Expectedrevenue]\"}\n{\"query\":\"What is the difference in number of SF Opp Links between May 2024 and Aug 2024\",\"desc\":\"In this query, we are calculating the difference in the number of unique 'SF Opp Link's between May 2024 and August 2024. The main query does not include any groupings, so data is aggregated without grouping. The formula 'SF Opp Links May 2024' computes the unique count of 'SF Opp Link' for May 2024 using 'group_aggregate(unique count(SF Opp Link), query_groups(), query_filters() + { month(Closedate) = 'May', year(Closedate) = 2024 })'. Similarly, 'SF Opp Links Aug 2024' calculates the unique count for August 2024. The difference is then found by subtracting 'SF Opp Links Aug 2024' from 'SF Opp Links May 2024' using the formula 'difference in SF Opp Links between May 2024 and Aug 2024 = SF Opp Links May 2024 - SF Opp Links Aug 2024'.\",\"tokens\":\"[difference in SF Opp Links between May 2024 and Aug 2024]\",\"formulas\":[{\"name\":\"SF Opp Links May 2024\",\"expression\":\"group_aggregate ( unique count ( SF Opp Link ) , query_groups() , query_filters() + { month ( Closedate ) = 'May' , year ( Closedate ) = 2024 } )\"},{\"name\":\"SF Opp Links Aug 2024\",\"expression\":\"group_aggregate ( unique count ( SF Opp Link ) , query_groups() , query_filters() + { month ( Closedate ) = 'August' , year ( Closedate ) = 2024 } )\"},{\"name\":\"difference in SF Opp Links between May 2024 and Aug 2024\",\"expression\":\"SF Opp Links May 2024 - SF Opp Links Aug 2024\"}]}\n{\"query\":\"show SF Opp Link with highest Expectedrevenue in every year.\",\"desc\":\"'for each' phrase is used when using 'top x' phrase with a date bucketing filter.\",\"tokens\":\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\"}\n{\"query\":\"what is total count SF Opp Link in march 2024 as percentage of total count Id in march 2023\",\"tokens\":\"[percentage of SF Opp Link in March 2024 over Id in March 2023]\",\"formulas\":[{\"name\":\"Total Count SF Opp Link in March 2024\",\"expression\":\"count_if( ( Closedate >= to_date ( '03/01/2024' , '%m/%d/%Y' ) and Closedate <= to_date ( '03/31/2024' , '%m/%d/%Y' ) ), SF Opp Link)\"},{\"name\":\"Total Count Id in March 2023\",\"expression\":\"count_if( ( Closedate >= to_date ( '03/01/2023' , '%m/%d/%Y' ) and Closedate <= to_date ( '03/31/2023' , '%m/%d/%Y' ) ), Id)\"},{\"name\":\"percentage of SF Opp Link in March 2024 over Id in March 2023\",\"expression\":\"Total Count SF Opp Link in March 2024 / Total Count Id in March 2023 * 100\"}]}\n{\"query\":\"which SF Opp Links had Expectedrevenue more than the average Expectedrevenue in last 60 days\",\"desc\":\"In this query, we are identifying which `SF Opp Link`s have a `Expectedrevenue` greater than the average `Expectedrevenue` over the last 60 days. The main query filters the data to include only records where `Closedate = 'last 60 days'` and groups the data by `SF Opp Link`. The average `Expectedrevenue` across all records in the last 60 days is calculated using `group_aggregate(average(Expectedrevenue), { }, query_filters())`, which computes the average without any groupings. The expression `sum(Expectedrevenue) > average Expectedrevenue` then compares the total `Expectedrevenue` for each `SF Opp Link` (since `sum(Expectedrevenue)` is computed per `SF Opp Link` due to the grouping) to the overall average `Expectedrevenue`.\",\"tokens\":\"[SF Opp Link] [Expectedrevenue more than the average Expectedrevenue] = true [Closedate] = 'last 60 days'\",\"formulas\":[{\"name\":\"average Expectedrevenue\",\"expression\":\"group_aggregate ( average ( Expectedrevenue ) , { } , query_filters ( ) )\"},{\"name\":\"Expectedrevenue more than the average Expectedrevenue\",\"expression\":\"sum ( Expectedrevenue ) > average Expectedrevenue\"}]}\n{\"query\":\"show Expectedrevenue declining in last 2 years for all SF Opp Links quarterly\",\"tokens\":\"growth of [Expectedrevenue] by [Closedate] [Closedate].quarterly [Closedate] = 'last 2 years' [SF Opp Link]\"}\n{\"query\":\"which was my best performing SF Opp Link last quarter\",\"desc\":\"Use the 'top 1' format when the query specifically asks for the single highest or 'best' result in a given category or metric. This format directly retrieves the highest-ranking item based on the specified measure and is appropriate for queries that require a definitive top performer without the need for viewing other close contenders.\",\"tokens\":\"top 1 [SF Opp Link] sort by [Expectedrevenue] [Closedate] = 'last quarter'\"}\n{\"query\":\"how many SF Opp Link by Id were there last month\",\"tokens\":\"unique count [SF Opp Link] by [Id] [Closedate] = 'last month'\"}\n{\"query\":\"which SF Opp Link is growing fastest in 2024\",\"desc\":\"moving_sum ( Expectedrevenue , 1 , 1 , Closedate ) implies sum of Expectedrevenue in the internal 'Closedate - 1' and 'Closedate + 1'. Since the query asks for fastest growing SF Opp Links, use the formula to compute absolute difference in moving_sum between today and yesterday. Then use sage keywords to find top SF Opp Link for the absolute difference.\",\"tokens\":\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue] [Closedate] = '2024'\",\"formulas\":[{\"name\":\"absolute change in Expectedrevenue\",\"expression\":\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\"}]}\n{\"query\":\"for my top 10 SF Opp Link last year, what are the monthly Expectedrevenue this year\",\"desc\":\"First, use a top sub-query to find the top 10 attributes last year. Then, use that attribute in the main query to find their monthly measure this year.\",\"tokens\":\"[SF Opp Link] [Closedate].monthly [Expectedrevenue] [Closedate] = 'this year' [SF Opp Link] in ( [SF Opp Link] [Closedate] = 'last year' top 10 [SF Opp Link] sort by [Expectedrevenue] )\"}\n{\"query\":\"how has the Expectedrevenue changed over the years for the top 5 SF Opp Link by Expectedrevenue\",\"desc\":\"First, find the top 5 SF Opp Link by Expectedrevenue. Then, for these SF Opp Link, display their Expectedrevenue per year to show how it has changed over the years by using IN sub-query to join with the main query.\",\"tokens\":\"[SF Opp Link] [Expectedrevenue] [Closedate].yearly [SF Opp Link] in ( [SF Opp Link] top 5 [SF Opp Link] sort by sum [Expectedrevenue] )\"}\n\nUSER:\n### **User Query**\n\nUser Query: total closed won opps in 2024\n\n\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\n\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\u2014never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query's intent.\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\u2014only their names should be included.\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\n\n\n### **Step-by-Step Guidance for Generating Phrase Tokens**\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\n\n1. **Rephrase the User's Query**\n   - Rephrase the latest user's query to make it clear and unambiguous, accurately capturing the user's intent.\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\n   - The rephrased query should be easily translatable into SQL for data retrieval.\n   - Use the rephrased query to generate the phrase tokens.\n2. **Consult Provided Resources**\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\n3. **Generate Phrase Tokens Methodically**\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\n4. **Ensure Strict Compliance**\n   - Follow all instructions exactly as given.\n   - Do **not** invent or assume any information not provided.\n   - Avoid adding any unlisted elements.\n5. **Review for Accuracy**\n   - Verify that the tokens fully represent the user's query and adhere to all guidelines.\n   - Check for any errors or omissions before finalizing.\n\n### **Response Format**\n\nThe response should be well-formatted JSON as shown below:\n{\n  \"rephrasedQuery\": \"\",\n  \"reasoning\": {\n    \"assumptions\": \"\",\n    \"stepByStepThinking\": \"\"\n  },\n  \"tokens\": \"\",\n  \"formulas\": [\n    {\n      \"name\": \"\",\n      \"expression\": \"\"\n    }\n  ]\n}\n"}]}, {"timestamp": 1735845986390000, "fields": [{"key": "event.log", "type": "string", "value": "Completion Request = headers {\n  tenant_id: \"fa794c92-1470-11ee-8c81-cbe72\"\n  client_id: \"eureka-searcher\"\n  request_id: \"c7177405-06bd-4bac-ba6d-593c64cfe0bf\"\n  org_id: \"33363357\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"**Task:**\\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\\n\\nYou are given the following:\\n1. Definition & rules of the language.\\n2. References for which functions and keywords to use with examples.\\n3. Table Schema with column names, their data type, synonyms & sample values.\\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\\n5. Chat History, if any, containing all the previous interactions between user and assistant.\\n\\n**Definitions and Rules of the Phrase Token Language:**\\n\\n### **Key Definitions**\\n\\n1. **Column Types**\\n\\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\\n\\n2. **Output Columns**\\n\\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `\\' \\'`.\\n- **Examples**:\\n  - **Output Column**: [column]\\n  - **Filter Applied**: [column] = \\'value\\'\\n\\n3. **Filters**\\n\\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `\\' \\'`. The general format is `[column] operator \\'value\\'`.\\n- **Filter Logic**:\\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\\n    - **Example**: [column] = \\'value1\\' [column] = \\'value2\\'\\n    *(Matches records where `column` is \\'value1\\' **or** \\'value2\\')*\\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\\n    - **Example**: [column1] = \\'value1\\' [column2] = \\'value2\\'\\n    *(Matches records where `column1` is \\'value1\\' **and** `column2` is \\'value2\\')*\\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].\\'value\\'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\\n\\n4. **Formulas**\\n\\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\\n- **Usage**:\\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\\n- **Structure**:\\n  - **Formulas Field**:\\n    \\\"formulas\\\": [\\n      {\\n        \\\"name\\\": \\\"<formula_name>\\\",\\n        \\\"expression\\\": \\\"<formula_expression>\\\"\\n      },\\n      ...\\n    ]\\n  - **Tokens Field Example**:\\n    {\\n      \\\"tokens\\\": \\\"[Formula Name] by [Column Name]\\\",\\n      \\\"formulas\\\": [ ... ]\\n    }\\n- **Key Points**:\\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user\\'s query, for example, pick a relevant substring of the query.\\n  - **Expressions**:\\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\\n    - Refer to the examples provided later for formula syntax and better understanding.\\n  - **Dependencies**:\\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\", then you cannot apply \\\"sum ( unique users )\\\"\\\" because it is already aggregated i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n**5. Column and Value Selection**\\n\\n- **Column Selection**:\\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user\\'s query. Columns are sorted by relevance in the schema, with the most relevant first.\\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\\n\\n- **Value Selection**:\\n  - **Use Schema Values**:\\n    - When applying filters, prioritize sample values from the schema that match the user\\'s query.\\n  - **If Values Are Missing**:\\n    - If matching values are not found in the schema, you may:\\n    - Select the nearest appropriate value from the schema.\\n    - Generate a suitable value based on the query context.\\n    Choose the approach that best captures the user\\'s intent, without bias towards the schema.\\n  - **Ensure Relevance**:\\n    - Only include values that make sense within the context of the query.\\n    - Avoid illogical or irrelevant values.\\n\\n### **Table Schema**\\n\\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\\n\\nCREATE TABLE TSEMBED (\\nClosedate date /* Values: \\'2024\\' Current year is 2025.. Group: TSEMBED Dev Org - Opps.*/,\\nCreateddate date /* Values: \\'2024\\'. Group: TSEMBED Dev Org - Opps.*/,\\nAccount Createddate date /* Values: \\'2024\\'. Group: TSEMBED Dev Org Export - Account.*/,\\nSF Opp Link text /*. Group: TSEMBED Dev Org - Opps.*/,\\nId text /*. Group: TSEMBED Dev Org - Opps.*/,\\nPartneraccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nExpectedrevenue int /*. Group: TSEMBED Dev Org - Opps.*/,\\nOwnerid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nStagename text /*. Group: TSEMBED Dev Org - Opps.*/,\\nType text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAmount int /*. Group: TSEMBED Dev Org - Opps.*/,\\nDescription text /*. Group: TSEMBED Dev Org - Opps.*/,\\nForecastcategory text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nIswon int /*. Group: TSEMBED Dev Org - Opps.*/,\\nName text /*. Group: TSEMBED Dev Org - Opps.*/,\\nLastactivitydate text /*. Group: TSEMBED Dev Org - Opps.*/,\\nIsclosed int /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nParentid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nNumberofemployees int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinggeocodeaccuracy text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAnnualrevenue int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccountnumber text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nActive C text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nTickersymbol text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Ownerid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nCreatedbyid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nWebsite text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nPhone text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Type text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Name text /*. Group: TSEMBED Dev Org Export - Account.*/)\\n\\n### **Supported Keyword and Function References with Examples**\\n\\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\\n\\n**Relevant Keywords for Phrase Tokens**\\n\\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\\n\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [SF Opp Link] sort by [Expectedrevenue]\\\",\\\"bottom 25 [SF Opp Link] sort by count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Expectedrevenue] ascending\\\",\\\"sort by count [SF Opp Link] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[SF Opp Link] begins with \\'a0_value0\\'\\\",\\\"[SF Opp Link] ends with \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[SF Opp Link] contains \\'a0_value0\\'\\\",\\\"[SF Opp Link] contains \\'a0_value0\\' \\'a0_value1\\'\\\",\\\"[SF Opp Link] not contains \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Expectedrevenue] [SF Opp Link] = \\'a0_value0\\' vs [SF Opp Link] = \\'a0_value1\\'\\\",\\\"[Expectedrevenue] [Closedate] = \\'this year\\' vs [Closedate] = \\'last year\\'\\\",\\\"[Amount] [Id] = \\'a1_value0\\' vs [Id] = \\'a1_value1\\' vs [Id] = \\'a1_value2\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[SF Opp Link] in ([SF Opp Link] [SF Opp Link] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\\\",\\\"[SF Opp Link] not in ([SF Opp Link] [SF Opp Link] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Expectedrevenue]\\\",\\\"average [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [SF Opp Link]\\\"]}\\n\\n\\n**Function References for Formulas**\\n\\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\\n\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Expectedrevenue > 10), SF Opp Link )\\\",\\\"count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Expectedrevenue, SF Opp Link, Id)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Expectedrevenue, SF Opp Link)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Expectedrevenue ) , { SF Opp Link } , { } )\\\",\\\"group_aggregate ( stddev ( Expectedrevenue ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Expectedrevenue ), { SF Opp Link , Id }, { day_of_week ( Closedate ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Amount ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( Id ), query_groups ( ) + { SF Opp Link }, query_filters ( ) - { Id } )\\\",\\\"group_aggregate ( unique count ( Id ) , query_groups ( ) + { SF Opp Link }, query_filters ( ) + { Id != \\'a1_value0\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Expectedrevenue)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Expectedrevenue, 2, 1, SF Opp Link)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Expectedrevenue, 2, 1, SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Expectedrevenue , 99 , \\'asc\\' )\\\",\\\"percentile ( Expectedrevenue , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Expectedrevenue > 10) , SF Opp Link )\\\",\\\"unique_count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"SF Opp Link in { \\'a0_value0\\' , \\'a0_value1\\' }\\\",\\\"SF Opp Link not in { \\'a0_value0\\' , \\'a0_value1\\' ,\\'a0_value2\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Closedate >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Closedate <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Closedate, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else if ( Amount > 100 and SF Opp Link = \\'a0_value0\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Closedate ) = 2024\\\",\\\"month ( Closedate ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\n**Date Keywords**\\n\\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\\n\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Closedate] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 7 days\\'\\\",\\\"[Closedate] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Closedate] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Closedate] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Closedate] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march\\'\\\",\\\"[Closedate] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Closedate] = \\'Saturday\\'\\\",\\\"[Closedate] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march 2024\\'\\\",\\\"[Closedate] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Closedate] = \\'this day\\'\\\",\\\"[Closedate] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 2 quarters for each year\\'\\\",\\\"[Closedate] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Closedate].yearly\\\",\\\"[Closedate].quarterly\\\",\\\"[Closedate].monthly\\\",\\\"[Closedate].weekly\\\",\\\"[Closedate].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Closedate] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].daily month over month\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly year over year\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Closedate].\\'day of month\\'\\\",\\\"[Closedate].\\'month of year\\'\\\",\\\"[Closedate].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Closedate] = \\'10 months ago\\'\\\",\\\"[Closedate] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Closedate] detailed\\\"]}\\n\\n\\n**Instructions:**\\n\\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\\n\\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\\n\\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today\\'s date in\\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\\n\\n### **Additional Rules for Generating Phrase Tokens**\\n\\n1. **Including Output Columns**\\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\\n    - Choose the output column based on the context of the query.\\n    - **Example**:\\n       - *Invalid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"}`\\n       - *Valid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column3]\\\"}`\\n2. **Expanding Month Abbreviations**\\n    - Expand month abbreviations (e.g., \\'Jan\\', \\'Feb\\') to full names when used as **date filters** in phrase tokens.\\n    - Do **not** expand them if used as filter values in **non-date columns**.\\n3. **Count and Unique Count Usage**\\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\\n    - Do **not** apply them to **measures** or numeric columns.\\n4. **Numeric Comparisons in Formulas**\\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\\n5. **Representing Date Filters in Formulas**\\n    - In **formula expressions**, represent date filters like `\\'last month\\'` using functions such as `diff_months` or `to_date` that calculate the date range.\\n6. **Avoid Redundant Formulas**\\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don\\'t need to create an additional formula for it.\\n    - **Example to Avoid**:\\n       - `{\\\"tokens\\\": \\\"[Measure]\\\", \\\"formulas\\\": [{\\\"name\\\": \\\"Total Measure\\\", \\\"expression\\\": \\\"sum(Measure)\\\"}]}`\\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\\n7. **Filtering on Null Values**\\n    - When filtering on **null values**, encapsulate `\\'null\\'` in single quotes and curly braces `{ }`, like `\\'{null}\\'`.\\n    - **Example**: `[column] != \\'{null}\\'`\\n8. **Growth of phrase cannot co-exist with versus phrase**\\n    - If there is a growth phrase like: \\'growth of sum [measure] by [date] [date].monthly\\', it cannot co-exist with \\'[attribute] = \\'value\\' vs [attribute] = \\'value\\'\\'. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = \\'value\\' [attribute] = \\'value\\' where \\'vs\\' keyword is removed.\\n9. **Avoid Counting and Grouping on the Same Column**\\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\\n10. **Avoid adding \\'by\\' keyword to date bucket**\\n    - When using date bucket in the final answer, do not add \\'by\\' keyword. Remove by keyword and just add date bucket alone.\\n11. **Query-on-Query Intent**:\\n     - **Definition**:\\n        - Occurs when the user\\'s query references previous results or includes subquery logic, similar to SQL subqueries.\\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\\342\\200\\224conditions on the **same column** that cannot be true simultaneously in a single row.\\n     - **Handling Subqueries**:\\n        - Represent such queries using the `in` or `not in` keywords.\\n     - **Syntax**:\\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\\n     - **Application**:\\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\\n        - To determine if a query has subquery intent, rephrase the user\\'s query to make it clear and unambiguous, accurately capturing their intent.\\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\\n\\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\\n\\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\\n\\n\\n**Single Query Examples**\\n\\n{\\\"query\\\":\\\"For every year, which SF Opp Link had largest Expectedrevenue.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\\\"}\\n{\\\"query\\\":\\\"which SF Opp Links had the most increase in Expectedrevenue this year compared to last year\\\",\\\"desc\\\":\\\"In this query, we are determining which \\'SF Opp Link\\'s have experienced the greatest increase in \\'Expectedrevenue\\' from last year to this year. The data is grouped by \\'SF Opp Link\\', calculating the sum of \\'Expectedrevenue\\' for each one for both years. The formula \\'Expectedrevenue ( this year )\\' computes the sum of \\'Expectedrevenue\\' for each \\'SF Opp Link\\' where \\'Closedate\\' falls within the current year (\\'diff_years(Closedate, today()) = 0\\'). Similarly, \\'Expectedrevenue ( last year )\\' calculates the sum for the previous year (\\'diff_years(Closedate, today()) = -1\\'). The \\'change\\' is then determined by subtracting last year\\'s sum from this year\\'s for each \\'SF Opp Link\\' using \\'change = Expectedrevenue ( this year ) - Expectedrevenue ( last year )\\'. Finally, the results are sorted by \\'change\\' in descending order to highlight the \\'SF Opp Link\\'s with the most significant increases in \\'Expectedrevenue\\'.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue ( this year )] [Expectedrevenue ( last year )] [change] sort by [change] descending\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"change\\\",\\\"expression\\\":\\\"Expectedrevenue ( this year ) - Expectedrevenue ( last year )\\\"},{\\\"name\\\":\\\"Expectedrevenue ( this year )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_years ( Closedate , today() ) = 0 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue ( last year )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_years ( Closedate , today() ) = -1 } )\\\"}]}\\n{\\\"query\\\":\\\"show SF Opp Links with the highest Expectedrevenue this year\\\",\\\"tokens\\\":\\\"[SF Opp Link] sort by [Expectedrevenue] descending [Closedate] = \\'this year\\'\\\"}\\n{\\\"query\\\":\\\"what is percentage of Expectedrevenue broken down by SF Opp Link in 2024\\\",\\\"desc\\\":\\\"In this query, we are calculating the percentage of \\'Expectedrevenue\\' broken down by \\'SF Opp Link\\' for the year 2024. The main query groups the data by \\'SF Opp Link\\' and applies the filter \\'Closedate = \\'2024\\'\\'. The denominator (\\'Expectedrevenue (all)\\') is computed using \\'group_aggregate(sum(Expectedrevenue), query_groups() - { SF Opp Link }, query_filters())\\', which aggregates \\'Expectedrevenue\\' while removing \\'SF Opp Link\\' from the groupings\\342\\200\\224effectively summing \\'Expectedrevenue\\' for the entire year 2024 without distinction of \\'SF Opp Link\\'. The numerator (\\'Expectedrevenue by SF Opp Link\\') is calculated with \\'group_aggregate(sum(Expectedrevenue), query_groups(), query_filters())\\', utilizing the main query\\'s groupings and filters. The percentage of \\'Expectedrevenue\\' is then determined by dividing the numerator by the denominator for each \\'SF Opp Link\\' and multiplying by 100.\\\",\\\"tokens\\\":\\\"[percentage of Expectedrevenue] [Closedate] = \\'2024\\' by [SF Opp Link]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue (all)\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) - { SF Opp Link } , query_filters ( ) )\\\"},{\\\"name\\\":\\\"Expectedrevenue by SF Opp Link\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) )\\\"},{\\\"name\\\":\\\"percentage Expectedrevenue\\\",\\\"expression\\\":\\\"Expectedrevenue by SF Opp Link / Expectedrevenue (all) * 100\\\"}]}\\n{\\\"query\\\":\\\"which SF Opp Link had the lowest/least average Expectedrevenue\\\",\\\"tokens\\\":\\\"bottom 1 [SF Opp Link] sort by average [Expectedrevenue]\\\"}\\n{\\\"query\\\":\\\"What is the difference in number of SF Opp Links between May 2024 and Aug 2024\\\",\\\"desc\\\":\\\"In this query, we are calculating the difference in the number of unique \\'SF Opp Link\\'s between May 2024 and August 2024. The main query does not include any groupings, so data is aggregated without grouping. The formula \\'SF Opp Links May 2024\\' computes the unique count of \\'SF Opp Link\\' for May 2024 using \\'group_aggregate(unique count(SF Opp Link), query_groups(), query_filters() + { month(Closedate) = \\'May\\', year(Closedate) = 2024 })\\'. Similarly, \\'SF Opp Links Aug 2024\\' calculates the unique count for August 2024. The difference is then found by subtracting \\'SF Opp Links Aug 2024\\' from \\'SF Opp Links May 2024\\' using the formula \\'difference in SF Opp Links between May 2024 and Aug 2024 = SF Opp Links May 2024 - SF Opp Links Aug 2024\\'.\\\",\\\"tokens\\\":\\\"[difference in SF Opp Links between May 2024 and Aug 2024]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"SF Opp Links May 2024\\\",\\\"expression\\\":\\\"group_aggregate ( unique count ( SF Opp Link ) , query_groups() , query_filters() + { month ( Closedate ) = \\'May\\' , year ( Closedate ) = 2024 } )\\\"},{\\\"name\\\":\\\"SF Opp Links Aug 2024\\\",\\\"expression\\\":\\\"group_aggregate ( unique count ( SF Opp Link ) , query_groups() , query_filters() + { month ( Closedate ) = \\'August\\' , year ( Closedate ) = 2024 } )\\\"},{\\\"name\\\":\\\"difference in SF Opp Links between May 2024 and Aug 2024\\\",\\\"expression\\\":\\\"SF Opp Links May 2024 - SF Opp Links Aug 2024\\\"}]}\\n{\\\"query\\\":\\\"show SF Opp Link with highest Expectedrevenue in every year.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\\\"}\\n{\\\"query\\\":\\\"what is total count SF Opp Link in march 2024 as percentage of total count Id in march 2023\\\",\\\"tokens\\\":\\\"[percentage of SF Opp Link in March 2024 over Id in March 2023]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Total Count SF Opp Link in March 2024\\\",\\\"expression\\\":\\\"count_if( ( Closedate >= to_date ( \\'03/01/2024\\' , \\'%m/%d/%Y\\' ) and Closedate <= to_date ( \\'03/31/2024\\' , \\'%m/%d/%Y\\' ) ), SF Opp Link)\\\"},{\\\"name\\\":\\\"Total Count Id in March 2023\\\",\\\"expression\\\":\\\"count_if( ( Closedate >= to_date ( \\'03/01/2023\\' , \\'%m/%d/%Y\\' ) and Closedate <= to_date ( \\'03/31/2023\\' , \\'%m/%d/%Y\\' ) ), Id)\\\"},{\\\"name\\\":\\\"percentage of SF Opp Link in March 2024 over Id in March 2023\\\",\\\"expression\\\":\\\"Total Count SF Opp Link in March 2024 / Total Count Id in March 2023 * 100\\\"}]}\\n{\\\"query\\\":\\\"which SF Opp Links had Expectedrevenue more than the average Expectedrevenue in last 60 days\\\",\\\"desc\\\":\\\"In this query, we are identifying which `SF Opp Link`s have a `Expectedrevenue` greater than the average `Expectedrevenue` over the last 60 days. The main query filters the data to include only records where `Closedate = \\'last 60 days\\'` and groups the data by `SF Opp Link`. The average `Expectedrevenue` across all records in the last 60 days is calculated using `group_aggregate(average(Expectedrevenue), { }, query_filters())`, which computes the average without any groupings. The expression `sum(Expectedrevenue) > average Expectedrevenue` then compares the total `Expectedrevenue` for each `SF Opp Link` (since `sum(Expectedrevenue)` is computed per `SF Opp Link` due to the grouping) to the overall average `Expectedrevenue`.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue more than the average Expectedrevenue] = true [Closedate] = \\'last 60 days\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"average Expectedrevenue\\\",\\\"expression\\\":\\\"group_aggregate ( average ( Expectedrevenue ) , { } , query_filters ( ) )\\\"},{\\\"name\\\":\\\"Expectedrevenue more than the average Expectedrevenue\\\",\\\"expression\\\":\\\"sum ( Expectedrevenue ) > average Expectedrevenue\\\"}]}\\n{\\\"query\\\":\\\"show Expectedrevenue declining in last 2 years for all SF Opp Links quarterly\\\",\\\"tokens\\\":\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].quarterly [Closedate] = \\'last 2 years\\' [SF Opp Link]\\\"}\\n{\\\"query\\\":\\\"which was my best performing SF Opp Link last quarter\\\",\\\"desc\\\":\\\"Use the \\'top 1\\' format when the query specifically asks for the single highest or \\'best\\' result in a given category or metric. This format directly retrieves the highest-ranking item based on the specified measure and is appropriate for queries that require a definitive top performer without the need for viewing other close contenders.\\\",\\\"tokens\\\":\\\"top 1 [SF Opp Link] sort by [Expectedrevenue] [Closedate] = \\'last quarter\\'\\\"}\\n{\\\"query\\\":\\\"how many SF Opp Link by Id were there last month\\\",\\\"tokens\\\":\\\"unique count [SF Opp Link] by [Id] [Closedate] = \\'last month\\'\\\"}\\n{\\\"query\\\":\\\"which SF Opp Link is growing fastest in 2024\\\",\\\"desc\\\":\\\"moving_sum ( Expectedrevenue , 1 , 1 , Closedate ) implies sum of Expectedrevenue in the internal \\'Closedate - 1\\' and \\'Closedate + 1\\'. Since the query asks for fastest growing SF Opp Links, use the formula to compute absolute difference in moving_sum between today and yesterday. Then use sage keywords to find top SF Opp Link for the absolute difference.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue] [Closedate] = \\'2024\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"absolute change in Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\\\"}]}\\n{\\\"query\\\":\\\"for my top 10 SF Opp Link last year, what are the monthly Expectedrevenue this year\\\",\\\"desc\\\":\\\"First, use a top sub-query to find the top 10 attributes last year. Then, use that attribute in the main query to find their monthly measure this year.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Closedate].monthly [Expectedrevenue] [Closedate] = \\'this year\\' [SF Opp Link] in ( [SF Opp Link] [Closedate] = \\'last year\\' top 10 [SF Opp Link] sort by [Expectedrevenue] )\\\"}\\n{\\\"query\\\":\\\"how has the Expectedrevenue changed over the years for the top 5 SF Opp Link by Expectedrevenue\\\",\\\"desc\\\":\\\"First, find the top 5 SF Opp Link by Expectedrevenue. Then, for these SF Opp Link, display their Expectedrevenue per year to show how it has changed over the years by using IN sub-query to join with the main query.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue] [Closedate].yearly [SF Opp Link] in ( [SF Opp Link] top 5 [SF Opp Link] sort by sum [Expectedrevenue] )\\\"}\"\n}\nchat_messages {\n  role: USER\n  content: \"### **User Query**\\n\\nUser Query: total closed won opps in 2024\\n\\n\\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\\342\\200\\224only their names should be included.\\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\\n\\n\\n### **Step-by-Step Guidance for Generating Phrase Tokens**\\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\\n\\n1. **Rephrase the User\\'s Query**\\n   - Rephrase the latest user\\'s query to make it clear and unambiguous, accurately capturing the user\\'s intent.\\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\\n   - The rephrased query should be easily translatable into SQL for data retrieval.\\n   - Use the rephrased query to generate the phrase tokens.\\n2. **Consult Provided Resources**\\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\\n3. **Generate Phrase Tokens Methodically**\\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\\n4. **Ensure Strict Compliance**\\n   - Follow all instructions exactly as given.\\n   - Do **not** invent or assume any information not provided.\\n   - Avoid adding any unlisted elements.\\n5. **Review for Accuracy**\\n   - Verify that the tokens fully represent the user\\'s query and adhere to all guidelines.\\n   - Check for any errors or omissions before finalizing.\\n\\n### **Response Format**\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"rephrasedQuery\\\": \\\"\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"\\\",\\n    \\\"stepByStepThinking\\\": \\\"\\\"\\n  },\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\": [\\n    {\\n      \\\"name\\\": \\\"\\\",\\n      \\\"expression\\\": \\\"\\\"\\n    }\\n  ]\\n}\"\n}\n"}]}, {"timestamp": 1735845989917000, "fields": [{"key": "event.log", "type": "string", "value": "Response from LLM Gateway:\ncompletions {\n  id: \"chatcmpl-AlL7rezW3xPIzu1RAZvU4HOTIjhlM\"\n  created: 1735845987\n  choices {\n    text: \"{\\n  \\\"rephrasedQuery\\\": \\\"Total number of closed won opportunities in 2024\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The query is asking for the total count of opportunities that are closed and won in the year 2024.\\\",\\n    \\\"stepByStepThinking\\\": \\\"1. Identify the relevant columns: \\'Isclosed\\', \\'Iswon\\', and \\'Closedate\\'. 2. Apply filters to select records where \\'Isclosed\\' is true, \\'Iswon\\' is true, and \\'Closedate\\' is in 2024. 3. Use the \\'count\\' function to get the total number of such records.\\\"\\n  },\\n  \\\"tokens\\\": \\\"[count of closed won opps] [Isclosed] = \\'1\\' [Iswon] = \\'1\\' [Closedate] = \\'2024\\'\\\",\\n  \\\"formulas\\\": [\\n    {\\n      \\\"name\\\": \\\"count of closed won opps\\\",\\n      \\\"expression\\\": \\\"count ( Id )\\\"\\n    }\\n  ]\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 209\n    prompt_tokens: 11407\n    total_tokens: 11616\n  }\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "e9dbe7400db98236", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "1d79e49915fdb96d"}], "startTime": 1735845986387000, "duration": 87, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "90a180765f2a07eb", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "c092a6e20e8d3dab"}], "startTime": 1735845986388000, "duration": 232, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "bf8f1ece794b38b5", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "c092a6e20e8d3dab"}], "startTime": 1735845986388000, "duration": 56, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "cb290faf11beddbc", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "c092a6e20e8d3dab"}], "startTime": 1735845986389000, "duration": 52, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "49db539617f9cd63", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "cc29063d88821099"}], "startTime": 1735845986393000, "duration": 3524040, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "cc29063d88821099", "flags": 1, "operationName": "getResponseFromTimedRPCCall", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "d01f0d47980f84dc"}], "startTime": 1735845986393000, "duration": 3524140, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "09f2452a54365510", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "49db539617f9cd63"}], "startTime": 1735845986395000, "duration": 3521112, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.llmgateway.LLMCompletionsService/Complete"}, {"key": "peer.address", "type": "string", "value": "10.252.226.13:33976"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "05aecb0a1ffa3eec", "flags": 1, "operationName": "getLLMConfigMap", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "05aa8710807fa7ab"}], "startTime": 1735845986396000, "duration": 200, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "d5962f4189c2cefe", "flags": 1, "operationName": "getDefaultModel", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "9126c28517371f66"}], "startTime": 1735845986396000, "duration": 22, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "05aa8710807fa7ab", "flags": 1, "operationName": "getProtoResponseWithCustomModel", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "55d314aadf3630ef"}], "startTime": 1735845986396000, "duration": 3519592, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845986401000, "fields": [{"key": "event.log", "type": "string", "value": "Completions proto request: headers {\n  tenant_id: \"fa794c92-1470-11ee-8c81-cbe72\"\n  client_id: \"eureka-searcher\"\n  request_id: \"c7177405-06bd-4bac-ba6d-593c64cfe0bf\"\n  org_id: \"33363357\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"**Task:**\\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\\n\\nYou are given the following:\\n1. Definition & rules of the language.\\n2. References for which functions and keywords to use with examples.\\n3. Table Schema with column names, their data type, synonyms & sample values.\\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\\n5. Chat History, if any, containing all the previous interactions between user and assistant.\\n\\n**Definitions and Rules of the Phrase Token Language:**\\n\\n### **Key Definitions**\\n\\n1. **Column Types**\\n\\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\\n\\n2. **Output Columns**\\n\\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `\\' \\'`.\\n- **Examples**:\\n  - **Output Column**: [column]\\n  - **Filter Applied**: [column] = \\'value\\'\\n\\n3. **Filters**\\n\\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `\\' \\'`. The general format is `[column] operator \\'value\\'`.\\n- **Filter Logic**:\\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\\n    - **Example**: [column] = \\'value1\\' [column] = \\'value2\\'\\n    *(Matches records where `column` is \\'value1\\' **or** \\'value2\\')*\\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\\n    - **Example**: [column1] = \\'value1\\' [column2] = \\'value2\\'\\n    *(Matches records where `column1` is \\'value1\\' **and** `column2` is \\'value2\\')*\\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].\\'value\\'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\\n\\n4. **Formulas**\\n\\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\\n- **Usage**:\\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\\n- **Structure**:\\n  - **Formulas Field**:\\n    \\\"formulas\\\": [\\n      {\\n        \\\"name\\\": \\\"<formula_name>\\\",\\n        \\\"expression\\\": \\\"<formula_expression>\\\"\\n      },\\n      ...\\n    ]\\n  - **Tokens Field Example**:\\n    {\\n      \\\"tokens\\\": \\\"[Formula Name] by [Column Name]\\\",\\n      \\\"formulas\\\": [ ... ]\\n    }\\n- **Key Points**:\\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user\\'s query, for example, pick a relevant substring of the query.\\n  - **Expressions**:\\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\\n    - Refer to the examples provided later for formula syntax and better understanding.\\n  - **Dependencies**:\\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\", then you cannot apply \\\"sum ( unique users )\\\"\\\" because it is already aggregated i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n**5. Column and Value Selection**\\n\\n- **Column Selection**:\\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user\\'s query. Columns are sorted by relevance in the schema, with the most relevant first.\\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\\n\\n- **Value Selection**:\\n  - **Use Schema Values**:\\n    - When applying filters, prioritize sample values from the schema that match the user\\'s query.\\n  - **If Values Are Missing**:\\n    - If matching values are not found in the schema, you may:\\n    - Select the nearest appropriate value from the schema.\\n    - Generate a suitable value based on the query context.\\n    Choose the approach that best captures the user\\'s intent, without bias towards the schema.\\n  - **Ensure Relevance**:\\n    - Only include values that make sense within the context of the query.\\n    - Avoid illogical or irrelevant values.\\n\\n### **Table Schema**\\n\\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\\n\\nCREATE TABLE TSEMBED (\\nClosedate date /* Values: \\'2024\\' Current year is 2025.. Group: TSEMBED Dev Org - Opps.*/,\\nCreateddate date /* Values: \\'2024\\'. Group: TSEMBED Dev Org - Opps.*/,\\nAccount Createddate date /* Values: \\'2024\\'. Group: TSEMBED Dev Org Export - Account.*/,\\nSF Opp Link text /*. Group: TSEMBED Dev Org - Opps.*/,\\nId text /*. Group: TSEMBED Dev Org - Opps.*/,\\nPartneraccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nExpectedrevenue int /*. Group: TSEMBED Dev Org - Opps.*/,\\nOwnerid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nStagename text /*. Group: TSEMBED Dev Org - Opps.*/,\\nType text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAmount int /*. Group: TSEMBED Dev Org - Opps.*/,\\nDescription text /*. Group: TSEMBED Dev Org - Opps.*/,\\nForecastcategory text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nIswon int /*. Group: TSEMBED Dev Org - Opps.*/,\\nName text /*. Group: TSEMBED Dev Org - Opps.*/,\\nLastactivitydate text /*. Group: TSEMBED Dev Org - Opps.*/,\\nIsclosed int /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nParentid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nNumberofemployees int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinggeocodeaccuracy text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAnnualrevenue int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccountnumber text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nActive C text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nTickersymbol text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Ownerid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nCreatedbyid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nWebsite text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nPhone text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Type text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Name text /*. Group: TSEMBED Dev Org Export - Account.*/)\\n\\n### **Supported Keyword and Function References with Examples**\\n\\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\\n\\n**Relevant Keywords for Phrase Tokens**\\n\\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\\n\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [SF Opp Link] sort by [Expectedrevenue]\\\",\\\"bottom 25 [SF Opp Link] sort by count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Expectedrevenue] ascending\\\",\\\"sort by count [SF Opp Link] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[SF Opp Link] begins with \\'a0_value0\\'\\\",\\\"[SF Opp Link] ends with \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[SF Opp Link] contains \\'a0_value0\\'\\\",\\\"[SF Opp Link] contains \\'a0_value0\\' \\'a0_value1\\'\\\",\\\"[SF Opp Link] not contains \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Expectedrevenue] [SF Opp Link] = \\'a0_value0\\' vs [SF Opp Link] = \\'a0_value1\\'\\\",\\\"[Expectedrevenue] [Closedate] = \\'this year\\' vs [Closedate] = \\'last year\\'\\\",\\\"[Amount] [Id] = \\'a1_value0\\' vs [Id] = \\'a1_value1\\' vs [Id] = \\'a1_value2\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[SF Opp Link] in ([SF Opp Link] [SF Opp Link] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\\\",\\\"[SF Opp Link] not in ([SF Opp Link] [SF Opp Link] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Expectedrevenue]\\\",\\\"average [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [SF Opp Link]\\\"]}\\n\\n\\n**Function References for Formulas**\\n\\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\\n\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Expectedrevenue > 10), SF Opp Link )\\\",\\\"count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Expectedrevenue, SF Opp Link, Id)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Expectedrevenue, SF Opp Link)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Expectedrevenue ) , { SF Opp Link } , { } )\\\",\\\"group_aggregate ( stddev ( Expectedrevenue ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Expectedrevenue ), { SF Opp Link , Id }, { day_of_week ( Closedate ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Amount ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( Id ), query_groups ( ) + { SF Opp Link }, query_filters ( ) - { Id } )\\\",\\\"group_aggregate ( unique count ( Id ) , query_groups ( ) + { SF Opp Link }, query_filters ( ) + { Id != \\'a1_value0\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Expectedrevenue)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Expectedrevenue, 2, 1, SF Opp Link)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Expectedrevenue, 2, 1, SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Expectedrevenue , 99 , \\'asc\\' )\\\",\\\"percentile ( Expectedrevenue , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Expectedrevenue > 10) , SF Opp Link )\\\",\\\"unique_count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"SF Opp Link in { \\'a0_value0\\' , \\'a0_value1\\' }\\\",\\\"SF Opp Link not in { \\'a0_value0\\' , \\'a0_value1\\' ,\\'a0_value2\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Closedate >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Closedate <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Closedate, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else if ( Amount > 100 and SF Opp Link = \\'a0_value0\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Closedate ) = 2024\\\",\\\"month ( Closedate ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\n**Date Keywords**\\n\\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\\n\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Closedate] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 7 days\\'\\\",\\\"[Closedate] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Closedate] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Closedate] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Closedate] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march\\'\\\",\\\"[Closedate] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Closedate] = \\'Saturday\\'\\\",\\\"[Closedate] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march 2024\\'\\\",\\\"[Closedate] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Closedate] = \\'this day\\'\\\",\\\"[Closedate] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 2 quarters for each year\\'\\\",\\\"[Closedate] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Closedate].yearly\\\",\\\"[Closedate].quarterly\\\",\\\"[Closedate].monthly\\\",\\\"[Closedate].weekly\\\",\\\"[Closedate].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Closedate] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].daily month over month\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly year over year\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Closedate].\\'day of month\\'\\\",\\\"[Closedate].\\'month of year\\'\\\",\\\"[Closedate].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Closedate] = \\'10 months ago\\'\\\",\\\"[Closedate] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Closedate] detailed\\\"]}\\n\\n\\n**Instructions:**\\n\\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\\n\\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\\n\\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today\\'s date in\\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\\n\\n### **Additional Rules for Generating Phrase Tokens**\\n\\n1. **Including Output Columns**\\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\\n    - Choose the output column based on the context of the query.\\n    - **Example**:\\n       - *Invalid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"}`\\n       - *Valid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column3]\\\"}`\\n2. **Expanding Month Abbreviations**\\n    - Expand month abbreviations (e.g., \\'Jan\\', \\'Feb\\') to full names when used as **date filters** in phrase tokens.\\n    - Do **not** expand them if used as filter values in **non-date columns**.\\n3. **Count and Unique Count Usage**\\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\\n    - Do **not** apply them to **measures** or numeric columns.\\n4. **Numeric Comparisons in Formulas**\\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\\n5. **Representing Date Filters in Formulas**\\n    - In **formula expressions**, represent date filters like `\\'last month\\'` using functions such as `diff_months` or `to_date` that calculate the date range.\\n6. **Avoid Redundant Formulas**\\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don\\'t need to create an additional formula for it.\\n    - **Example to Avoid**:\\n       - `{\\\"tokens\\\": \\\"[Measure]\\\", \\\"formulas\\\": [{\\\"name\\\": \\\"Total Measure\\\", \\\"expression\\\": \\\"sum(Measure)\\\"}]}`\\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\\n7. **Filtering on Null Values**\\n    - When filtering on **null values**, encapsulate `\\'null\\'` in single quotes and curly braces `{ }`, like `\\'{null}\\'`.\\n    - **Example**: `[column] != \\'{null}\\'`\\n8. **Growth of phrase cannot co-exist with versus phrase**\\n    - If there is a growth phrase like: \\'growth of sum [measure] by [date] [date].monthly\\', it cannot co-exist with \\'[attribute] = \\'value\\' vs [attribute] = \\'value\\'\\'. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = \\'value\\' [attribute] = \\'value\\' where \\'vs\\' keyword is removed.\\n9. **Avoid Counting and Grouping on the Same Column**\\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\\n10. **Avoid adding \\'by\\' keyword to date bucket**\\n    - When using date bucket in the final answer, do not add \\'by\\' keyword. Remove by keyword and just add date bucket alone.\\n11. **Query-on-Query Intent**:\\n     - **Definition**:\\n        - Occurs when the user\\'s query references previous results or includes subquery logic, similar to SQL subqueries.\\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\\342\\200\\224conditions on the **same column** that cannot be true simultaneously in a single row.\\n     - **Handling Subqueries**:\\n        - Represent such queries using the `in` or `not in` keywords.\\n     - **Syntax**:\\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\\n     - **Application**:\\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\\n        - To determine if a query has subquery intent, rephrase the user\\'s query to make it clear and unambiguous, accurately capturing their intent.\\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\\n\\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\\n\\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\\n\\n\\n**Single Query Examples**\\n\\n{\\\"query\\\":\\\"For every year, which SF Opp Link had largest Expectedrevenue.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\\\"}\\n{\\\"query\\\":\\\"which SF Opp Links had the most increase in Expectedrevenue this year compared to last year\\\",\\\"desc\\\":\\\"In this query, we are determining which \\'SF Opp Link\\'s have experienced the greatest increase in \\'Expectedrevenue\\' from last year to this year. The data is grouped by \\'SF Opp Link\\', calculating the sum of \\'Expectedrevenue\\' for each one for both years. The formula \\'Expectedrevenue ( this year )\\' computes the sum of \\'Expectedrevenue\\' for each \\'SF Opp Link\\' where \\'Closedate\\' falls within the current year (\\'diff_years(Closedate, today()) = 0\\'). Similarly, \\'Expectedrevenue ( last year )\\' calculates the sum for the previous year (\\'diff_years(Closedate, today()) = -1\\'). The \\'change\\' is then determined by subtracting last year\\'s sum from this year\\'s for each \\'SF Opp Link\\' using \\'change = Expectedrevenue ( this year ) - Expectedrevenue ( last year )\\'. Finally, the results are sorted by \\'change\\' in descending order to highlight the \\'SF Opp Link\\'s with the most significant increases in \\'Expectedrevenue\\'.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue ( this year )] [Expectedrevenue ( last year )] [change] sort by [change] descending\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"change\\\",\\\"expression\\\":\\\"Expectedrevenue ( this year ) - Expectedrevenue ( last year )\\\"},{\\\"name\\\":\\\"Expectedrevenue ( this year )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_years ( Closedate , today() ) = 0 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue ( last year )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_years ( Closedate , today() ) = -1 } )\\\"}]}\\n{\\\"query\\\":\\\"show SF Opp Links with the highest Expectedrevenue this year\\\",\\\"tokens\\\":\\\"[SF Opp Link] sort by [Expectedrevenue] descending [Closedate] = \\'this year\\'\\\"}\\n{\\\"query\\\":\\\"what is percentage of Expectedrevenue broken down by SF Opp Link in 2024\\\",\\\"desc\\\":\\\"In this query, we are calculating the percentage of \\'Expectedrevenue\\' broken down by \\'SF Opp Link\\' for the year 2024. The main query groups the data by \\'SF Opp Link\\' and applies the filter \\'Closedate = \\'2024\\'\\'. The denominator (\\'Expectedrevenue (all)\\') is computed using \\'group_aggregate(sum(Expectedrevenue), query_groups() - { SF Opp Link }, query_filters())\\', which aggregates \\'Expectedrevenue\\' while removing \\'SF Opp Link\\' from the groupings\\342\\200\\224effectively summing \\'Expectedrevenue\\' for the entire year 2024 without distinction of \\'SF Opp Link\\'. The numerator (\\'Expectedrevenue by SF Opp Link\\') is calculated with \\'group_aggregate(sum(Expectedrevenue), query_groups(), query_filters())\\', utilizing the main query\\'s groupings and filters. The percentage of \\'Expectedrevenue\\' is then determined by dividing the numerator by the denominator for each \\'SF Opp Link\\' and multiplying by 100.\\\",\\\"tokens\\\":\\\"[percentage of Expectedrevenue] [Closedate] = \\'2024\\' by [SF Opp Link]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue (all)\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) - { SF Opp Link } , query_filters ( ) )\\\"},{\\\"name\\\":\\\"Expectedrevenue by SF Opp Link\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) )\\\"},{\\\"name\\\":\\\"percentage Expectedrevenue\\\",\\\"expression\\\":\\\"Expectedrevenue by SF Opp Link / Expectedrevenue (all) * 100\\\"}]}\\n{\\\"query\\\":\\\"which SF Opp Link had the lowest/least average Expectedrevenue\\\",\\\"tokens\\\":\\\"bottom 1 [SF Opp Link] sort by average [Expectedrevenue]\\\"}\\n{\\\"query\\\":\\\"What is the difference in number of SF Opp Links between May 2024 and Aug 2024\\\",\\\"desc\\\":\\\"In this query, we are calculating the difference in the number of unique \\'SF Opp Link\\'s between May 2024 and August 2024. The main query does not include any groupings, so data is aggregated without grouping. The formula \\'SF Opp Links May 2024\\' computes the unique count of \\'SF Opp Link\\' for May 2024 using \\'group_aggregate(unique count(SF Opp Link), query_groups(), query_filters() + { month(Closedate) = \\'May\\', year(Closedate) = 2024 })\\'. Similarly, \\'SF Opp Links Aug 2024\\' calculates the unique count for August 2024. The difference is then found by subtracting \\'SF Opp Links Aug 2024\\' from \\'SF Opp Links May 2024\\' using the formula \\'difference in SF Opp Links between May 2024 and Aug 2024 = SF Opp Links May 2024 - SF Opp Links Aug 2024\\'.\\\",\\\"tokens\\\":\\\"[difference in SF Opp Links between May 2024 and Aug 2024]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"SF Opp Links May 2024\\\",\\\"expression\\\":\\\"group_aggregate ( unique count ( SF Opp Link ) , query_groups() , query_filters() + { month ( Closedate ) = \\'May\\' , year ( Closedate ) = 2024 } )\\\"},{\\\"name\\\":\\\"SF Opp Links Aug 2024\\\",\\\"expression\\\":\\\"group_aggregate ( unique count ( SF Opp Link ) , query_groups() , query_filters() + { month ( Closedate ) = \\'August\\' , year ( Closedate ) = 2024 } )\\\"},{\\\"name\\\":\\\"difference in SF Opp Links between May 2024 and Aug 2024\\\",\\\"expression\\\":\\\"SF Opp Links May 2024 - SF Opp Links Aug 2024\\\"}]}\\n{\\\"query\\\":\\\"show SF Opp Link with highest Expectedrevenue in every year.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\\\"}\\n{\\\"query\\\":\\\"what is total count SF Opp Link in march 2024 as percentage of total count Id in march 2023\\\",\\\"tokens\\\":\\\"[percentage of SF Opp Link in March 2024 over Id in March 2023]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Total Count SF Opp Link in March 2024\\\",\\\"expression\\\":\\\"count_if( ( Closedate >= to_date ( \\'03/01/2024\\' , \\'%m/%d/%Y\\' ) and Closedate <= to_date ( \\'03/31/2024\\' , \\'%m/%d/%Y\\' ) ), SF Opp Link)\\\"},{\\\"name\\\":\\\"Total Count Id in March 2023\\\",\\\"expression\\\":\\\"count_if( ( Closedate >= to_date ( \\'03/01/2023\\' , \\'%m/%d/%Y\\' ) and Closedate <= to_date ( \\'03/31/2023\\' , \\'%m/%d/%Y\\' ) ), Id)\\\"},{\\\"name\\\":\\\"percentage of SF Opp Link in March 2024 over Id in March 2023\\\",\\\"expression\\\":\\\"Total Count SF Opp Link in March 2024 / Total Count Id in March 2023 * 100\\\"}]}\\n{\\\"query\\\":\\\"which SF Opp Links had Expectedrevenue more than the average Expectedrevenue in last 60 days\\\",\\\"desc\\\":\\\"In this query, we are identifying which `SF Opp Link`s have a `Expectedrevenue` greater than the average `Expectedrevenue` over the last 60 days. The main query filters the data to include only records where `Closedate = \\'last 60 days\\'` and groups the data by `SF Opp Link`. The average `Expectedrevenue` across all records in the last 60 days is calculated using `group_aggregate(average(Expectedrevenue), { }, query_filters())`, which computes the average without any groupings. The expression `sum(Expectedrevenue) > average Expectedrevenue` then compares the total `Expectedrevenue` for each `SF Opp Link` (since `sum(Expectedrevenue)` is computed per `SF Opp Link` due to the grouping) to the overall average `Expectedrevenue`.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue more than the average Expectedrevenue] = true [Closedate] = \\'last 60 days\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"average Expectedrevenue\\\",\\\"expression\\\":\\\"group_aggregate ( average ( Expectedrevenue ) , { } , query_filters ( ) )\\\"},{\\\"name\\\":\\\"Expectedrevenue more than the average Expectedrevenue\\\",\\\"expression\\\":\\\"sum ( Expectedrevenue ) > average Expectedrevenue\\\"}]}\\n{\\\"query\\\":\\\"show Expectedrevenue declining in last 2 years for all SF Opp Links quarterly\\\",\\\"tokens\\\":\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].quarterly [Closedate] = \\'last 2 years\\' [SF Opp Link]\\\"}\\n{\\\"query\\\":\\\"which was my best performing SF Opp Link last quarter\\\",\\\"desc\\\":\\\"Use the \\'top 1\\' format when the query specifically asks for the single highest or \\'best\\' result in a given category or metric. This format directly retrieves the highest-ranking item based on the specified measure and is appropriate for queries that require a definitive top performer without the need for viewing other close contenders.\\\",\\\"tokens\\\":\\\"top 1 [SF Opp Link] sort by [Expectedrevenue] [Closedate] = \\'last quarter\\'\\\"}\\n{\\\"query\\\":\\\"how many SF Opp Link by Id were there last month\\\",\\\"tokens\\\":\\\"unique count [SF Opp Link] by [Id] [Closedate] = \\'last month\\'\\\"}\\n{\\\"query\\\":\\\"which SF Opp Link is growing fastest in 2024\\\",\\\"desc\\\":\\\"moving_sum ( Expectedrevenue , 1 , 1 , Closedate ) implies sum of Expectedrevenue in the internal \\'Closedate - 1\\' and \\'Closedate + 1\\'. Since the query asks for fastest growing SF Opp Links, use the formula to compute absolute difference in moving_sum between today and yesterday. Then use sage keywords to find top SF Opp Link for the absolute difference.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue] [Closedate] = \\'2024\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"absolute change in Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\\\"}]}\\n{\\\"query\\\":\\\"for my top 10 SF Opp Link last year, what are the monthly Expectedrevenue this year\\\",\\\"desc\\\":\\\"First, use a top sub-query to find the top 10 attributes last year. Then, use that attribute in the main query to find their monthly measure this year.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Closedate].monthly [Expectedrevenue] [Closedate] = \\'this year\\' [SF Opp Link] in ( [SF Opp Link] [Closedate] = \\'last year\\' top 10 [SF Opp Link] sort by [Expectedrevenue] )\\\"}\\n{\\\"query\\\":\\\"how has the Expectedrevenue changed over the years for the top 5 SF Opp Link by Expectedrevenue\\\",\\\"desc\\\":\\\"First, find the top 5 SF Opp Link by Expectedrevenue. Then, for these SF Opp Link, display their Expectedrevenue per year to show how it has changed over the years by using IN sub-query to join with the main query.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue] [Closedate].yearly [SF Opp Link] in ( [SF Opp Link] top 5 [SF Opp Link] sort by sum [Expectedrevenue] )\\\"}\"\n}\nchat_messages {\n  role: USER\n  content: \"### **User Query**\\n\\nUser Query: total closed won opps in 2024\\n\\n\\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\\342\\200\\224only their names should be included.\\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\\n\\n\\n### **Step-by-Step Guidance for Generating Phrase Tokens**\\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\\n\\n1. **Rephrase the User\\'s Query**\\n   - Rephrase the latest user\\'s query to make it clear and unambiguous, accurately capturing the user\\'s intent.\\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\\n   - The rephrased query should be easily translatable into SQL for data retrieval.\\n   - Use the rephrased query to generate the phrase tokens.\\n2. **Consult Provided Resources**\\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\\n3. **Generate Phrase Tokens Methodically**\\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\\n4. **Ensure Strict Compliance**\\n   - Follow all instructions exactly as given.\\n   - Do **not** invent or assume any information not provided.\\n   - Avoid adding any unlisted elements.\\n5. **Review for Accuracy**\\n   - Verify that the tokens fully represent the user\\'s query and adhere to all guidelines.\\n   - Check for any errors or omissions before finalizing.\\n\\n### **Response Format**\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"rephrasedQuery\\\": \\\"\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"\\\",\\n    \\\"stepByStepThinking\\\": \\\"\\\"\\n  },\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\": [\\n    {\\n      \\\"name\\\": \\\"\\\",\\n      \\\"expression\\\": \\\"\\\"\\n    }\\n  ]\\n}\"\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "55d314aadf3630ef", "flags": 1, "operationName": "complete", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "09f2452a54365510"}], "startTime": 1735845986396000, "duration": 3520038, "tags": [{"key": "component", "type": "string", "value": "eureka-llm-gateway"}, {"key": "pod.name", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc"}, {"key": "x.request.id", "type": "string", "value": "c7177405-06bd-4bac-ba6d-593c64cfe0bf"}, {"key": "self.ip", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc/10.252.224.191"}, {"key": "client.name", "type": "string", "value": "eureka-searcher"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845989916000, "fields": [{"key": "event.log", "type": "string", "value": "Completions response = completions {\n  id: \"chatcmpl-AlL7rezW3xPIzu1RAZvU4HOTIjhlM\"\n  created: 1735845987\n  choices {\n    text: \"{\\n  \\\"rephrasedQuery\\\": \\\"Total number of closed won opportunities in 2024\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The query is asking for the total count of opportunities that are closed and won in the year 2024.\\\",\\n    \\\"stepByStepThinking\\\": \\\"1. Identify the relevant columns: \\'Isclosed\\', \\'Iswon\\', and \\'Closedate\\'. 2. Apply filters to select records where \\'Isclosed\\' is true, \\'Iswon\\' is true, and \\'Closedate\\' is in 2024. 3. Use the \\'count\\' function to get the total number of such records.\\\"\\n  },\\n  \\\"tokens\\\": \\\"[count of closed won opps] [Isclosed] = \\'1\\' [Iswon] = \\'1\\' [Closedate] = \\'2024\\'\\\",\\n  \\\"formulas\\\": [\\n    {\\n      \\\"name\\\": \\\"count of closed won opps\\\",\\n      \\\"expression\\\": \\\"count ( Id )\\\"\\n    }\\n  ]\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 209\n    prompt_tokens: 11407\n    total_tokens: 11616\n  }\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "9126c28517371f66", "flags": 1, "operationName": "getLLMApiProperties", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "05aa8710807fa7ab"}], "startTime": 1735845986396000, "duration": 318, "tags": [{"key": "is-custom-model", "type": "string", "value": "false"}, {"key": "api-version", "type": "string", "value": "2024-02-01"}, {"key": "endpoint", "type": "string", "value": "https://llm-staging-east-us-2.openai.azure.com/"}, {"key": "deployment-id", "type": "string", "value": "eureka-gpt-4o"}, {"key": "client-name", "type": "string", "value": "eureka-searcher"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "b6a50f7536d55a64", "flags": 1, "operationName": "getModelsForTenantAndOrg", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "05aecb0a1ffa3eec"}], "startTime": 1735845986396000, "duration": 154, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "0c3472b6a44b493e", "flags": 1, "operationName": "get", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "5c69a770ae77f677"}], "startTime": 1735845986401000, "duration": 996, "tags": [{"key": "cacheHit", "type": "string", "value": "false"}, {"key": "get.key", "type": "string", "value": "eureka-gpt-4o-935750254"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=5c69a770ae77f677; skipping clock skew adjustment"]}, {"traceID": "325b2c3981548556", "spanID": "84b2dd4ce1fa47e6", "flags": 1, "operationName": "chatCompletion", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "5c69a770ae77f677"}], "startTime": 1735845986406000, "duration": 3508751, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=5c69a770ae77f677; skipping clock skew adjustment"]}, {"traceID": "325b2c3981548556", "spanID": "7f56acad806c4781", "flags": 1, "operationName": "put", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "5c69a770ae77f677"}], "startTime": 1735845989915000, "duration": 1104, "tags": [{"key": "put.key", "type": "string", "value": "eureka-gpt-4o-935750254"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=5c69a770ae77f677; skipping clock skew adjustment"]}, {"traceID": "325b2c3981548556", "spanID": "fc7acbe65718be77", "flags": 1, "operationName": "TMLPostProcessor.process", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "85007f2fb7a63fdb"}], "startTime": 1735845989918000, "duration": 1372, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845989920000, "fields": [{"key": "event.log", "type": "string", "value": "Post processed tokens: [count of closed won opps] [Isclosed] = '1' [Iswon] = '1' [Closedate] = '2024'"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "85007f2fb7a63fdb", "flags": 1, "operationName": "getResultFromTML", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "949cabb852b9739a"}], "startTime": 1735845989918000, "duration": 1684, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845989918000, "fields": [{"key": "event.log", "type": "string", "value": "Using TML translation directly: tokens: \"[count of closed won opps] [Isclosed] = \\'1\\' [Iswon] = \\'1\\' [Closedate] = \\'2024\\'\"\nformulas {\n  name: \"count of closed won opps\"\n  expression: \"count ( Id )\"\n}\nreasoning {\n  assumptions: \"The query is asking for the total count of opportunities that are closed and won in the year 2024.\"\n  step_by_step_thinking: \"1. Identify the relevant columns: \\'Isclosed\\', \\'Iswon\\', and \\'Closedate\\'. 2. Apply filters to select records where \\'Isclosed\\' is true, \\'Iswon\\' is true, and \\'Closedate\\' is in 2024. 3. Use the \\'count\\' function to get the total number of such records.\"\n}\nrephrased_query: \"Total number of closed won opportunities in 2024\"\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "9e37fde60d71e369", "flags": 1, "operationName": "translateTokens", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "fc7acbe65718be77"}], "startTime": 1735845989919000, "duration": 21, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "b0c358c2fd068fa5", "flags": 1, "operationName": "hasIndex", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "e7ad313d138f172c"}], "startTime": 1735845989923000, "duration": 3596, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "88f5abf4fd7c9358", "flags": 1, "operationName": "updateSearchHistoryRepository", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "90c45028b51e93a0"}], "startTime": 1735845989923000, "duration": 16519, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "e7ad313d138f172c", "flags": 1, "operationName": "createIndex", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "88f5abf4fd7c9358"}], "startTime": 1735845989923000, "duration": 7178, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "7c83a07637b44a11", "flags": 1, "operationName": "populateConvAssistDebugInfo", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "07cc83b1323b7227"}], "startTime": 1735845989923000, "duration": 66, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "90c45028b51e93a0", "flags": 1, "operationName": "updateSearchHistoryRepositoryAsync", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "398907b526ec967f"}], "startTime": 1735845989923000, "duration": 16630, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "c7177405-06bd-4bac-ba6d-593c64cfe0bf"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "14abe1a1eeafb5b2", "flags": 1, "operationName": "updateDefaultIngestPipeline", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "e7ad313d138f172c"}], "startTime": 1735845989927000, "duration": 3303, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "0f0290b5d67375ae", "flags": 1, "operationName": "_update_conversation_save", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "70e640a5c6c48406"}], "startTime": 1735845989928594, "duration": 4889, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "62d8df2afdf7396b", "flags": 1, "operationName": "getExistingDocument", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "88f5abf4fd7c9358"}], "startTime": 1735845989931000, "duration": 2582, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "1730377fa3c8d5ed", "flags": 1, "operationName": "others.others.getExistingDocument.get", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "62d8df2afdf7396b"}], "startTime": 1735845989931000, "duration": 2423, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "228a0f7a150ee25a", "flags": 1, "operationName": "add_conv", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "0f0290b5d67375ae"}], "startTime": 1735845989931523, "duration": 1917, "tags": [{"key": "conv.id", "type": "string", "value": "3b79dc52-1c2d-4020-ba34-6e1e16bb6010"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "e0d8caec4858ffef", "flags": 1, "operationName": "handleGraphQl.serialize", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "454002ed52081580"}], "startTime": 1735845990010000, "duration": 566, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "1202b81530205511", "flags": 1, "operationName": "getFilteredResponse", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "325b2c3981548556"}], "startTime": 1735845990042497, "duration": 527829, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "c4ab6532ed715b01", "flags": 1, "operationName": "StringFilterHeuristic.apply", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "1202b81530205511"}], "startTime": 1735845990045186, "duration": 268861, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "3357953e78bdf833", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "c4ab6532ed715b01"}], "startTime": 1735845990047797, "duration": 266139, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "bb1321fc9c754a26", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "3357953e78bdf833"}], "startTime": 1735845990281000, "duration": 1673, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.metadata.MetadataService/applyValueHeuristic"}, {"key": "peer.address", "type": "string", "value": "10.252.226.251:46100"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "a71f22f02381eae4", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "bb1321fc9c754a26"}], "startTime": 1735845990282000, "duration": 977, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "x.request.id", "type": "string", "value": "181596214243427981750f9b21ce4120"}, {"key": "user.id", "type": "string", "value": ""}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh/10.252.224.19"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "bc4c8d5012635559", "flags": 1, "operationName": "applyFilterHeuristics", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "f1a467f248d78eed"}], "startTime": 1735845990282000, "duration": 194, "tags": [{"key": "query.updated", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845990282000, "fields": [{"key": "event.log", "type": "string", "value": "ValueHeuristicsResponse query: \"[count of closed won opps] [Isclosed] = \\'1\\' [Iswon] = \\'1\\' [Closedate] = \\'2024\\'\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "f1a467f248d78eed", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "a71f22f02381eae4"}], "startTime": 1735845990282000, "duration": 741, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "x.request.id", "type": "string", "value": "c7177405-06bd-4bac-ba6d-593c64cfe0bf"}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh/10.252.224.19"}, {"key": "x.tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845990282000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic request: ([count of closed won opps] [Isclosed] = '1' [Iswon] = '1' [Closedate] = '2024',[])"}]}, {"timestamp": 1735845990282000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic response: query: \"[count of closed won opps] [Isclosed] = \\'1\\' [Iswon] = \\'1\\' [Closedate] = \\'2024\\'\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "325b2c3981548556", "spanID": "cb0cd37536b493f9", "flags": 1, "operationName": "sanitizeTMLQuery", "references": [{"refType": "CHILD_OF", "traceID": "325b2c3981548556", "spanID": "1202b81530205511"}], "startTime": 1735845990437611, "duration": 75384, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845990437916, "fields": [{"key": "event.log", "type": "string", "value": "TML query Before Sanitization: [[count of closed won opps] [Isclosed] = '1' [Iswon] = '1' [Closedate] = '2024']"}]}, {"timestamp": 1735845990512966, "fields": [{"key": "event.log", "type": "string", "value": "TML query After Sanitization: [[count of closed won opps] [Isclosed] = 1 [Closedate] = '2024' [Iswon] = 1]"}]}], "processID": "p1", "warnings": null}], "processes": {"p1": {"serviceName": "eureka-agent", "tags": [{"key": "hostname", "type": "string", "value": "ip-10-254-128-10.ec2.internal"}, {"key": "ip", "type": "string", "value": "10.254.128.10"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p2": {"serviceName": "eureka-graphql", "tags": [{"key": "hostname", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "ip", "type": "string", "value": "10.252.225.72"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p3": {"serviceName": "convassist", "tags": [{"key": "hostname", "type": "string", "value": "convassist-5db97bf549-rwxlq"}, {"key": "ip", "type": "string", "value": "10.252.225.166"}, {"key": "jaeger.version", "type": "string", "value": "Python-4.8.0"}]}, "p4": {"serviceName": "eureka-searcher", "tags": [{"key": "hostname", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "ip", "type": "string", "value": "10.252.226.13"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p5": {"serviceName": "eureka-llm-gateway", "tags": [{"key": "hostname", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc"}, {"key": "ip", "type": "string", "value": "10.252.224.191"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p6": {"serviceName": "eureka-metadata-service", "tags": [{"key": "hostname", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "ip", "type": "string", "value": "10.252.224.19"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}}, "warnings": null}, {"traceID": "ac215def619acbf7", "spans": [{"traceID": "ac215def619acbf7", "spanID": "ac215def619acbf7", "flags": 1, "operationName": "Agent.graphQLHandler", "references": [], "startTime": 1735845426305549, "duration": 3753598, "tags": [{"key": "component", "type": "string", "value": "eureka-agent"}, {"key": "x.request.id", "type": "string", "value": "45709801-0330-49b8-873b-440e762e24c7"}, {"key": "user.id", "type": "string", "value": "24b4e19b-dc3d-415a-822f-563491076806"}, {"key": "sampler.type", "type": "string", "value": "const"}, {"key": "sampler.param", "type": "bool", "value": true}, {"key": "org.id", "type": "string", "value": "929225089"}, {"key": "self.ip", "type": "string", "value": "ip-10-254-128-10.ec2.internal/10.254.128.10"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426308888, "fields": [{"key": "event.log", "type": "string", "value": "Explicitly adding org admin group 57676462-7ad3-441f-9e2f-866a0b5cdf5c for user 24b4e19b-dc3d-415a-822f-563491076806 in permissions as user is org admin"}]}, {"timestamp": 1735845426309044, "fields": [{"key": "event.log", "type": "string", "value": "Explicitly adding org admin group c63bedea-bccf-4085-81fc-7cbb873bae22 for user 24b4e19b-dc3d-415a-822f-563491076806 in permissions as user is org admin"}]}, {"timestamp": 1735845426309160, "fields": [{"key": "event.log", "type": "string", "value": "Explicitly adding org admin group 2823a2d8-1c8e-4d65-a6e5-5606fac145e1 for user 24b4e19b-dc3d-415a-822f-563491076806 in permissions as user is org admin"}]}], "processID": "p1", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "666f78b10ba4b648", "flags": 1, "operationName": "handleGraphQLReqEnrichment", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ac215def619acbf7"}], "startTime": 1735845426309793, "duration": 76884, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426309808, "fields": [{"key": "event.log", "type": "string", "value": "Enriching message class com.thoughtspot.convassist.SendMessageRequest"}]}, {"timestamp": 1735845426312699, "fields": [{"key": "event.log", "type": "string", "value": "Enriching SendMessageRequest"}]}, {"timestamp": 1735845426312758, "fields": [{"key": "event.log", "type": "string", "value": "SendMessageRequest: conv_id: \"fc858307-e971-4853-a842-dda37efa1131\"\nmsg {\n  msg_id: \"4f52bcd6-8791-4795-adde-48447253ce38\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show me sales by region\"\n      nls_data {\n        worksheet_id: \"5f0d33c1-e5c8-4e5b-994f-22d264528d28\"\n        question_type: ANSWER_SPEC_GENERATION\n      }\n    }\n  }\n}\nheaders {\n  key: \"answerGenNo\"\n  value: \"1\"\n}\nheaders {\n  key: \"answerSessionId\"\n  value: \"caeaf99f-477c-4669-9794-5f073cc1e413\"\n}\nruntime_params {\n}\n"}]}, {"timestamp": 1735845426312909, "fields": [{"key": "event.log", "type": "string", "value": "Enriching USER_COMMAND message payload"}]}, {"timestamp": 1735845426386469, "fields": [{"key": "event.log", "type": "string", "value": "Returning SendMessageReq conv_id: \"fc858307-e971-4853-a842-dda37efa1131\"\nmsg {\n  msg_id: \"4f52bcd6-8791-4795-adde-48447253ce38\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show me sales by region\"\n      nls_data {\n        query_hypothesis_columns {\n          column_name: \"Region\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"region\"\n          guid: \"c05abfad-c807-4bb9-9b3d-9d5bc3750a79\"\n        }\n        query_hypothesis_columns {\n          column_name: \"Sales Amount\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n          guid: \"fa77d21f-999c-4a48-b0fb-c6346b63e7b9\"\n        }\n        query_hypothesis_columns {\n          column_name: \"Sales Tax %\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n          guid: \"cf9a42c7-2422-414a-807e-337fb2a695e9\"\n        }\n        query_hypothesis_columns {\n          column_name: \"Sales Date\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n          guid: \"fa99b6f2-76e1-4d15-9b97-4a854b05d4a0\"\n        }\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: -341729549\n        permission_guids: 2083749878\n        permission_guids: -547893242\n        permission_guids: -2099566063\n        permission_guids: -1271583326\n        permission_guids: -1157838687\n        permission_guids: -1194886837\n        permission_guids: 2083749878\n        permission_guids: 1753873498\n        non_sharable: false\n        worksheet_id: \"5f0d33c1-e5c8-4e5b-994f-22d264528d28\"\n        question_type: ANSWER_SPEC_GENERATION\n      }\n    }\n  }\n}\nheaders {\n  key: \"answerGenNo\"\n  value: \"1\"\n}\nheaders {\n  key: \"answerSessionId\"\n  value: \"caeaf99f-477c-4669-9794-5f073cc1e413\"\n}\nruntime_params {\n}\n"}]}], "processID": "p1", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "d487ed35c723a7b7", "flags": 1, "operationName": "getResponseBodyFromCloud", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ac215def619acbf7"}], "startTime": 1735845426386824, "duration": 3305066, "tags": [{"key": "proxy.eurekaCloudApiLatency", "type": "string", "value": "3304"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "6db737eff50e921e", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "d487ed35c723a7b7"}], "startTime": 1735845426387179, "duration": 3304520, "tags": [{"key": "component", "type": "string", "value": "apache-httpclient"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "39b24ee039f0b3b4", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "6db737eff50e921e"}], "startTime": 1735845426387185, "duration": 3304425, "tags": [{"key": "http.status_code", "type": "int64", "value": 200}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "http.url", "type": "string", "value": "https://eureka.thoughtspotstaging.cloud/graphql"}, {"key": "peer.hostname", "type": "string", "value": "eureka.thoughtspotstaging.cloud"}, {"key": "peer.port", "type": "int64", "value": 443}, {"key": "http.method", "type": "string", "value": "POST"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "3205a3b139dc905f", "flags": 1, "operationName": "handle", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "39b24ee039f0b3b4"}], "startTime": 1735845426629000, "duration": 3031283, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "x.request.id", "type": "string", "value": "45709801-0330-49b8-873b-440e762e24c7"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4/10.252.225.72"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "aee919a8c63f348b", "flags": 1, "operationName": "handleGraphQl", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "3205a3b139dc905f"}], "startTime": 1735845426630000, "duration": 3031227, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "x.request.id", "type": "string", "value": "45709801-0330-49b8-873b-440e762e24c7"}, {"key": "user.id", "type": "string", "value": "24b4e19b-dc3d-415a-822f-563491076806"}, {"key": "x.thought.spot.orgs", "type": "string", "value": "929225089"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4/10.252.225.72"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "f355630fb631e89c", "flags": 1, "operationName": "convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "aee919a8c63f348b"}], "startTime": 1735845426637000, "duration": 3022927, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "c4289ccb578cd53c", "flags": 1, "operationName": "/convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "39b24ee039f0b3b4"}], "startTime": 1735845426646417, "duration": 3013044, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "peer.ipv4", "type": "string", "value": "10.252.225.72"}, {"key": "peer.port", "type": "string", "value": "33414"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845426646473, "fields": [{"key": "request", "type": "string", "value": "conv_id: \"fc858307-e971-4853-a842-dda37efa1131\"\nmsg {\n  msg_id: \"4f52bcd6-8791-4795-adde-48447253ce38\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show me sales by region\"\n      nls_data {\n        query_hypothesis_columns {\n          guid: \"c05abfad-c807-4bb9-9b3d-9d5bc3750a79\"\n          column_name: \"Region\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"region\"\n        }\n        query_hypothesis_columns {\n          guid: \"fa77d21f-999c-4a48-b0fb-c6346b63e7b9\"\n          column_name: \"Sales Amount\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n        }\n        query_hypothesis_columns {\n          guid: \"cf9a42c7-2422-414a-807e-337fb2a695e9\"\n          column_name: \"Sales Tax %\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n        }\n        query_hypothesis_columns {\n          guid: \"fa99b6f2-76e1-4d15-9b97-4a854b05d4a0\"\n          column_name: \"Sales Date\"\n          referenced_by_qu"}]}, {"timestamp": 1735845429659339, "fields": [{"key": "response", "type": "string", "value": "responses {\n  msg_id: \"cbd5780b-c3d4-4250-b0f2-8c8e188342df\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"5f0d33c1-e5c8-4e5b-994f-22d264528d28\"\n          tokens: \"Sales Amount Sales Date.\\'weekly\\' Region\"\n          title: \"\"\n          tml_tokens: \"[Sales Amount] [Sales Date].\\'weekly\\' [Region]\"\n          cached: false\n          sql_query: \"\"\n          visualization_suggestion {\n            display_mode: UNDEFINED\n            chart_type: NONE\n            users_viz_intent_applied: false\n          }\n          is_partial: false\n          llm_reasoning {\n            assumptions: \"The user wants to see the sales amount grouped by region, retaining the weekly granularity from the previous context.\"\n            step_by_step_thinking: \"1. Retain the previous context of showing sales amount on a weekly basis. 2. Add the region column to group the sales amount by region.\"\n          }\n          warning_details {\n   "}]}], "processID": "p3", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "8443526528e1455c", "flags": 1, "operationName": "SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "c4289ccb578cd53c"}], "startTime": 1735845426646562, "duration": 3012703, "tags": [{"key": "x.request.id", "type": "string", "value": "45709801-0330-49b8-873b-440e762e24c7"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "user.id", "type": "string", "value": "24b4e19b-dc3d-415a-822f-563491076806"}, {"key": "org.id", "type": "string", "value": "929225089"}, {"key": "locale", "type": "string", "value": "en-us"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845426648849, "fields": [{"key": "event", "type": "string", "value": "User Query"}, {"key": "value", "type": "string", "value": "User Query: show me sales by region"}]}], "processID": "p3", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "d6272e65a6758144", "flags": 1, "operationName": "get_conv", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8443526528e1455c"}], "startTime": 1735845426647242, "duration": 1070, "tags": [{"key": "conv.id", "type": "string", "value": "fc858307-e971-4853-a842-dda37efa1131"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "dae28313decbde7f", "flags": 1, "operationName": "find_tool", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8443526528e1455c"}], "startTime": 1735845426648920, "duration": 239, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845426649133, "fields": [{"key": "event", "type": "string", "value": "Find Tool is not enabled. Returning NLSTool."}]}], "processID": "p3", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "6d936b78c074c207", "flags": 1, "operationName": "_get_tool_response", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8443526528e1455c"}], "startTime": 1735845426649229, "duration": 2931007, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "73264ed35cddcdc3", "flags": 1, "operationName": "get_response_from_nls", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "6d936b78c074c207"}], "startTime": 1735845426649661, "duration": 2930550, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "3202c0cb7d5a79bf", "flags": 1, "operationName": "get_response_latest", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "73264ed35cddcdc3"}], "startTime": 1735845426651281, "duration": 2928852, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "367f2c92bfbf1f19", "flags": 1, "operationName": "/eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "3202c0cb7d5a79bf"}], "startTime": 1735845426651698, "duration": 2926982, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845426651743, "fields": [{"key": "request", "type": "string", "value": "msg_payload {\n  msg_id: \"4f52bcd6-8791-4795-adde-48447253ce38\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show me sales by region\"\n      nls_data {\n        query_hypothesis_columns {\n          guid: \"c05abfad-c807-4bb9-9b3d-9d5bc3750a79\"\n          column_name: \"Region\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"region\"\n        }\n        query_hypothesis_columns {\n          guid: \"fa77d21f-999c-4a48-b0fb-c6346b63e7b9\"\n          column_name: \"Sales Amount\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n        }\n        query_hypothesis_columns {\n          guid: \"cf9a42c7-2422-414a-807e-337fb2a695e9\"\n          column_name: \"Sales Tax %\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sales\"\n        }\n        query_hypothesis_columns {\n          guid: \"fa99b6f2-76e1-4d15-9b97-4a854b05d4a0\"\n          column_name: \"Sales Date\"\n          referenced_by_query_hypothesis: true\n          source_qu"}]}, {"timestamp": 1735845429578545, "fields": [{"key": "response", "type": "string", "value": "tool: TS_NLS\nmessages {\n  msg_id: \"cbd5780b-c3d4-4250-b0f2-8c8e188342df\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"5f0d33c1-e5c8-4e5b-994f-22d264528d28\"\n          tokens: \"Sales Amount Sales Date.\\'weekly\\' Region\"\n          title: \"\"\n          tml_tokens: \"[Sales Amount] [Sales Date].\\'weekly\\' [Region]\"\n          cached: false\n          sql_query: \"\"\n          visualization_suggestion {\n            display_mode: UNDEFINED\n            chart_type: NONE\n            users_viz_intent_applied: false\n          }\n          is_partial: false\n          llm_reasoning {\n            assumptions: \"The user wants to see the sales amount grouped by region, retaining the weekly granularity from the previous context.\"\n            step_by_step_thinking: \"1. Retain the previous context of showing sales amount on a weekly basis. 2. Add the region column to group the sales amount by region.\"\n          }\n          warning_d"}]}], "processID": "p3", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "265275f628792909", "flags": 1, "operationName": "eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "367f2c92bfbf1f19"}], "startTime": 1735845426658000, "duration": 2919315, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.EurekaGrpcService/ConvAssistNLSearch"}, {"key": "peer.address", "type": "string", "value": "10.252.225.166:36656"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "397de7d30b1fdc75", "flags": 1, "operationName": "convAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "265275f628792909"}], "startTime": 1735845426660000, "duration": 2918171, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "45709801-0330-49b8-873b-440e762e24c7"}, {"key": "user.id", "type": "string", "value": "24b4e19b-dc3d-415a-822f-563491076806"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "bdcd4f87bfbd460b", "flags": 1, "operationName": "NLInstructionsHandler.createIndex", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "397de7d30b1fdc75"}], "startTime": 1735845426660000, "duration": 27254, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "7fd22bd499f3479f", "flags": 1, "operationName": "hasIndex", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8b4587ebd13fb562"}], "startTime": 1735845426660000, "duration": 22222, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "8b4587ebd13fb562", "flags": 1, "operationName": "createIndex", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "bdcd4f87bfbd460b"}], "startTime": 1735845426660000, "duration": 27116, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "6c6b05d7ab737144", "flags": 1, "operationName": "updateDefaultIngestPipeline", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8b4587ebd13fb562"}], "startTime": 1735845426683000, "duration": 4292, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "63b1674faf8d04c8", "flags": 1, "operationName": "getConvAssistResult", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "397de7d30b1fdc75"}], "startTime": 1735845426689000, "duration": 2888125, "tags": [{"key": "user.command", "type": "string", "value": "show me sales by region"}, {"key": "_debugInfo.eureka.ConvAssistDebugInfo", "type": "string", "value": "{\n  \"tenantId\": \"fa794c92-1470-11ee-8c81-cbe72\",\n  \"userId\": \"24b4e19b-dc3d-415a-822f-563491076806\",\n  \"userName\": \"\",\n  \"convId\": \"fc858307-e971-4853-a842-dda37efa1131\",\n  \"userMsgId\": \"4f52bcd6-8791-4795-adde-48447253ce38\",\n  \"liveboardId\": \"9427a813-39b6-46c7-9e10-aac7b2fcc9b4\",\n  \"vizId\": \"22802e2a-18e4-4251-8726-8850c03cee78\",\n  \"datasourceId\": \"5f0d33c1-e5c8-4e5b-994f-22d264528d28\",\n  \"userQuery\": \"show me sales by region\",\n  \"generatedTmlTokens\": \"[Sales Amount] [Sales Date].\\u0027weekly\\u0027 [Region]\",\n  \"generatedSql\": \"\",\n  \"userFeedback\": \"NEUTRAL\",\n  \"vizQuestion\": \"\",\n  \"timestamp\": \"1735845429576\",\n  \"orgId\": \"929225089\",\n  \"requestId\": \"45709801-0330-49b8-873b-440e762e24c7\",\n  \"userMessageCount\": \"1\",\n  \"datasourceName\": \"Retail Sales WS\",\n  \"asstMsgId\": \"cbd5780b-c3d4-4250-b0f2-8c8e188342df\",\n  \"vizName\": \"Total Sales\"\n}"}, {"key": "query.id", "type": "string", "value": ""}, {"key": "query", "type": "string", "value": "show me sales by region"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "9f7baa6288e69b0b", "flags": 1, "operationName": "translateTokens", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "63b1674faf8d04c8"}], "startTime": 1735845426691000, "duration": 3, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "3a1e671ea58753a5", "flags": 1, "operationName": "translateTokens", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "63b1674faf8d04c8"}], "startTime": 1735845426691000, "duration": 16, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "0a4ffbb7e467756a", "flags": 1, "operationName": "getNLSResults", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "63b1674faf8d04c8"}], "startTime": 1735845426692000, "duration": 2884122, "tags": [{"key": "empty_nl_query", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426692000, "fields": [{"key": "event.log", "type": "string", "value": "Number of worksheet columns = 15"}]}, {"timestamp": 1735845426692000, "fields": [{"key": "event.log", "type": "string", "value": "clientRequest = ctx {\n  init_ctx {\n    worksheet {\n      worksheet_id: \"5f0d33c1-e5c8-4e5b-994f-22d264528d28\"\n      worksheet_name: \"Retail Sales WS\"\n      column_details {\n        column_name: \"Sales Date\"\n        data_type: DATE\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"sales\"\n        guid: \"fa99b6f2-76e1-4d15-9b97-4a854b05d4a0\"\n        table_name: \"FACT_RETAPP_SALES\"\n        base_column_id: \"c1312572-d1bd-489f-90b8-ef2d391f62eb\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Sales Amount\"\n        data_type: DOUBLE\n        referenced_by_query_hypothesis: true\n        col_type: MEASURE\n        source_query_term: \"sales\"\n        guid: \"fa77d21f-999c-4a48-b0fb-c6346b63e7b9\"\n        table_name: \"FACT_RETAPP_SALES\"\n        base_column_id: \"06e04d92-7e49-4bea-8abc-62ec712c9d43\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Quantity Purchased\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"9eaa0dee-140f-4d6c-bad1-df8bdf3037de\"\n        table_name: \"FACT_RETAPP_SALES\"\n        base_column_id: \"09105890-86e2-43aa-ab88-e633dbad2fa7\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"State\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"42787239-47c8-4537-9652-9adbdce64ed3\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"fb3dc3e1-0bc4-43cc-9115-9a5bc01c0fae\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Item Price\"\n        data_type: DOUBLE\n        col_type: MEASURE\n        guid: \"48e8fb2a-0e0d-440e-8b5d-12734eaa041d\"\n        table_name: \"FACT_RETAPP_SALES\"\n        base_column_id: \"ea8095d0-7621-4221-a2cd-cfde5f5c7b12\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Product Name\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"ce66d0a0-65eb-4bf1-ac1e-252425fe95d2\"\n        table_name: \"DIM_RETAPP_PRODUCTS\"\n        base_column_id: \"50fd4e43-3f41-4fde-8327-95a1d12b5794\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Product Type\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"963eb67f-7777-410b-ace1-27d95965d2b3\"\n        table_name: \"DIM_RETAPP_PRODUCTS\"\n        base_column_id: \"2f132812-46ae-48de-980e-2f29508da999\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Store Name\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"d131140b-278b-449c-a914-f80dedbeee37\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"637a9884-c4d1-459f-b887-cd73079ec9ad\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Sales Tax %\"\n        data_type: DOUBLE\n        referenced_by_query_hypothesis: true\n        col_type: MEASURE\n        source_query_term: \"sales\"\n        guid: \"cf9a42c7-2422-414a-807e-337fb2a695e9\"\n        table_name: \"FACT_RETAPP_SALES\"\n        base_column_id: \"06e04d92-7e49-4bea-8abc-62ec712c9d43\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Longitude\"\n        data_type: DOUBLE\n        col_type: ATTRIBUTE\n        guid: \"2eaa91b4-0296-467d-b212-39a9b7bf0be1\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"c3bdf306-0022-4e2d-9559-ec251664da29\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Zip Code\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"b6f26320-c6c5-4e65-9013-43231fc93018\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"3ed1b1e8-ca43-4970-9a7c-b9fd9bbca855\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Region\"\n        data_type: VARCHAR\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"region\"\n        guid: \"c05abfad-c807-4bb9-9b3d-9d5bc3750a79\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"9d36a4b8-5b2f-4e55-9dc4-2eb2decd3622\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"County\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"11a8e4bd-29d5-49e3-95d1-29054ee2333f\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"4089317d-9391-4447-b048-4f2eeb293024\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Latitude\"\n        data_type: DOUBLE\n        col_type: ATTRIBUTE\n        guid: \"4180ab81-cf9c-4c0b-aaa8-45c77769b2f6\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"27de3376-c9e8-41c0-be94-47536216fa25\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"City\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"57716978-a09d-4ebe-aa9e-e912bb8269b0\"\n        table_name: \"DIM_RETAPP_STORES\"\n        base_column_id: \"ba2b4bd2-9f3f-408c-b4b1-36397c698a3b\"\n        is_group_aggregate: false\n      }\n    }\n  }\n  messages {\n    role: USER\n    content: \"Here, the user has started the conversation from an answer titled - \\'Total Sales\\'. This answer is constructed using specific phrase tokens and may include formulas. The conversation will continue from here with user asking follow-up questions.\\n\\nBelow are the relevant tokens and formulas associated with the initial answer:\\n{\\\"tokens\\\":\\\"[Sales Amount] [Sales Date].\\'weekly\\'\\\"}\\n\\n**Answer Title Related Instruction**:\\nThe title of the answer is provided by the user and may include business-specific terminology that might not be universally recognized. Your task is to interpret these terms as closely as possible using the tokens provided above. This interpretation will serve as a reference for any subsequent questions.\\n\\nThe above tokens and formulas, if any, would be useful to answer follow-up queries. Also, the query results, if exists, would be useful in answering data-related queries, in cases when the user points out to any data in the follow-up queries.\\n\"\n    used_columns {\n      column_name: \"Sales Amount\"\n      data_type: DOUBLE\n      guid: \"fa77d21f-999c-4a48-b0fb-c6346b63e7b9\"\n    }\n    used_columns {\n      column_name: \"Sales Date\"\n      data_type: DATE\n      guid: \"fa99b6f2-76e1-4d15-9b97-4a854b05d4a0\"\n    }\n    tokens: \"Sales Amount\"\n    tokens: \"weekly\"\n    tml_payload: \"{\\\"tokens\\\":\\\"[Sales Amount] [Sales Date].\\'weekly\\'\\\"}\"\n    sage_query_suggestion {\n      worksheet_id: \"5f0d33c1-e5c8-4e5b-994f-22d264528d28\"\n      tml_tokens: \"[Sales Amount]\"\n      tml_tokens: \"[Sales Date].\\'weekly\\'\"\n    }\n  }\n}\nquery: \"show me sales by region\"\nnl_handler_version: LATEST\n"}]}, {"timestamp": 1735845426692000, "fields": [{"key": "event.log", "type": "string", "value": "nlHandlerVersion = LATEST"}]}, {"timestamp": 1735845426692000, "fields": [{"key": "event.log", "type": "string", "value": "worksheetFacetPayload = worksheet_id: \"5f0d33c1-e5c8-4e5b-994f-22d264528d28\"\nworksheet_name: \"Retail Sales WS\"\ncolumn_details {\n  column_name: \"Sales Date\"\n  data_type: DATE\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"sales\"\n  guid: \"fa99b6f2-76e1-4d15-9b97-4a854b05d4a0\"\n  table_name: \"FACT_RETAPP_SALES\"\n  base_column_id: \"c1312572-d1bd-489f-90b8-ef2d391f62eb\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Sales Amount\"\n  data_type: DOUBLE\n  referenced_by_query_hypothesis: true\n  col_type: MEASURE\n  source_query_term: \"sales\"\n  guid: \"fa77d21f-999c-4a48-b0fb-c6346b63e7b9\"\n  table_name: \"FACT_RETAPP_SALES\"\n  base_column_id: \"06e04d92-7e49-4bea-8abc-62ec712c9d43\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Quantity Purchased\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"9eaa0dee-140f-4d6c-bad1-df8bdf3037de\"\n  table_name: \"FACT_RETAPP_SALES\"\n  base_column_id: \"09105890-86e2-43aa-ab88-e633dbad2fa7\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"State\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"42787239-47c8-4537-9652-9adbdce64ed3\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"fb3dc3e1-0bc4-43cc-9115-9a5bc01c0fae\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Item Price\"\n  data_type: DOUBLE\n  col_type: MEASURE\n  guid: \"48e8fb2a-0e0d-440e-8b5d-12734eaa041d\"\n  table_name: \"FACT_RETAPP_SALES\"\n  base_column_id: \"ea8095d0-7621-4221-a2cd-cfde5f5c7b12\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Product Name\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"ce66d0a0-65eb-4bf1-ac1e-252425fe95d2\"\n  table_name: \"DIM_RETAPP_PRODUCTS\"\n  base_column_id: \"50fd4e43-3f41-4fde-8327-95a1d12b5794\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Product Type\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"963eb67f-7777-410b-ace1-27d95965d2b3\"\n  table_name: \"DIM_RETAPP_PRODUCTS\"\n  base_column_id: \"2f132812-46ae-48de-980e-2f29508da999\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Store Name\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"d131140b-278b-449c-a914-f80dedbeee37\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"637a9884-c4d1-459f-b887-cd73079ec9ad\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Sales Tax %\"\n  data_type: DOUBLE\n  referenced_by_query_hypothesis: true\n  col_type: MEASURE\n  source_query_term: \"sales\"\n  guid: \"cf9a42c7-2422-414a-807e-337fb2a695e9\"\n  table_name: \"FACT_RETAPP_SALES\"\n  base_column_id: \"06e04d92-7e49-4bea-8abc-62ec712c9d43\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Longitude\"\n  data_type: DOUBLE\n  col_type: ATTRIBUTE\n  guid: \"2eaa91b4-0296-467d-b212-39a9b7bf0be1\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"c3bdf306-0022-4e2d-9559-ec251664da29\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Zip Code\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"b6f26320-c6c5-4e65-9013-43231fc93018\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"3ed1b1e8-ca43-4970-9a7c-b9fd9bbca855\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Region\"\n  data_type: VARCHAR\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"region\"\n  guid: \"c05abfad-c807-4bb9-9b3d-9d5bc3750a79\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"9d36a4b8-5b2f-4e55-9dc4-2eb2decd3622\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"County\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"11a8e4bd-29d5-49e3-95d1-29054ee2333f\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"4089317d-9391-4447-b048-4f2eeb293024\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Latitude\"\n  data_type: DOUBLE\n  col_type: ATTRIBUTE\n  guid: \"4180ab81-cf9c-4c0b-aaa8-45c77769b2f6\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"27de3376-c9e8-41c0-be94-47536216fa25\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"City\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"57716978-a09d-4ebe-aa9e-e912bb8269b0\"\n  table_name: \"DIM_RETAPP_STORES\"\n  base_column_id: \"ba2b4bd2-9f3f-408c-b4b1-36397c698a3b\"\n  is_group_aggregate: false\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "ce3bb88aa7910544", "flags": 1, "operationName": "lambda$getAnswerSuggestionFuture$33", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "397de7d30b1fdc75"}], "startTime": 1735845426692000, "duration": 2883181, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845429575000, "fields": [{"key": "event.log", "type": "string", "value": "Sage TML token list = [[Sales Amount] [Sales Date].'weekly' [Region]]"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "8e9e1d0c3d221c04", "flags": 1, "operationName": "getSageQueryGenResults", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ce3bb88aa7910544"}], "startTime": 1735845426693000, "duration": 2882520, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426693000, "fields": [{"key": "event.log", "type": "string", "value": "Couldnt find cache value for key: fa794c92-1470-11ee-8c81-cbe72_5f0d33c1-e5c8-4e5b-994f-22d264528d28"}]}, {"timestamp": 1735845426693000, "fields": [{"key": "event.log", "type": "string", "value": "Populated properties in WorksheetFacetPayload"}]}, {"timestamp": 1735845426698000, "fields": [{"key": "event.log", "type": "string", "value": "Sage query gen cache hit = false"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "e10f8b3ef011cbff", "flags": 1, "operationName": "getCachedSageQueryGenResultFromElastic", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8e9e1d0c3d221c04"}], "startTime": 1735845426693000, "duration": 4948, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "0853a8b4b038c84c", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "623b2586b1f39947"}], "startTime": 1735845426693000, "duration": 87, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "623b2586b1f39947", "flags": 1, "operationName": "fetch", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "e10f8b3ef011cbff"}], "startTime": 1735845426693000, "duration": 4912, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426694000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=24b4e19b-dc3d-415a-822f-563491076806 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"5f0d33c1-e5c8-4e5b-994f-22d264528d28\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"fa794c92-1470-11ee-8c81-cbe72\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"match_phrase\":{\"NL_QUERY\":{\"query\":\"show me sales by region\"}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 1\"}}},{\"term\":{\"FEEDBACK_TYPE\":{\"value\":\"FRAGMENT\"}}},{\"term\":{\"ORG_ID\":{\"value\":\"929225089\"}}},{\"bool\":{\"minimum_should_match\":\"1\",\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"24b4e19b-dc3d-415a-822f-563491076806\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}}]}},\"size\":10}"}]}, {"timestamp": 1735845426698000, "fields": [{"key": "event.log", "type": "string", "value": "search-response : SearchResponse: {\"took\":1,\"timed_out\":false,\"_shards\":{\"failed\":0.0,\"successful\":1.0,\"total\":1.0,\"skipped\":0.0},\"hits\":{\"total\":{\"relation\":\"eq\",\"value\":0},\"hits\":[],\"max_score\":null}}"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "c3e3124e25e7f6f9", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "623b2586b1f39947"}], "startTime": 1735845426694000, "duration": 4279, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "042182f4f4a4200e", "flags": 1, "operationName": "getSageQueryResultsFromQB", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8e9e1d0c3d221c04"}], "startTime": 1735845426699000, "duration": 15439, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426714000, "fields": [{"key": "event.log", "type": "string", "value": "Found 0 entries from question bank for query show me sales by region"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "c6968354a40c48a5", "flags": 1, "operationName": "getEntriesForNLQuery", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "042182f4f4a4200e"}], "startTime": 1735845426699000, "duration": 15375, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "45709801-0330-49b8-873b-440e762e24c7"}, {"key": "user.id", "type": "string", "value": "24b4e19b-dc3d-415a-822f-563491076806"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "ef1ed3655e7ca016", "flags": 1, "operationName": "getSchema", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "c10da91ebf4e8055"}], "startTime": 1735845426714000, "duration": 35749, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426749000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from NL-to-SQL map: Product Type,Sales Amount,City"}]}, {"timestamp": 1735845426749000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Query Hypothesis: Region,Sales Tax %,Sales Amount,Sales Date"}]}, {"timestamp": 1735845426749000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from KNN search on saved answers: State,Item Price,Product Type,Sales Amount,Region,Zip Code,Longitude,Sales Date,Quantity Purchased,City"}]}, {"timestamp": 1735845426749000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Semantic Value Search: "}]}, {"timestamp": 1735845426749000, "fields": [{"key": "event.log", "type": "string", "value": "Query Hypothesis column, sample values: {Sales Date=[], Sales Amount=[], Sales Tax %=[], Region=[]}"}]}, {"timestamp": 1735845426750000, "fields": [{"key": "event.log", "type": "string", "value": "Final Ranked Query Relevant Columns: Sales Amount,Sales Date,Product Type,City,State,Item Price,Region,Sales Tax %,Zip Code,Longitude,Quantity Purchased"}]}, {"timestamp": 1735845426750000, "fields": [{"key": "event.log", "type": "string", "value": "Final Query relevant column, sample values: {Sales Date=[], Zip Code=[], Item Price=[], Product Type=[], Sales Amount=[], State=[], Sales Tax %=[], Region=[], Quantity Purchased=[], City=[], Longitude=[]}"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "5ebbe583c8c6b3f9", "flags": 1, "operationName": "getSchemaFromQH", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ce3bb88aa7910544"}], "startTime": 1735845426714000, "duration": 728, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "b7ad2ab7b884afd0", "flags": 1, "operationName": "getSchemaFromDescriptors", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ef1ed3655e7ca016"}], "startTime": 1735845426714000, "duration": 34640, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "c10da91ebf4e8055", "flags": 1, "operationName": "generateSageQueries", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8e9e1d0c3d221c04"}], "startTime": 1735845426714000, "duration": 2860509, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426714000, "fields": [{"key": "event.log", "type": "string", "value": "NLPConfig: NLPConfig(dateTokenExtractionHeuristics=false, dateSQLFunctionHeuristics=true, dateSQLFunctionDefinitionV2=false, nl2TMLPromptGeneration=false, comparisonHeuristic=true, dateAggregationHeuristic=true, nlHandlerVersion=STABLE, removeOverlappingColumnDetailSampleValues=false, includeColumnSynonymsInPrompt=true, generateColumnMap=false, includeColumnValueSynonymsInPrompt=false, forEachHeuristic=true, seasonHeuristic=true, bypassCache=false, isColdStart=false, useZeroShotTMLPromptGeneration=true, includeColumnTableInfo=true, literacyPromptingEnabled=true, noSage=false, doNotReplaceWildcard=false, maxNumSelectItems=5, cotPromptingEnabled=true)"}]}, {"timestamp": 1735845429575000, "fields": [{"key": "event.log", "type": "string", "value": "UsedColumns-QUERY_HYPOTHESIS: 3"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "782916442dea9638", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "fe3ef517a83d7b73"}], "startTime": 1735845426715000, "duration": 427, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "a42c7a69c5dc68ce", "flags": 1, "operationName": "fetchKnnEntries", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ce3bb88aa7910544"}], "startTime": 1735845426715000, "duration": 29307, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426744000, "fields": [{"key": "event.log", "type": "string", "value": "Feedback Column scores: "}]}, {"timestamp": 1735845426744000, "fields": [{"key": "event.log", "type": "string", "value": "Columns dropped from Knn Search "}]}, {"timestamp": 1735845426744000, "fields": [{"key": "event.log", "type": "string", "value": "Final Column scores: City_57716978-a09d-4ebe-aa9e-e912bb8269b0=0.24621765, Region_c05abfad-c807-4bb9-9b3d-9d5bc3750a79=0.26933215, State_42787239-47c8-4537-9652-9adbdce64ed3=0.973387715, Item Price_ea8095d0-7621-4221-a2cd-cfde5f5c7b12=0.704055565, Longitude_2eaa91b4-0296-467d-b212-39a9b7bf0be1=0.26933215, Zip Code_b6f26320-c6c5-4e65-9013-43231fc93018=0.26933215, Sales Amount_fa77d21f-999c-4a48-b0fb-c6346b63e7b9=0.48356792000000004, Sales Date_fa99b6f2-76e1-4d15-9b97-4a854b05d4a0=0.26933215, State_fb3dc3e1-0bc4-43cc-9115-9a5bc01c0fae=0.704055565, Item Price_48e8fb2a-0e0d-440e-8b5d-12734eaa041d=0.973387715, Product Type_963eb67f-7777-410b-ace1-27d95965d2b3=0.75290007, Quantity Purchased_9eaa0dee-140f-4d6c-bad1-df8bdf3037de=0.26933215"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "03e4631b673916bc", "flags": 1, "operationName": "KNNSearch", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "a42c7a69c5dc68ce"}], "startTime": 1735845426715000, "duration": 28084, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426716000, "fields": [{"key": "event.log", "type": "string", "value": "Fetching KNN for query: show me sales by region"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "ef43b39b3dc42744", "flags": 1, "operationName": "fetchSchemaFromConvContext", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ce3bb88aa7910544"}], "startTime": 1735845426715000, "duration": 124, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "f968baa90e47389c", "flags": 1, "operationName": "fetchNLSqlMappingsForQuery", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ce3bb88aa7910544"}], "startTime": 1735845426715000, "duration": 7158, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "fe3ef517a83d7b73", "flags": 1, "operationName": "fetchRelevantFeedbackForQuery", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "f968baa90e47389c"}], "startTime": 1735845426715000, "duration": 6342, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "4c515ce0851fd781", "flags": 1, "operationName": "ElasticNLSqlMappingFetcher.fetch", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "fe3ef517a83d7b73"}], "startTime": 1735845426716000, "duration": 5672, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426716000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=24b4e19b-dc3d-415a-822f-563491076806 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"5f0d33c1-e5c8-4e5b-994f-22d264528d28\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"fa794c92-1470-11ee-8c81-cbe72\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"bool\":{\"minimum_should_match\":\"1\",\"must\":[{\"term\":{\"ORG_ID\":{\"value\":\"929225089\"}}}],\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"24b4e19b-dc3d-415a-822f-563491076806\"}}},{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"WORKSHEET_USER\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}},{\"range\":{\"UP_VOTES\":{\"gte\":1}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 0\"}}}],\"minimum_should_match\":\"1\",\"should\":[{\"match\":{\"PARENT_QUERY\":{\"query\":\"show me sales by region\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"region\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"sales\"}}}]}},\"size\":20,\"track_scores\":true}"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "32b9c0f27e146f12", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "4c515ce0851fd781"}], "startTime": 1735845426716000, "duration": 189, "tags": [{"key": "NLSqlMappingRequest.worksheet", "type": "string", "value": "5f0d33c1-e5c8-4e5b-994f-22d264528d28"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "80a0055a8bedc4b9", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "03e4631b673916bc"}], "startTime": 1735845426716000, "duration": 16167, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "b7175a8e2443375d", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "4c515ce0851fd781"}], "startTime": 1735845426716000, "duration": 4154, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "447f096e4e617938", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "4c515ce0851fd781"}], "startTime": 1735845426721000, "duration": 189, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "996648468fa8a72b", "flags": 1, "operationName": "searchByEmbedding", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "03e4631b673916bc"}], "startTime": 1735845426732000, "duration": 11260, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "45709801-0330-49b8-873b-440e762e24c7"}, {"key": "user.id", "type": "string", "value": "24b4e19b-dc3d-415a-822f-563491076806"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "33acaca2c039dfca", "flags": 1, "operationName": "applyImpressionWeightedFiltering", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "a42c7a69c5dc68ce"}], "startTime": 1735845426743000, "duration": 113, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426743000, "fields": [{"key": "event.log", "type": "string", "value": "Total Answers Filtered out: 0"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "2beccfab6b3a2222", "flags": 1, "operationName": "fetchSemanticValueMatches", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ce3bb88aa7910544"}], "startTime": 1735845426745000, "duration": 4156, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "34ff4ea5f4e4610d", "flags": 1, "operationName": "mergeSchemas", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ef1ed3655e7ca016"}], "startTime": 1735845426749000, "duration": 341, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "cb469d798d546bf1", "flags": 1, "operationName": "selectColumns", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "a36dc1de8c58fa24"}], "startTime": 1735845426750000, "duration": 118, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "a36dc1de8c58fa24", "flags": 1, "operationName": "filterColumnDetails", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "c10da91ebf4e8055"}], "startTime": 1735845426750000, "duration": 413, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845426750000, "fields": [{"key": "event.log", "type": "string", "value": "Original Column Details: Region,Sales Tax %,Sales Amount,City,Latitude,County,Zip Code,Longitude,Store Name,Product Type,Product Name,Item Price,State,Quantity Purchased,Sales Date"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "eb53d04095953fea", "flags": 1, "operationName": "generateResponse", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "956c3aa9b70aeed7"}], "startTime": 1735845426751000, "duration": 2823261, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "3eecaa5804a82571", "flags": 1, "operationName": "generateQueries", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "c10da91ebf4e8055"}], "startTime": 1735845426751000, "duration": 2823305, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "956c3aa9b70aeed7", "flags": 1, "operationName": "generateTMLResponse", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "3eecaa5804a82571"}], "startTime": 1735845426751000, "duration": 2823286, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "23c02071c5fb9e87", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "eb53d04095953fea"}], "startTime": 1735845426762000, "duration": 14435, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "f6ff302b724f1950", "flags": 1, "operationName": "getEmbeddingScoresForExamples", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "eb53d04095953fea"}], "startTime": 1735845426788000, "duration": 231950, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "c0df2eae72dd54f1", "flags": 1, "operationName": "batchEncode", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "f6ff302b724f1950"}], "startTime": 1735845426788000, "duration": 231030, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "6557ccc449e87498", "flags": 1, "operationName": "getTMLResponseInfoTranslation", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "eb53d04095953fea"}], "startTime": 1735845427022000, "duration": 2550981, "tags": [{"key": "x.request.id", "type": "string", "value": "45709801-0330-49b8-873b-440e762e24c7"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845429573000, "fields": [{"key": "event.log", "type": "string", "value": "LLM response = {\n  \"rephrasedQuery\": \"Show me the sales amount by region on a weekly basis.\",\n  \"reasoning\": {\n    \"assumptions\": \"The user wants to see the sales amount grouped by region, retaining the weekly granularity from the previous context.\",\n    \"stepByStepThinking\": \"1. Retain the previous context of showing sales amount on a weekly basis. 2. Add the region column to group the sales amount by region.\"\n  },\n  \"tokens\": \"[Sales Amount] [Sales Date].'weekly' [Region]\"\n}"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "695de16d9d1e3f10", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "6557ccc449e87498"}], "startTime": 1735845427023000, "duration": 8547, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "aefad8d3c02c7c21", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "6557ccc449e87498"}], "startTime": 1735845427032000, "duration": 101, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "8cc87113ef255252", "flags": 1, "operationName": "LLMGatewayNLPService::getResponsesFromLLM", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "6557ccc449e87498"}], "startTime": 1735845427032000, "duration": 2540648, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845427034000, "fields": [{"key": "event.log", "type": "string", "value": "Chat Completion prompt = \nSYSTEM:\n**Task:**\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\n\nYou are given the following:\n1. Definition & rules of the language.\n2. References for which functions and keywords to use with examples.\n3. Table Schema with column names, their data type, synonyms & sample values.\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\n5. Chat History, if any, containing all the previous interactions between user and assistant.\n\n**Definitions and Rules of the Phrase Token Language:**\n\n### **Key Definitions**\n\n1. **Column Types**\n\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\n\n2. **Output Columns**\n\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `' '`.\n- **Examples**:\n  - **Output Column**: [column]\n  - **Filter Applied**: [column] = 'value'\n\n3. **Filters**\n\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `' '`. The general format is `[column] operator 'value'`.\n- **Filter Logic**:\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\n    - **Example**: [column] = 'value1' [column] = 'value2'\n    *(Matches records where `column` is 'value1' **or** 'value2')*\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\n    - **Example**: [column1] = 'value1' [column2] = 'value2'\n    *(Matches records where `column1` is 'value1' **and** `column2` is 'value2')*\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].'value'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\n\n4. **Formulas**\n\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\n- **Usage**:\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\n- **Structure**:\n  - **Formulas Field**:\n    \"formulas\": [\n      {\n        \"name\": \"<formula_name>\",\n        \"expression\": \"<formula_expression>\"\n      },\n      ...\n    ]\n  - **Tokens Field Example**:\n    {\n      \"tokens\": \"[Formula Name] by [Column Name]\",\n      \"formulas\": [ ... ]\n    }\n- **Key Points**:\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user's query, for example, pick a relevant substring of the query.\n  - **Expressions**:\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\n    - Refer to the examples provided later for formula syntax and better understanding.\n  - **Dependencies**:\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \"unique users\", expression: \"unique count ( user id )\", then you cannot apply \"sum ( unique users )\"\" because it is already aggregated i.e. \"group_aggregate ( sum ( unique users ) , { } , { } )\" is incorrect because it will fail formula grammar check. The correct expression should be: \"group_aggregate ( unique users , { } , { } )\" i.e. without any aggregation function applied on aggregated formula/column.\n\n**5. Column and Value Selection**\n\n- **Column Selection**:\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user's query. Columns are sorted by relevance in the schema, with the most relevant first.\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\n  - **Column Co-occurrence Groups**: Column names separated by commas `,` co-occur with each other and form a use-case/group. When selecting column names relevant for the current user query, **prefer the co-occurring/neighboring columns** within the same group. Columns from different groups are generally not used together.\n    - **Examples**\n          Group1 Quantity Purchased,Item Price,State,State,City,Longitude,Sales Amount,Sales Date,Region,Product Type,Item Price,Zip Code\n\n- **Value Selection**:\n  - **Use Schema Values**:\n    - When applying filters, prioritize sample values from the schema that match the user's query.\n  - **If Values Are Missing**:\n    - If matching values are not found in the schema, you may:\n    - Select the nearest appropriate value from the schema.\n    - Generate a suitable value based on the query context.\n    Choose the approach that best captures the user's intent, without bias towards the schema.\n  - **Ensure Relevance**:\n    - Only include values that make sense within the context of the query.\n    - Avoid illogical or irrelevant values.\n\n### **Table Schema**\n\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\n\nCREATE TABLE Retail Sales WS (\nSales Amount double /*. Group: FACT_RETAPP_SALES.*/,\nSales Date date /* Current year is 2025.. Group: FACT_RETAPP_SALES.*/,\nProduct Type text /*. Group: DIM_RETAPP_PRODUCTS.*/,\nCity text /*. Group: DIM_RETAPP_STORES.*/,\nState text /*. Group: DIM_RETAPP_STORES.*/,\nItem Price double /*. Group: FACT_RETAPP_SALES.*/,\nRegion text /*. Group: DIM_RETAPP_STORES.*/,\nSales Tax % double /*. Group: FACT_RETAPP_SALES.*/,\nZip Code text /*. Group: DIM_RETAPP_STORES.*/,\nLongitude double /*. Group: DIM_RETAPP_STORES.*/,\nQuantity Purchased int /*. Group: FACT_RETAPP_SALES.*/,\nLatitude double /*. Group: DIM_RETAPP_STORES.*/,\nCounty text /*. Group: DIM_RETAPP_STORES.*/,\nStore Name text /*. Group: DIM_RETAPP_STORES.*/,\nProduct Name text /*. Group: DIM_RETAPP_PRODUCTS.*/)\n\n### **Supported Keyword and Function References with Examples**\n\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\n\n**Relevant Keywords for Phrase Tokens**\n\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\n\n{\"function\":\"top|bottom n\",\"description\":\"Generates the top (or bottom) n items from a sorted result. Substitute 'n' with number specified by the user in query. When 'sort by' is used with 'top', it automatically implies sorting is done in descending order. If 'bottom' is used with 'sort by', then it is in ascending order by default.\",\"example\":[\"top 10 [Product Type] sort by [Sales Amount]\",\"bottom 25 [Product Type] sort by count [Product Type]\"]}\n{\"function\":\"sort by\",\"example\":[\"sort by [Sales Amount] ascending\",\"sort by count [Product Type] descending\"]}\n{\"function\":\"by\",\"description\":\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\",\"example\":[\"by [Sales Amount]\"]}\n{\"function\":\"begins|ends with\",\"description\":\"Returns all column values that begins or ends with a value defined in quotes.\",\"example\":[\"[Product Type] begins with 'a0_value0'\",\"[Product Type] ends with 'a0_value0'\"]}\n{\"function\":\"contains|not contains\",\"description\":\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\",\"example\":[\"[Product Type] contains 'a0_value0'\",\"[Product Type] contains 'a0_value0' 'a0_value1'\",\"[Product Type] not contains 'a0_value0'\"]}\n{\"function\":\"vs\",\"description\":\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = 'east' vs [region] = 'west'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = 'value1' vs [attribute] = 'value2'\",\"example\":[\"[Sales Amount] [Product Type] = 'a0_value0' vs [Product Type] = 'a0_value1'\",\"[Sales Amount] [Sales Date] = 'this year' vs [Sales Date] = 'last year'\",\"[Item Price] [City] = 'a1_value0' vs [City] = 'a1_value1' vs [City] = 'a1_value2'\"]}\n{\"function\":\"growth of\",\"description\":\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\",\"example\":[\"growth of [Sales Amount] by [Sales Date] [Sales Date].'daily'\"]}\n{\"function\":\"unique count\",\"description\":\"Similar to SQL's SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"unique count [Product Type]\"]}\n{\"function\":\"count\",\"description\":\"Similar to SQL's SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"count [Product Type]\"]}\n{\"function\":\"in|not in\",\"description\":\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user's query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using 'in' or 'not in' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn't support use of 'vs' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where 'subsearch' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using 'not in'.\",\"example\":[\"[Product Type] in ([Product Type] [Product Type] begins with 'a0_value0' [Sales Amount] > 100 top 10 [Product Type] sort by [Item Price] descending)\",\"[Product Type] not in ([Product Type] [Product Type] begins with 'a0_value0' [Sales Amount] > 100 top 10 [Product Type] sort by [Item Price] descending)\"]}\n{\"function\":\"sum|average|min|max\",\"description\":\"Similar to SQL's SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\",\"example\":[\"sum [Sales Amount]\",\"average [Sales Amount]\"]}\n{\"function\":\"for each\",\"description\":\"Used on attributes i.e. columns with type text.\",\"example\":[\"for each [Product Type]\"]}\n\n\n**Function References for Formulas**\n\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\n\n{\"function\":\"average\",\"description\":\"Returns the average of all the values of a column.\",\"example\":[\"average ( Sales Amount )\"]}\n{\"function\":\"count\",\"description\":\"Returns the number of rows in the table containing the column.\",\"example\":[\"count ( Product Type )\"]}\n{\"function\":\"count_if\",\"description\":\"Returns the number of rows in the table containing the column that meet a given criteria.\",\"example\":[\"count_if ( (Sales Amount > 10), Product Type )\",\"count_if ( (Sales Amount > 10) , month ( Sales Date ) )\"]}\n{\"function\":\"cumulative_average\",\"description\":\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_average (Sales Amount, Product Type, City)\"]}\n{\"function\":\"cumulative_sum\",\"description\":\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_sum (Sales Amount, Product Type)\"]}\n{\"function\":\"group_aggregate\",\"description\":\"**Summary of the `group_aggregate` Function**\n\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\n\n**Function Syntax:**\n```\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\n```\n\n**Parameters:**\n\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\n   - `sum(measure0)`\n   - `count(attribute0)`\n   - `unique count (attribute0)`\n   - `average(measure1)`\n   - `avg(measure1)`\n\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\n   - **`query_groups()`**: Includes all groupings from the main query.\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\n\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\n   - **`query_filters()`**: Includes all filters from the main query.\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\n\n**Usage Notes:**\n\n- **Grouping Modifications:**\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\n\n- **Filter Modifications:**\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\n    - Example: `query_filters() + {attribute0 = 'value'}` adds a new filter condition.\n\n- **Process `grouping_set`**:\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\n  - **`query_groups()`**: Use the groupings defined in the main query.\n  - **Modify Groupings with `+` and `-`**:\n    - **Adding Groupings**: Combine main query groupings with additional columns.\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\n\n- **Process `filter_set`**:\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\n  - **`query_filters()`**: Use filters defined in the main query.\n  - **Modify Filters with `+` and `-`**:\n    - **Adding Filters**: Include additional filter conditions.\n    - **Excluding Filters**: Remove filters related to specific columns.\n\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\n\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\n\n**Key Concepts:**\n\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\n\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\n\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\n\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\n\n**Summary of Operators:**\n\n- **Groupings**:\n  - **`{ }`**: No groupings.\n  - **`query_groups()`**: Use main query groupings.\n  - **`+ {columns}`**: Add columns to groupings.\n  - **`- {columns}`**: Remove columns from groupings.\n\n- **Filters**:\n  - **`{ }`**: No filters.\n  - **`query_filters()`**: Use main query filters.\n  - **`+ {conditions}`**: Add filter conditions.\n  - **`- {columns}`**: Remove filters on columns.\n\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\",\"example\":[\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { } )\",\"group_aggregate ( stddev ( Sales Amount ) , { } , { } )\",\"group_aggregate ( variance ( Sales Amount ), { Product Type , City }, { day_of_week ( Sales Date ) = 'friday' } )\",\"group_aggregate ( average ( Item Price ), query_groups ( ), query_filters ( ) )\",\"group_aggregate ( count ( City ), query_groups ( ) + { Product Type }, query_filters ( ) - { City } )\",\"group_aggregate ( unique count ( City ) , query_groups ( ) + { Product Type }, query_filters ( ) + { City != 'a1_value0' } )\"]}\n{\"function\":\"max\",\"description\":\"Returns the maximum value of a column.\",\"example\":[\"max ( Sales Amount )\"]}\n{\"function\":\"min\",\"description\":\"Returns the minimum value of a column.\",\"example\":[\"min (Sales Amount)\"]}\n{\"function\":\"moving_average\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\",\"example\":[\"moving_average (Sales Amount, 2, 1, Product Type)\"]}\n{\"function\":\"moving_sum\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\u2026Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\",\"example\":[\"moving_sum ( Sales Amount, 2, 1, Product Type )\"]}\n{\"function\":\"percentile\",\"description\":\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\",\"example\":[\"percentile ( Sales Amount , 99 , 'asc' )\",\"percentile ( Sales Amount , 95 , 'desc' )\"]}\n{\"function\":\"stddev\",\"description\":\"Returns the standard deviation of all values of a column.\",\"example\":[\"stddev ( Sales Amount )\"]}\n{\"function\":\"sum\",\"description\":\"Returns the sum of all the values of a numeric column i.e. measure.\",\"example\":[\"sum ( Sales Amount )\"]}\n{\"function\":\"unique count\",\"description\":\"Returns the number of unique values of a column.\",\"example\":[\"unique count ( Product Type )\"]}\n{\"function\":\"unique_count_if\",\"description\":\"Returns the number of unique values of a column provided it meets a criteria.\",\"example\":[\"unique_count_if ( (Sales Amount > 10) , Product Type )\",\"unique_count_if ( (Sales Amount > 10) , month ( Sales Date ) )\"]}\n{\"function\":\"variance\",\"description\":\"Returns the variance of all the values of a column.\",\"example\":[\"variance ( Sales Amount )\"]}\n{\"function\":\"in|not in\",\"description\":\"Function that takes a column name and a list of values, used in 'formulas' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\",\"example\":[\"Product Type in { 'a0_value0' , 'a0_value1' }\",\"Product Type not in { 'a0_value0' , 'a0_value1' ,'a0_value2' }\"]}\n{\"function\":\"to_date\",\"description\":\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like 'march 2024' in formula language, since 'march 2024' is not a valid formula keyword but only valid in main tokens query.\",\"example\":[\"to_date ('2024-05-16', '%Y-%m-%d')\",\"Sales Date >= to_date ('03/01/2024', '%m/%d/%Y') and Sales Date <= to_date ('03/31/2024', '%m/%d/%Y')\"]}\n{\"function\":\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\",\"description\":\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords 'this year', 'this day', 'last year', 'last 2 quarters', so on in formula language.\",\"example\":[\"diff_days ( Sales Date, today ( ) ) = 0\",\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\",\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\"]}\n{\"function\":\"if-else\",\"description\":\"if-else statements similar to the ones in programming languages, only use them in 'formulas' field.\",\"example\":[\"if ( Sales Amount > 100 ) then 'High' else 'Low'\",\"if ( Sales Amount > 100 ) then 'High' else if ( Item Price > 100 and Product Type = 'a0_value0' ) then 'Medium' else 'Low'\"]}\n{\"function\":\"year|month|day\",\"description\":\"Functions below that are used to extract year, month, and day from a date column or even today() function.\",\"example\":[\"year ( Sales Date ) = 2024\",\"month ( Sales Date ) = 'June'\",\"day ( today ( ) ) = 2\"]}\n\n\n**Date Keywords**\n\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\n\n{\"function\":\"last|next month\",\"example\":[\"[Sales Date] = 'last month'\"]}\n{\"function\":\"last|next n days\",\"example\":[\"[Sales Date] = 'last 7 days'\",\"[Sales Date] = 'next 7 days'\"]}\n{\"function\":\"last|next n months\",\"example\":[\"[Sales Date] = 'last 12 months'\"]}\n{\"function\":\"last|next n quarters\",\"example\":[\"[Sales Date] = 'last 12 quarters'\"]}\n{\"function\":\"last|next n weeks\",\"example\":[\"[Sales Date] = 'last 12 weeks'\"]}\n{\"function\":\"last|next n years\",\"example\":[\"[Sales Date] = 'last 12 years'\"]}\n{\"function\":\"last|next quarter\",\"example\":[\"[Sales Date] = 'last quarter'\"]}\n{\"function\":\"last|next week\",\"example\":[\"[Sales Date] = 'last week'\"]}\n{\"function\":\"last|next year\",\"example\":[\"[Sales Date] = 'last year'\"]}\n{\"function\":\"<month>\",\"example\":[\"[Sales Date] = 'march'\",\"[Sales Date] = 'april'\"]}\n{\"function\":\"<year>\",\"example\":[\"[Sales Date] = '2024'\"]}\n{\"function\":\"<weekday>\",\"example\":[\"[Sales Date] = 'Saturday'\",\"[Sales Date] = 'Monday'\"]}\n{\"function\":\"<month_year>\",\"example\":[\"[Sales Date] = 'march 2024'\",\"[Sales Date] = 'april 2024'\"]}\n{\"function\":\"this day|month|year|quarter|week\",\"example\":[\"[Sales Date] = 'this day'\",\"[Sales Date] = 'this quarter'\"]}\n{\"function\":\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\",\"example\":[\"[Sales Date] = 'last 2 quarters for each year'\",\"[Sales Date] = 'last 10 weeks for each month'\"]}\n{\"function\":\"yearly|quarterly|monthly|weekly|daily|hourly\",\"description\":\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\",\"example\":[\"[Sales Date].yearly\",\"[Sales Date].quarterly\",\"[Sales Date].monthly\",\"[Sales Date].weekly\",\"[Sales Date].daily\"]}\n{\"function\":\"between ... and ...\",\"description\":\"Selects records where the date is between the two specified dates. The dates must be in the format 'MM/dd/yyyy'. 'january 2024' type of dates are not supported, they have to be in a date format.\",\"example\":[\"[Sales Date] between '01/30/2012' and '01/30/2014'\"]}\n{\"function\":\"month over month|quarter over quarter|year over year|week over week\",\"description\":\"Only used with 'growth of' keyword. The 'year over year' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The 'month over month' keyword compares data between the same time period from different months.\",\"example\":[\"growth of [Sales Amount] by [Sales Date] [Sales Date].daily month over month\",\"growth of [Sales Amount] by [Sales Date] [Sales Date].monthly year over year\",\"growth of [Sales Amount] by [Sales Date] [Sales Date].monthly quarter over quarter\"]}\n{\"function\":\"day|week of month|quarter|year\",\"description\":\"Returns the day|week number of the month quarter or year for the date value. Example, 'day of month' for 13th Jan would be 13. 'day of year' for 13th Jan would be 13. 'week of month' for 13th Jan would be 2.\",\"example\":[\"[Sales Date].'day of month'\",\"[Sales Date].'month of year'\",\"[Sales Date].'week of year'\"]}\n{\"function\":\"n months|weeks|days|quarters|years ago\",\"example\":[\"[Sales Date] = '10 months ago'\",\"[Sales Date] = '5 years ago'\"]}\n{\"function\":\"detailed\",\"description\":\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\",\"example\":[\"[Sales Date] detailed\"]}\n\n\n**Instructions:**\n\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\n\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\n\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today's date in\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\n\n### **Additional Rules for Generating Phrase Tokens**\n\n1. **Including Output Columns**\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\n    - Choose the output column based on the context of the query.\n    - **Example**:\n       - *Invalid*: `{\"tokens\": \"[column1] = 'value1' [column2] = 'value2'\"}`\n       - *Valid*: `{\"tokens\": \"[column1] = 'value1' [column2] = 'value2' [column3]\"}`\n2. **Expanding Month Abbreviations**\n    - Expand month abbreviations (e.g., 'Jan', 'Feb') to full names when used as **date filters** in phrase tokens.\n    - Do **not** expand them if used as filter values in **non-date columns**.\n3. **Count and Unique Count Usage**\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\n    - Do **not** apply them to **measures** or numeric columns.\n4. **Numeric Comparisons in Formulas**\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\n5. **Representing Date Filters in Formulas**\n    - In **formula expressions**, represent date filters like `'last month'` using functions such as `diff_months` or `to_date` that calculate the date range.\n6. **Avoid Redundant Formulas**\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don't need to create an additional formula for it.\n    - **Example to Avoid**:\n       - `{\"tokens\": \"[Measure]\", \"formulas\": [{\"name\": \"Total Measure\", \"expression\": \"sum(Measure)\"}]}`\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\n7. **Filtering on Null Values**\n    - When filtering on **null values**, encapsulate `'null'` in single quotes and curly braces `{ }`, like `'{null}'`.\n    - **Example**: `[column] != '{null}'`\n8. **Growth of phrase cannot co-exist with versus phrase**\n    - If there is a growth phrase like: 'growth of sum [measure] by [date] [date].monthly', it cannot co-exist with '[attribute] = 'value' vs [attribute] = 'value''. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = 'value' [attribute] = 'value' where 'vs' keyword is removed.\n9. **Avoid Counting and Grouping on the Same Column**\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\n10. **Avoid adding 'by' keyword to date bucket**\n    - When using date bucket in the final answer, do not add 'by' keyword. Remove by keyword and just add date bucket alone.\n11. **Query-on-Query Intent**:\n     - **Definition**:\n        - Occurs when the user's query references previous results or includes subquery logic, similar to SQL subqueries.\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\u2014conditions on the **same column** that cannot be true simultaneously in a single row.\n     - **Handling Subqueries**:\n        - Represent such queries using the `in` or `not in` keywords.\n     - **Syntax**:\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\n     - **Application**:\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\n        - To determine if a query has subquery intent, rephrase the user's query to make it clear and unambiguous, accurately capturing their intent.\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\n\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\n\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\n\nsub_queries represent a separate view (similar to SQL view) of data that is joined to main query using anchor_column_id. The return_column_id is the output of the sub_query. Both anchor_column_id & return_column_id need to be output columns in the sub_queries' tokens field for the join to be valid. sub_queries are used for cohort analysis, where multiple sub_queries represent cohorts & their labels (exposed through formulas) are used for cohort analysis using some measure or aggregated attribute in the main query.\n\n**Single Query Examples**\n\n{\"query\":\"What are the top 3 Product Type by Sales Amount per City and their market share in that City\",\"desc\":\"In the calculation of market share, we subtract Product Type from the groupings in the denominator (total Sales Amount ) using 'query_groups() - { Product Type }'. This is done to avoid grouping by Product Type in the total Sales Amount , which would result in a 100% market share for each Product Type . By excluding Product Type from the groupings in the denominator, we ensure that the total Sales Amount is aggregated over City alone. This allows us to accurately compute the market share of each Product Type relative to the total Sales Amount in that City\",\"tokens\":\"top 3 [Product Type] sort by [Sales Amount] for each [City] [market share]\",\"formulas\":[{\"name\":\"total Sales Amount\",\"expression\":\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) - { Product Type } , query_filters ( ) )\"},{\"name\":\"Sales Amount for Product Type\",\"expression\":\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) + { Product Type } , query_filters ( ) )\"},{\"name\":\"market share\",\"expression\":\"Sales Amount for Product Type / total Sales Amount * 100\"}]}\n{\"query\":\"Find the top 5 City in terms of Sales Amount and list the top 3 Product Type by Sales Amount within each of these City\",\"tokens\":\"top 3 [Product Type] for each [City] sort by [Sales Amount] [categorize based on rank] = 'top 5 City by Sales Amount'\",\"formulas\":[{\"name\":\"categorize based on rank\",\"expression\":\"if ( top City by Sales Amount <= 5 ) then 'top 5 City by Sales Amount' else 'everything else'\"}],\"sub_queries\":[{\"tokens\":\"[City] [rank based on Sales Amount]\",\"formulas\":[{\"name\":\"rank based on Sales Amount\",\"expression\":\"rank ( sum ( Sales Amount ) , 'desc' )\"}],\"cohort_config\":{\"name\":\"top City by Sales Amount\",\"return_column_id\":\"rank based on Sales Amount\",\"anchor_column_id\":\"City\"}}]}\n{\"query\":\"Identify the top 10 Product Type in Sales Amount, and for each, show the top 3 City with the highest Item Price\",\"tokens\":\"top 3 [City] for each [Product Type] sort by [Item Price] [categorize based on rank] = 'top 10 Product Type by Sales Amount'\",\"formulas\":[{\"name\":\"categorize based on rank\",\"expression\":\"if ( top Product Type by Sales Amount <= 10 ) then 'top 10 Product Type by Sales Amount' else 'everything else'\"}],\"sub_queries\":[{\"tokens\":\"[Product Type] [rank based on Sales Amount]\",\"formulas\":[{\"name\":\"rank based on Sales Amount\",\"expression\":\"rank ( sum ( Sales Amount ) , 'desc' )\"}],\"cohort_config\":{\"name\":\"top Product Type by Sales Amount\",\"return_column_id\":\"rank based on Sales Amount\",\"anchor_column_id\":\"Product Type\"}}]}\n{\"query\":\"show me Sales Amount for week of 11/19/2024\",\"desc\":\"First find the week number using IN filter, then apply a filter on the year 2024 to only take into account week number in current year\",\"tokens\":\"[Sales Amount] [Sales Date] in ( [Sales Date] [Sales Date].'week of year' [Sales Date] = '11/19/2024' ) [Sales Date] = '2024'\"}\n{\"query\":\"show Product Types with the highest Sales Amount this year\",\"tokens\":\"[Product Type] sort by [Sales Amount] descending [Sales Date] = 'this year'\"}\n{\"query\":\"show Product Types that have Sales Amount more than 95 percentile and show me their Sales Amount\",\"desc\":\"This template is designed to identify the attributes whose associated 'measure' values exceed the 95th percentile of all 'measure' values in the dataset. It includes a calculation of the 95th percentile value and then applies a filter to count only those attributes where their 'measure' exceeds this percentile threshold. Comparison with percentile function can only be done with an aggregation like sum, average so on. So sum ( measure ) is used for comparison.\",\"tokens\":\"[Product Type] [Sales Amount more than 95 percentile] = true [Sales Amount]\",\"formulas\":[{\"name\":\"Sales Amount more than 95 percentile\",\"expression\":\"rank_percentile ( sum ( Sales Amount ) , 'desc' ) > 95\"}]}\n{\"query\":\"create a table with Sales Amount and Item Price by Product Type, City, and State over the last 6 months for my top 10 City all time and sort by Sales Amount\",\"tokens\":\"[Sales Amount] [Item Price] [Product Type] [City] [State] [Sales Date] = 'last 6 months' [City] in ( [City] top 10 [City] sort by [Sales Amount] ) sort by [Sales Amount] descending\"}\n{\"query\":\"display Product Types for which Sales Amount increased this year\",\"desc\":\"To compute this first compute Sales Amount per Product Type this year and last year. Then compute for which Product Type it increased by doing a difference.\",\"tokens\":\"[Product Type] [date] = 'this year' [Sales Amount increased this year] = 'true'\",\"formulas\":[{\"name\":\"Sales Amount last year\",\"expression\":\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) , { diff_years ( Sales Date, today ( ) ) = -1 } )\"},{\"name\":\"Sales Amount this year\",\"expression\":\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) , { diff_years ( Sales Date, today ( ) ) = 0 } )\"},{\"name\":\"Sales Amount increased this year\",\"expression\":\"Sales Amount this year > Sales Amount last year\"}]}\n{\"query\":\"show me Sales Amount for week starting from 11/19/2024\",\"desc\":\"This requires assuming the first day of the week is mentioned in the query (start date) & then use 'between' to calculate the week range of 7 days.\",\"tokens\":\"[Sales Amount] [Sales Date] between '11/19/2024' and '11/25/2024'\"}\n{\"query\":\"best selling Product Type per City\",\"desc\":\"Since the user asked for just the best selling attribute (singular form), return only top 1 value.\",\"tokens\":\"top 1 [Product Type] sort by [Sales Amount] for each [City]\"}\n{\"query\":\"show Product Type with highest Sales Amount in every year.\",\"desc\":\"'for each' phrase is used when using 'top x' phrase with a date bucketing filter.\",\"tokens\":\"top 10 [Product Type] sort by sum [Sales Amount] for each [Sales Date] [Sales Date].yearly\"}\n{\"query\":\"show me Product Type that have Sales Amount in the last three months and have no Sales Amount prior\",\"desc\":\"In this query, we use a sub query to filter the Product Type that have no Sales Amount prior.\",\"tokens\":\"[Product Type] [Sales Amount] > 0 [Sales Date] = 'last 3 months' [Product Type] not in ( [Product Type] [Sales Amount] > 0 [Sales Date] < 'last 3 months' )\"}\n{\"query\":\"best selling Product Types per City\",\"desc\":\"Since the user asked for the best selling attributes (plural form), return all sorted by measure column.\",\"tokens\":\"[Product Type] sort by [Sales Amount] descending for each [City]\"}\n{\"query\":\"display top 10 Product Types by City\",\"desc\":\"Since the user did not specify on what criteria to return top 10 attributes, select a measure i.e. numeric column on best effort basis automatically.\",\"tokens\":\"top 10 [Product Type] sort by [Sales Amount] by [City]\"}\n{\"query\":\"How does each Product Type's monthly Sales Amount compare to the top-performing Product Type in the same City\",\"desc\":\"Due to limitations in the available functions, we cannot directly compute the comparison between each Product Type's monthly Sales Amount and the top-performing Product Type in the same City. However, by listing each Product Type's monthly Sales Amount alongside the Product Types in the same City, sorted by Sales Amount in descending order for each month, the comparison can be observed.\",\"tokens\":\"[Product Type] [Sales Amount] [City] [Sales Date].monthly sort by [Sales Amount] descending for each [City]\"}\n\n**Conversation Examples with Follow-up Queries**\n\nThe following examples illustrate how to generate tokens when the user asks follow-up questions in complex use cases. Each conversation includes a sequence of queries along with their corresponding tokens and any formulas used.\n\n[{\"query\":\"show all time top 5 Product Types\",\"desc\":\"Select the best measure column to sort the values on.\",\"tokens\":\"top 5 [Product Type] sort by [Sales Amount] descending\"},{\"query\":\"can you show each of their trend yoy\",\"desc\":\"This is a query on query intent that requires to only return trend for the top 5 values in previous conversation. yoy (year over year) represents yearly trend.\",\"tokens\":\"[Sales Amount] [Sales Date].yearly [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\"},{\"query\":\"compare the Sales Amount this year with last year\",\"desc\":\"Comparison intent requires to use 'vs' keyword to compare two time periods.\",\"tokens\":\"[Sales Amount] [Sales Date] = 'this year' vs [Sales Date] = 'last year' [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\"},{\"query\":\"what is the % change for each Product Type\",\"desc\":\"Query requires to show the percentage change of Sales Amount for each Product Type in addition to the comparison in previous answer\",\"tokens\":\"[% change] [Product Type] [Sales Amount] [Sales Date] = 'this year' vs [Sales Date] = 'last year' [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\",\"formulas\":[{\"name\":\"Sales Amount this month\",\"expression\":\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_months ( Sales Date , today ( ) ) = 0 } )\"},{\"name\":\"Sales Amount last month\",\"expression\":\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_months ( Sales Date , today ( ) ) = -1 } )\"},{\"name\":\"% change\",\"expression\":\"(Sales Amount this month - Sales Amount last month) / Sales Amount last month * 100\"}]},{\"query\":\"compare this with current quarter vs previous quarter\",\"desc\":\"Only change the vs arguments in previous query to compare two quarters mentioned in the current query and change the formula expressions to use diff_quarters since the formula was dependent on versus arguments.\",\"tokens\":\"[% change] [Product Type] [Sales Amount] [Sales Date] = 'this quarter' vs [Sales Date] = 'last quarter' [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\",\"formulas\":[{\"name\":\"Sales Amount this quarter\",\"expression\":\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_quarters ( Sales Date , today ( ) ) = 0 } )\"},{\"name\":\"Sales Amount last quarter\",\"expression\":\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_quarters ( Sales Date , today ( ) ) = -1 } )\"},{\"name\":\"% change\",\"expression\":\"(Sales Amount this quarter - Sales Amount last quarter) / Sales Amount last quarter * 100\"}]}]\n\n### **USER FEEDBACK EXAMPLES**\n\nBelow are examples from user feedback that map queries to phrase tokens and/or formulas:\n\n- **Focus on relevant numeric, text, or date columns and their filters.**\n- **Prefer user feedback values over schema values if conflicts arise.**\n- **For columns not in the schema, use formulas from user examples.**\n- **Ensure formula expressions match the current query's columns and filters.**\n- **Include relevant formula names in the tokens field, encapsulated in `[]` brackets.**\n- **When creating multiple formulas with dependencies, include all of them in the formulas list.**\n- **In case of conflicts between user feedback and synthetic examples, user feedback should take precedence.**\n\n**Examples from user feedback below:**\n{\"query\":\"sales of my product categories by city\",\"tokens\":\"[Product Type] [City] [Sales Amount]\"}\n\nUSER:\nHere, the user has started the conversation from an answer titled - 'Total Sales'. This answer is constructed using specific phrase tokens and may include formulas. The conversation will continue from here with user asking follow-up questions.\n\nBelow are the relevant tokens and formulas associated with the initial answer:\n{\"tokens\":\"[Sales Amount] [Sales Date].'weekly'\"}\n\n**Answer Title Related Instruction**:\nThe title of the answer is provided by the user and may include business-specific terminology that might not be universally recognized. Your task is to interpret these terms as closely as possible using the tokens provided above. This interpretation will serve as a reference for any subsequent questions.\n\nThe above tokens and formulas, if any, would be useful to answer follow-up queries. Also, the query results, if exists, would be useful in answering data-related queries, in cases when the user points out to any data in the follow-up queries.\n\n\nUSER:\n### **User Query**\n\nUser Query: show me sales by region\n\n### **Important Instructions for Handling Follow-Up Queries with Conversation Context**\nWhen answering follow-up queries, retain the previous context and modify responses according to the user's new requests while following these guidelines:\n\n1. **Always Retain Previous Context**: Start by keeping ALL tokens and formulas in the same order from the previous ASSISTANT response {\"tokens\":\"[Sales Amount] [Sales Date].'weekly'\"}.\n2. **Modify Only Upon User Request**: - If the user asks to change or remove specific phrase tokens, adjust only those phrases. - Keep all other parts of the previous response intact to maintain continuity.\n3. **Avoid Conflicting Filters and Duplicates**: - Ensure there are no conflicting filters in your response (e.g., [column] = 'value' [column] != 'value' are conflicting.). Also, Do not include duplicate token phrases.\n4. **Retain Sorting and Grouping Instructions**: - Keep any sorting or grouping instructions from the last response unless the user specifies changes.\n5. **Replace date filters if needed**: If the user's current query is for a different date period than the date filter present in the last response, remove the previous date filters & append the new date filter.\n6. **Modify date bucket keyword based on date filter granularity**: If there is an existing date bucket keyword in last ASSISTANT response, then for date ranges spanning multiple units (e.g., 'last 3 months', 'last 4 years'), use a bucketing granularity of the same level (e.g., use 'monthly' for 'last 3 months', 'yearly' for 'last 4 years'). For date filters specifying a single unit (e.g., 'last month', 'this month', 'last year', 'this quarter', so on), use a lower granularity (e.g., 'weekly' for 'last month', 'this month', 'quarterly' for 'last year', 'this year').\n7. **Retain all output columns**: Retain all output columns unless user asks for a different column. Do not make any assumptions on what to retain unless user specifies it in the question.\n8. **Incorporate User Feedback**: If the user provides feedback on the current response that you dropped filters or columns, ensure to include them back in the response.\n9. **User query containing 'all <attribute>'**: - If the user is asking to show data for all <column_name>, remove all filters on that <column_name> in the 'tokens' field.\n10. **Top/Bottom Intent**: If the user is asking to return top/bottom items, ensure date bucketing like monthly, weekly, yearly so on, is dropped because user is only interested in the top <column_name> in the final answer & date bucketing can cause it to return a trend line.\n11. **Query on Query Intent**: If the query includes any pronouns or determiners like \"those\", \"them\", \"these\", \"that\" or phrases like \"the ones\" or \"from above\" which refer back to entities or data from previous response. To answer such questions, use the IN/(NOT IN) query accordingly as mentioned in definitions & examples to enclose previous ASSISTANT response inside the IN/(NOT IN) query and then incorporate the user's current tokens to form a new, combined answer.\n\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\n\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\u2014never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query's intent.\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\u2014only their names should be included.\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\n\n\n### **Step-by-Step Guidance for Generating Phrase Tokens**\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\n\n1. **Rephrase the User's Query**\n   - Rephrase the latest user's query to make it clear and unambiguous, accurately capturing the user's intent.\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\n   - The rephrased query should be easily translatable into SQL for data retrieval.\n   - Use the rephrased query to generate the phrase tokens.\n2. **Consult Provided Resources**\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\n3. **Generate Phrase Tokens Methodically**\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\n4. **Ensure Strict Compliance**\n   - Follow all instructions exactly as given.\n   - Do **not** invent or assume any information not provided.\n   - Avoid adding any unlisted elements.\n5. **Review for Accuracy**\n   - Verify that the tokens fully represent the user's query and adhere to all guidelines.\n   - Check for any errors or omissions before finalizing.\n\n### **Response Format**\n\nThe response should be well-formatted JSON as shown below:\n{\n  \"rephrasedQuery\": \"\",\n  \"reasoning\": {\n    \"assumptions\": \"\",\n    \"stepByStepThinking\": \"\"\n  },\n  \"tokens\": \"\",\n  \"formulas\": [\n    {\n      \"name\": \"\",\n      \"expression\": \"\"\n    }\n  ]\n}\n"}]}, {"timestamp": 1735845427035000, "fields": [{"key": "event.log", "type": "string", "value": "Completion Request = headers {\n  tenant_id: \"fa794c92-1470-11ee-8c81-cbe72\"\n  client_id: \"eureka-searcher\"\n  request_id: \"45709801-0330-49b8-873b-440e762e24c7\"\n  org_id: \"929225089\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"**Task:**\\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\\n\\nYou are given the following:\\n1. Definition & rules of the language.\\n2. References for which functions and keywords to use with examples.\\n3. Table Schema with column names, their data type, synonyms & sample values.\\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\\n5. Chat History, if any, containing all the previous interactions between user and assistant.\\n\\n**Definitions and Rules of the Phrase Token Language:**\\n\\n### **Key Definitions**\\n\\n1. **Column Types**\\n\\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\\n\\n2. **Output Columns**\\n\\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `\\' \\'`.\\n- **Examples**:\\n  - **Output Column**: [column]\\n  - **Filter Applied**: [column] = \\'value\\'\\n\\n3. **Filters**\\n\\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `\\' \\'`. The general format is `[column] operator \\'value\\'`.\\n- **Filter Logic**:\\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\\n    - **Example**: [column] = \\'value1\\' [column] = \\'value2\\'\\n    *(Matches records where `column` is \\'value1\\' **or** \\'value2\\')*\\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\\n    - **Example**: [column1] = \\'value1\\' [column2] = \\'value2\\'\\n    *(Matches records where `column1` is \\'value1\\' **and** `column2` is \\'value2\\')*\\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].\\'value\\'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\\n\\n4. **Formulas**\\n\\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\\n- **Usage**:\\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\\n- **Structure**:\\n  - **Formulas Field**:\\n    \\\"formulas\\\": [\\n      {\\n        \\\"name\\\": \\\"<formula_name>\\\",\\n        \\\"expression\\\": \\\"<formula_expression>\\\"\\n      },\\n      ...\\n    ]\\n  - **Tokens Field Example**:\\n    {\\n      \\\"tokens\\\": \\\"[Formula Name] by [Column Name]\\\",\\n      \\\"formulas\\\": [ ... ]\\n    }\\n- **Key Points**:\\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user\\'s query, for example, pick a relevant substring of the query.\\n  - **Expressions**:\\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\\n    - Refer to the examples provided later for formula syntax and better understanding.\\n  - **Dependencies**:\\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\", then you cannot apply \\\"sum ( unique users )\\\"\\\" because it is already aggregated i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n**5. Column and Value Selection**\\n\\n- **Column Selection**:\\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user\\'s query. Columns are sorted by relevance in the schema, with the most relevant first.\\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\\n  - **Column Co-occurrence Groups**: Column names separated by commas `,` co-occur with each other and form a use-case/group. When selecting column names relevant for the current user query, **prefer the co-occurring/neighboring columns** within the same group. Columns from different groups are generally not used together.\\n    - **Examples**\\n          Group1 Quantity Purchased,Item Price,State,State,City,Longitude,Sales Amount,Sales Date,Region,Product Type,Item Price,Zip Code\\n\\n- **Value Selection**:\\n  - **Use Schema Values**:\\n    - When applying filters, prioritize sample values from the schema that match the user\\'s query.\\n  - **If Values Are Missing**:\\n    - If matching values are not found in the schema, you may:\\n    - Select the nearest appropriate value from the schema.\\n    - Generate a suitable value based on the query context.\\n    Choose the approach that best captures the user\\'s intent, without bias towards the schema.\\n  - **Ensure Relevance**:\\n    - Only include values that make sense within the context of the query.\\n    - Avoid illogical or irrelevant values.\\n\\n### **Table Schema**\\n\\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\\n\\nCREATE TABLE Retail Sales WS (\\nSales Amount double /*. Group: FACT_RETAPP_SALES.*/,\\nSales Date date /* Current year is 2025.. Group: FACT_RETAPP_SALES.*/,\\nProduct Type text /*. Group: DIM_RETAPP_PRODUCTS.*/,\\nCity text /*. Group: DIM_RETAPP_STORES.*/,\\nState text /*. Group: DIM_RETAPP_STORES.*/,\\nItem Price double /*. Group: FACT_RETAPP_SALES.*/,\\nRegion text /*. Group: DIM_RETAPP_STORES.*/,\\nSales Tax % double /*. Group: FACT_RETAPP_SALES.*/,\\nZip Code text /*. Group: DIM_RETAPP_STORES.*/,\\nLongitude double /*. Group: DIM_RETAPP_STORES.*/,\\nQuantity Purchased int /*. Group: FACT_RETAPP_SALES.*/,\\nLatitude double /*. Group: DIM_RETAPP_STORES.*/,\\nCounty text /*. Group: DIM_RETAPP_STORES.*/,\\nStore Name text /*. Group: DIM_RETAPP_STORES.*/,\\nProduct Name text /*. Group: DIM_RETAPP_PRODUCTS.*/)\\n\\n### **Supported Keyword and Function References with Examples**\\n\\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\\n\\n**Relevant Keywords for Phrase Tokens**\\n\\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\\n\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [Product Type] sort by [Sales Amount]\\\",\\\"bottom 25 [Product Type] sort by count [Product Type]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Sales Amount] ascending\\\",\\\"sort by count [Product Type] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Sales Amount]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[Product Type] begins with \\'a0_value0\\'\\\",\\\"[Product Type] ends with \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[Product Type] contains \\'a0_value0\\'\\\",\\\"[Product Type] contains \\'a0_value0\\' \\'a0_value1\\'\\\",\\\"[Product Type] not contains \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Sales Amount] [Product Type] = \\'a0_value0\\' vs [Product Type] = \\'a0_value1\\'\\\",\\\"[Sales Amount] [Sales Date] = \\'this year\\' vs [Sales Date] = \\'last year\\'\\\",\\\"[Item Price] [City] = \\'a1_value0\\' vs [City] = \\'a1_value1\\' vs [City] = \\'a1_value2\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Sales Amount] by [Sales Date] [Sales Date].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [Product Type]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [Product Type]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[Product Type] in ([Product Type] [Product Type] begins with \\'a0_value0\\' [Sales Amount] > 100 top 10 [Product Type] sort by [Item Price] descending)\\\",\\\"[Product Type] not in ([Product Type] [Product Type] begins with \\'a0_value0\\' [Sales Amount] > 100 top 10 [Product Type] sort by [Item Price] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Sales Amount]\\\",\\\"average [Sales Amount]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [Product Type]\\\"]}\\n\\n\\n**Function References for Formulas**\\n\\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\\n\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Sales Amount )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( Product Type )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Sales Amount > 10), Product Type )\\\",\\\"count_if ( (Sales Amount > 10) , month ( Sales Date ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Sales Amount, Product Type, City)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Sales Amount, Product Type)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { } )\\\",\\\"group_aggregate ( stddev ( Sales Amount ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Sales Amount ), { Product Type , City }, { day_of_week ( Sales Date ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Item Price ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( City ), query_groups ( ) + { Product Type }, query_filters ( ) - { City } )\\\",\\\"group_aggregate ( unique count ( City ) , query_groups ( ) + { Product Type }, query_filters ( ) + { City != \\'a1_value0\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Sales Amount )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Sales Amount)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Sales Amount, 2, 1, Product Type)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Sales Amount, 2, 1, Product Type )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Sales Amount , 99 , \\'asc\\' )\\\",\\\"percentile ( Sales Amount , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Sales Amount )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Sales Amount )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( Product Type )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Sales Amount > 10) , Product Type )\\\",\\\"unique_count_if ( (Sales Amount > 10) , month ( Sales Date ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Sales Amount )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"Product Type in { \\'a0_value0\\' , \\'a0_value1\\' }\\\",\\\"Product Type not in { \\'a0_value0\\' , \\'a0_value1\\' ,\\'a0_value2\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Sales Date >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Sales Date <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Sales Date, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Sales Amount > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Sales Amount > 100 ) then \\'High\\' else if ( Item Price > 100 and Product Type = \\'a0_value0\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Sales Date ) = 2024\\\",\\\"month ( Sales Date ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\n**Date Keywords**\\n\\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\\n\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 7 days\\'\\\",\\\"[Sales Date] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Sales Date] = \\'march\\'\\\",\\\"[Sales Date] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Sales Date] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Sales Date] = \\'Saturday\\'\\\",\\\"[Sales Date] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Sales Date] = \\'march 2024\\'\\\",\\\"[Sales Date] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Sales Date] = \\'this day\\'\\\",\\\"[Sales Date] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 2 quarters for each year\\'\\\",\\\"[Sales Date] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Sales Date].yearly\\\",\\\"[Sales Date].quarterly\\\",\\\"[Sales Date].monthly\\\",\\\"[Sales Date].weekly\\\",\\\"[Sales Date].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Sales Date] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Sales Amount] by [Sales Date] [Sales Date].daily month over month\\\",\\\"growth of [Sales Amount] by [Sales Date] [Sales Date].monthly year over year\\\",\\\"growth of [Sales Amount] by [Sales Date] [Sales Date].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Sales Date].\\'day of month\\'\\\",\\\"[Sales Date].\\'month of year\\'\\\",\\\"[Sales Date].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Sales Date] = \\'10 months ago\\'\\\",\\\"[Sales Date] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Sales Date] detailed\\\"]}\\n\\n\\n**Instructions:**\\n\\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\\n\\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\\n\\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today\\'s date in\\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\\n\\n### **Additional Rules for Generating Phrase Tokens**\\n\\n1. **Including Output Columns**\\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\\n    - Choose the output column based on the context of the query.\\n    - **Example**:\\n       - *Invalid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"}`\\n       - *Valid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column3]\\\"}`\\n2. **Expanding Month Abbreviations**\\n    - Expand month abbreviations (e.g., \\'Jan\\', \\'Feb\\') to full names when used as **date filters** in phrase tokens.\\n    - Do **not** expand them if used as filter values in **non-date columns**.\\n3. **Count and Unique Count Usage**\\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\\n    - Do **not** apply them to **measures** or numeric columns.\\n4. **Numeric Comparisons in Formulas**\\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\\n5. **Representing Date Filters in Formulas**\\n    - In **formula expressions**, represent date filters like `\\'last month\\'` using functions such as `diff_months` or `to_date` that calculate the date range.\\n6. **Avoid Redundant Formulas**\\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don\\'t need to create an additional formula for it.\\n    - **Example to Avoid**:\\n       - `{\\\"tokens\\\": \\\"[Measure]\\\", \\\"formulas\\\": [{\\\"name\\\": \\\"Total Measure\\\", \\\"expression\\\": \\\"sum(Measure)\\\"}]}`\\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\\n7. **Filtering on Null Values**\\n    - When filtering on **null values**, encapsulate `\\'null\\'` in single quotes and curly braces `{ }`, like `\\'{null}\\'`.\\n    - **Example**: `[column] != \\'{null}\\'`\\n8. **Growth of phrase cannot co-exist with versus phrase**\\n    - If there is a growth phrase like: \\'growth of sum [measure] by [date] [date].monthly\\', it cannot co-exist with \\'[attribute] = \\'value\\' vs [attribute] = \\'value\\'\\'. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = \\'value\\' [attribute] = \\'value\\' where \\'vs\\' keyword is removed.\\n9. **Avoid Counting and Grouping on the Same Column**\\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\\n10. **Avoid adding \\'by\\' keyword to date bucket**\\n    - When using date bucket in the final answer, do not add \\'by\\' keyword. Remove by keyword and just add date bucket alone.\\n11. **Query-on-Query Intent**:\\n     - **Definition**:\\n        - Occurs when the user\\'s query references previous results or includes subquery logic, similar to SQL subqueries.\\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\\342\\200\\224conditions on the **same column** that cannot be true simultaneously in a single row.\\n     - **Handling Subqueries**:\\n        - Represent such queries using the `in` or `not in` keywords.\\n     - **Syntax**:\\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\\n     - **Application**:\\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\\n        - To determine if a query has subquery intent, rephrase the user\\'s query to make it clear and unambiguous, accurately capturing their intent.\\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\\n\\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\\n\\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\\n\\nsub_queries represent a separate view (similar to SQL view) of data that is joined to main query using anchor_column_id. The return_column_id is the output of the sub_query. Both anchor_column_id & return_column_id need to be output columns in the sub_queries\\' tokens field for the join to be valid. sub_queries are used for cohort analysis, where multiple sub_queries represent cohorts & their labels (exposed through formulas) are used for cohort analysis using some measure or aggregated attribute in the main query.\\n\\n**Single Query Examples**\\n\\n{\\\"query\\\":\\\"What are the top 3 Product Type by Sales Amount per City and their market share in that City\\\",\\\"desc\\\":\\\"In the calculation of market share, we subtract Product Type from the groupings in the denominator (total Sales Amount ) using \\'query_groups() - { Product Type }\\'. This is done to avoid grouping by Product Type in the total Sales Amount , which would result in a 100% market share for each Product Type . By excluding Product Type from the groupings in the denominator, we ensure that the total Sales Amount is aggregated over City alone. This allows us to accurately compute the market share of each Product Type relative to the total Sales Amount in that City\\\",\\\"tokens\\\":\\\"top 3 [Product Type] sort by [Sales Amount] for each [City] [market share]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"total Sales Amount\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) - { Product Type } , query_filters ( ) )\\\"},{\\\"name\\\":\\\"Sales Amount for Product Type\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) + { Product Type } , query_filters ( ) )\\\"},{\\\"name\\\":\\\"market share\\\",\\\"expression\\\":\\\"Sales Amount for Product Type / total Sales Amount * 100\\\"}]}\\n{\\\"query\\\":\\\"Find the top 5 City in terms of Sales Amount and list the top 3 Product Type by Sales Amount within each of these City\\\",\\\"tokens\\\":\\\"top 3 [Product Type] for each [City] sort by [Sales Amount] [categorize based on rank] = \\'top 5 City by Sales Amount\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"categorize based on rank\\\",\\\"expression\\\":\\\"if ( top City by Sales Amount <= 5 ) then \\'top 5 City by Sales Amount\\' else \\'everything else\\'\\\"}],\\\"sub_queries\\\":[{\\\"tokens\\\":\\\"[City] [rank based on Sales Amount]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"rank based on Sales Amount\\\",\\\"expression\\\":\\\"rank ( sum ( Sales Amount ) , \\'desc\\' )\\\"}],\\\"cohort_config\\\":{\\\"name\\\":\\\"top City by Sales Amount\\\",\\\"return_column_id\\\":\\\"rank based on Sales Amount\\\",\\\"anchor_column_id\\\":\\\"City\\\"}}]}\\n{\\\"query\\\":\\\"Identify the top 10 Product Type in Sales Amount, and for each, show the top 3 City with the highest Item Price\\\",\\\"tokens\\\":\\\"top 3 [City] for each [Product Type] sort by [Item Price] [categorize based on rank] = \\'top 10 Product Type by Sales Amount\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"categorize based on rank\\\",\\\"expression\\\":\\\"if ( top Product Type by Sales Amount <= 10 ) then \\'top 10 Product Type by Sales Amount\\' else \\'everything else\\'\\\"}],\\\"sub_queries\\\":[{\\\"tokens\\\":\\\"[Product Type] [rank based on Sales Amount]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"rank based on Sales Amount\\\",\\\"expression\\\":\\\"rank ( sum ( Sales Amount ) , \\'desc\\' )\\\"}],\\\"cohort_config\\\":{\\\"name\\\":\\\"top Product Type by Sales Amount\\\",\\\"return_column_id\\\":\\\"rank based on Sales Amount\\\",\\\"anchor_column_id\\\":\\\"Product Type\\\"}}]}\\n{\\\"query\\\":\\\"show me Sales Amount for week of 11/19/2024\\\",\\\"desc\\\":\\\"First find the week number using IN filter, then apply a filter on the year 2024 to only take into account week number in current year\\\",\\\"tokens\\\":\\\"[Sales Amount] [Sales Date] in ( [Sales Date] [Sales Date].\\'week of year\\' [Sales Date] = \\'11/19/2024\\' ) [Sales Date] = \\'2024\\'\\\"}\\n{\\\"query\\\":\\\"show Product Types with the highest Sales Amount this year\\\",\\\"tokens\\\":\\\"[Product Type] sort by [Sales Amount] descending [Sales Date] = \\'this year\\'\\\"}\\n{\\\"query\\\":\\\"show Product Types that have Sales Amount more than 95 percentile and show me their Sales Amount\\\",\\\"desc\\\":\\\"This template is designed to identify the attributes whose associated \\'measure\\' values exceed the 95th percentile of all \\'measure\\' values in the dataset. It includes a calculation of the 95th percentile value and then applies a filter to count only those attributes where their \\'measure\\' exceeds this percentile threshold. Comparison with percentile function can only be done with an aggregation like sum, average so on. So sum ( measure ) is used for comparison.\\\",\\\"tokens\\\":\\\"[Product Type] [Sales Amount more than 95 percentile] = true [Sales Amount]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Sales Amount more than 95 percentile\\\",\\\"expression\\\":\\\"rank_percentile ( sum ( Sales Amount ) , \\'desc\\' ) > 95\\\"}]}\\n{\\\"query\\\":\\\"create a table with Sales Amount and Item Price by Product Type, City, and State over the last 6 months for my top 10 City all time and sort by Sales Amount\\\",\\\"tokens\\\":\\\"[Sales Amount] [Item Price] [Product Type] [City] [State] [Sales Date] = \\'last 6 months\\' [City] in ( [City] top 10 [City] sort by [Sales Amount] ) sort by [Sales Amount] descending\\\"}\\n{\\\"query\\\":\\\"display Product Types for which Sales Amount increased this year\\\",\\\"desc\\\":\\\"To compute this first compute Sales Amount per Product Type this year and last year. Then compute for which Product Type it increased by doing a difference.\\\",\\\"tokens\\\":\\\"[Product Type] [date] = \\'this year\\' [Sales Amount increased this year] = \\'true\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Sales Amount last year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) , { diff_years ( Sales Date, today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"Sales Amount this year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) , { diff_years ( Sales Date, today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Sales Amount increased this year\\\",\\\"expression\\\":\\\"Sales Amount this year > Sales Amount last year\\\"}]}\\n{\\\"query\\\":\\\"show me Sales Amount for week starting from 11/19/2024\\\",\\\"desc\\\":\\\"This requires assuming the first day of the week is mentioned in the query (start date) & then use \\'between\\' to calculate the week range of 7 days.\\\",\\\"tokens\\\":\\\"[Sales Amount] [Sales Date] between \\'11/19/2024\\' and \\'11/25/2024\\'\\\"}\\n{\\\"query\\\":\\\"best selling Product Type per City\\\",\\\"desc\\\":\\\"Since the user asked for just the best selling attribute (singular form), return only top 1 value.\\\",\\\"tokens\\\":\\\"top 1 [Product Type] sort by [Sales Amount] for each [City]\\\"}\\n{\\\"query\\\":\\\"show Product Type with highest Sales Amount in every year.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [Product Type] sort by sum [Sales Amount] for each [Sales Date] [Sales Date].yearly\\\"}\\n{\\\"query\\\":\\\"show me Product Type that have Sales Amount in the last three months and have no Sales Amount prior\\\",\\\"desc\\\":\\\"In this query, we use a sub query to filter the Product Type that have no Sales Amount prior.\\\",\\\"tokens\\\":\\\"[Product Type] [Sales Amount] > 0 [Sales Date] = \\'last 3 months\\' [Product Type] not in ( [Product Type] [Sales Amount] > 0 [Sales Date] < \\'last 3 months\\' )\\\"}\\n{\\\"query\\\":\\\"best selling Product Types per City\\\",\\\"desc\\\":\\\"Since the user asked for the best selling attributes (plural form), return all sorted by measure column.\\\",\\\"tokens\\\":\\\"[Product Type] sort by [Sales Amount] descending for each [City]\\\"}\\n{\\\"query\\\":\\\"display top 10 Product Types by City\\\",\\\"desc\\\":\\\"Since the user did not specify on what criteria to return top 10 attributes, select a measure i.e. numeric column on best effort basis automatically.\\\",\\\"tokens\\\":\\\"top 10 [Product Type] sort by [Sales Amount] by [City]\\\"}\\n{\\\"query\\\":\\\"How does each Product Type\\'s monthly Sales Amount compare to the top-performing Product Type in the same City\\\",\\\"desc\\\":\\\"Due to limitations in the available functions, we cannot directly compute the comparison between each Product Type\\'s monthly Sales Amount and the top-performing Product Type in the same City. However, by listing each Product Type\\'s monthly Sales Amount alongside the Product Types in the same City, sorted by Sales Amount in descending order for each month, the comparison can be observed.\\\",\\\"tokens\\\":\\\"[Product Type] [Sales Amount] [City] [Sales Date].monthly sort by [Sales Amount] descending for each [City]\\\"}\\n\\n**Conversation Examples with Follow-up Queries**\\n\\nThe following examples illustrate how to generate tokens when the user asks follow-up questions in complex use cases. Each conversation includes a sequence of queries along with their corresponding tokens and any formulas used.\\n\\n[{\\\"query\\\":\\\"show all time top 5 Product Types\\\",\\\"desc\\\":\\\"Select the best measure column to sort the values on.\\\",\\\"tokens\\\":\\\"top 5 [Product Type] sort by [Sales Amount] descending\\\"},{\\\"query\\\":\\\"can you show each of their trend yoy\\\",\\\"desc\\\":\\\"This is a query on query intent that requires to only return trend for the top 5 values in previous conversation. yoy (year over year) represents yearly trend.\\\",\\\"tokens\\\":\\\"[Sales Amount] [Sales Date].yearly [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\\\"},{\\\"query\\\":\\\"compare the Sales Amount this year with last year\\\",\\\"desc\\\":\\\"Comparison intent requires to use \\'vs\\' keyword to compare two time periods.\\\",\\\"tokens\\\":\\\"[Sales Amount] [Sales Date] = \\'this year\\' vs [Sales Date] = \\'last year\\' [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\\\"},{\\\"query\\\":\\\"what is the % change for each Product Type\\\",\\\"desc\\\":\\\"Query requires to show the percentage change of Sales Amount for each Product Type in addition to the comparison in previous answer\\\",\\\"tokens\\\":\\\"[% change] [Product Type] [Sales Amount] [Sales Date] = \\'this year\\' vs [Sales Date] = \\'last year\\' [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Sales Amount this month\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_months ( Sales Date , today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Sales Amount last month\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_months ( Sales Date , today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"% change\\\",\\\"expression\\\":\\\"(Sales Amount this month - Sales Amount last month) / Sales Amount last month * 100\\\"}]},{\\\"query\\\":\\\"compare this with current quarter vs previous quarter\\\",\\\"desc\\\":\\\"Only change the vs arguments in previous query to compare two quarters mentioned in the current query and change the formula expressions to use diff_quarters since the formula was dependent on versus arguments.\\\",\\\"tokens\\\":\\\"[% change] [Product Type] [Sales Amount] [Sales Date] = \\'this quarter\\' vs [Sales Date] = \\'last quarter\\' [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Sales Amount this quarter\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_quarters ( Sales Date , today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Sales Amount last quarter\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_quarters ( Sales Date , today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"% change\\\",\\\"expression\\\":\\\"(Sales Amount this quarter - Sales Amount last quarter) / Sales Amount last quarter * 100\\\"}]}]\\n\\n### **USER FEEDBACK EXAMPLES**\\n\\nBelow are examples from user feedback that map queries to phrase tokens and/or formulas:\\n\\n- **Focus on relevant numeric, text, or date columns and their filters.**\\n- **Prefer user feedback values over schema values if conflicts arise.**\\n- **For columns not in the schema, use formulas from user examples.**\\n- **Ensure formula expressions match the current query\\'s columns and filters.**\\n- **Include relevant formula names in the tokens field, encapsulated in `[]` brackets.**\\n- **When creating multiple formulas with dependencies, include all of them in the formulas list.**\\n- **In case of conflicts between user feedback and synthetic examples, user feedback should take precedence.**\\n\\n**Examples from user feedback below:**\\n{\\\"query\\\":\\\"sales of my product categories by city\\\",\\\"tokens\\\":\\\"[Product Type] [City] [Sales Amount]\\\"}\"\n}\nchat_messages {\n  role: USER\n  content: \"Here, the user has started the conversation from an answer titled - \\'Total Sales\\'. This answer is constructed using specific phrase tokens and may include formulas. The conversation will continue from here with user asking follow-up questions.\\n\\nBelow are the relevant tokens and formulas associated with the initial answer:\\n{\\\"tokens\\\":\\\"[Sales Amount] [Sales Date].\\'weekly\\'\\\"}\\n\\n**Answer Title Related Instruction**:\\nThe title of the answer is provided by the user and may include business-specific terminology that might not be universally recognized. Your task is to interpret these terms as closely as possible using the tokens provided above. This interpretation will serve as a reference for any subsequent questions.\\n\\nThe above tokens and formulas, if any, would be useful to answer follow-up queries. Also, the query results, if exists, would be useful in answering data-related queries, in cases when the user points out to any data in the follow-up queries.\\n\"\n}\nchat_messages {\n  role: USER\n  content: \"### **User Query**\\n\\nUser Query: show me sales by region\\n\\n### **Important Instructions for Handling Follow-Up Queries with Conversation Context**\\nWhen answering follow-up queries, retain the previous context and modify responses according to the user\\'s new requests while following these guidelines:\\n\\n1. **Always Retain Previous Context**: Start by keeping ALL tokens and formulas in the same order from the previous ASSISTANT response {\\\"tokens\\\":\\\"[Sales Amount] [Sales Date].\\'weekly\\'\\\"}.\\n2. **Modify Only Upon User Request**: - If the user asks to change or remove specific phrase tokens, adjust only those phrases. - Keep all other parts of the previous response intact to maintain continuity.\\n3. **Avoid Conflicting Filters and Duplicates**: - Ensure there are no conflicting filters in your response (e.g., [column] = \\'value\\' [column] != \\'value\\' are conflicting.). Also, Do not include duplicate token phrases.\\n4. **Retain Sorting and Grouping Instructions**: - Keep any sorting or grouping instructions from the last response unless the user specifies changes.\\n5. **Replace date filters if needed**: If the user\\'s current query is for a different date period than the date filter present in the last response, remove the previous date filters & append the new date filter.\\n6. **Modify date bucket keyword based on date filter granularity**: If there is an existing date bucket keyword in last ASSISTANT response, then for date ranges spanning multiple units (e.g., \\'last 3 months\\', \\'last 4 years\\'), use a bucketing granularity of the same level (e.g., use \\'monthly\\' for \\'last 3 months\\', \\'yearly\\' for \\'last 4 years\\'). For date filters specifying a single unit (e.g., \\'last month\\', \\'this month\\', \\'last year\\', \\'this quarter\\', so on), use a lower granularity (e.g., \\'weekly\\' for \\'last month\\', \\'this month\\', \\'quarterly\\' for \\'last year\\', \\'this year\\').\\n7. **Retain all output columns**: Retain all output columns unless user asks for a different column. Do not make any assumptions on what to retain unless user specifies it in the question.\\n8. **Incorporate User Feedback**: If the user provides feedback on the current response that you dropped filters or columns, ensure to include them back in the response.\\n9. **User query containing \\'all <attribute>\\'**: - If the user is asking to show data for all <column_name>, remove all filters on that <column_name> in the \\'tokens\\' field.\\n10. **Top/Bottom Intent**: If the user is asking to return top/bottom items, ensure date bucketing like monthly, weekly, yearly so on, is dropped because user is only interested in the top <column_name> in the final answer & date bucketing can cause it to return a trend line.\\n11. **Query on Query Intent**: If the query includes any pronouns or determiners like \\\"those\\\", \\\"them\\\", \\\"these\\\", \\\"that\\\" or phrases like \\\"the ones\\\" or \\\"from above\\\" which refer back to entities or data from previous response. To answer such questions, use the IN/(NOT IN) query accordingly as mentioned in definitions & examples to enclose previous ASSISTANT response inside the IN/(NOT IN) query and then incorporate the user\\'s current tokens to form a new, combined answer.\\n\\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\\342\\200\\224only their names should be included.\\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\\n\\n\\n### **Step-by-Step Guidance for Generating Phrase Tokens**\\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\\n\\n1. **Rephrase the User\\'s Query**\\n   - Rephrase the latest user\\'s query to make it clear and unambiguous, accurately capturing the user\\'s intent.\\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\\n   - The rephrased query should be easily translatable into SQL for data retrieval.\\n   - Use the rephrased query to generate the phrase tokens.\\n2. **Consult Provided Resources**\\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\\n3. **Generate Phrase Tokens Methodically**\\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\\n4. **Ensure Strict Compliance**\\n   - Follow all instructions exactly as given.\\n   - Do **not** invent or assume any information not provided.\\n   - Avoid adding any unlisted elements.\\n5. **Review for Accuracy**\\n   - Verify that the tokens fully represent the user\\'s query and adhere to all guidelines.\\n   - Check for any errors or omissions before finalizing.\\n\\n### **Response Format**\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"rephrasedQuery\\\": \\\"\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"\\\",\\n    \\\"stepByStepThinking\\\": \\\"\\\"\\n  },\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\": [\\n    {\\n      \\\"name\\\": \\\"\\\",\\n      \\\"expression\\\": \\\"\\\"\\n    }\\n  ]\\n}\"\n}\n"}]}, {"timestamp": 1735845429573000, "fields": [{"key": "event.log", "type": "string", "value": "Response from LLM Gateway:\ncompletions {\n  id: \"chatcmpl-AlKypXAOWnuQ3ffskQspXeRZrFR0r\"\n  created: 1735845427\n  choices {\n    text: \"{\\n  \\\"rephrasedQuery\\\": \\\"Show me the sales amount by region on a weekly basis.\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The user wants to see the sales amount grouped by region, retaining the weekly granularity from the previous context.\\\",\\n    \\\"stepByStepThinking\\\": \\\"1. Retain the previous context of showing sales amount on a weekly basis. 2. Add the region column to group the sales amount by region.\\\"\\n  },\\n  \\\"tokens\\\": \\\"[Sales Amount] [Sales Date].\\'weekly\\' [Region]\\\"\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 116\n    prompt_tokens: 11933\n    total_tokens: 12049\n  }\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "8c2ef554ed5b60c5", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8cc87113ef255252"}], "startTime": 1735845427033000, "duration": 269, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "67c076294c60adbf", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8cc87113ef255252"}], "startTime": 1735845427033000, "duration": 61, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "69ec841c81286f99", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8cc87113ef255252"}], "startTime": 1735845427034000, "duration": 54, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "820b4a2e48e5b768", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "2c942b2438d6431c"}], "startTime": 1735845427037000, "duration": 2535034, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "2c942b2438d6431c", "flags": 1, "operationName": "getResponseFromTimedRPCCall", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ce3bb88aa7910544"}], "startTime": 1735845427037000, "duration": 2535108, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "4a30ef73648014f7", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "820b4a2e48e5b768"}], "startTime": 1735845427050000, "duration": 2521198, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.llmgateway.LLMCompletionsService/Complete"}, {"key": "peer.address", "type": "string", "value": "10.252.226.13:33976"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "6c6734a545de594e", "flags": 1, "operationName": "complete", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "4a30ef73648014f7"}], "startTime": 1735845427051000, "duration": 2520040, "tags": [{"key": "component", "type": "string", "value": "eureka-llm-gateway"}, {"key": "pod.name", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc"}, {"key": "x.request.id", "type": "string", "value": "45709801-0330-49b8-873b-440e762e24c7"}, {"key": "self.ip", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc/10.252.224.191"}, {"key": "client.name", "type": "string", "value": "eureka-searcher"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845429571000, "fields": [{"key": "event.log", "type": "string", "value": "Completions response = completions {\n  id: \"chatcmpl-AlKypXAOWnuQ3ffskQspXeRZrFR0r\"\n  created: 1735845427\n  choices {\n    text: \"{\\n  \\\"rephrasedQuery\\\": \\\"Show me the sales amount by region on a weekly basis.\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The user wants to see the sales amount grouped by region, retaining the weekly granularity from the previous context.\\\",\\n    \\\"stepByStepThinking\\\": \\\"1. Retain the previous context of showing sales amount on a weekly basis. 2. Add the region column to group the sales amount by region.\\\"\\n  },\\n  \\\"tokens\\\": \\\"[Sales Amount] [Sales Date].\\'weekly\\' [Region]\\\"\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 116\n    prompt_tokens: 11933\n    total_tokens: 12049\n  }\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "b40219d12c8a170c", "flags": 1, "operationName": "getProtoResponseWithCustomModel", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "6c6734a545de594e"}], "startTime": 1735845427051000, "duration": 2519522, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845427053000, "fields": [{"key": "event.log", "type": "string", "value": "Completions proto request: headers {\n  tenant_id: \"fa794c92-1470-11ee-8c81-cbe72\"\n  client_id: \"eureka-searcher\"\n  request_id: \"45709801-0330-49b8-873b-440e762e24c7\"\n  org_id: \"929225089\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"**Task:**\\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\\n\\nYou are given the following:\\n1. Definition & rules of the language.\\n2. References for which functions and keywords to use with examples.\\n3. Table Schema with column names, their data type, synonyms & sample values.\\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\\n5. Chat History, if any, containing all the previous interactions between user and assistant.\\n\\n**Definitions and Rules of the Phrase Token Language:**\\n\\n### **Key Definitions**\\n\\n1. **Column Types**\\n\\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\\n\\n2. **Output Columns**\\n\\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `\\' \\'`.\\n- **Examples**:\\n  - **Output Column**: [column]\\n  - **Filter Applied**: [column] = \\'value\\'\\n\\n3. **Filters**\\n\\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `\\' \\'`. The general format is `[column] operator \\'value\\'`.\\n- **Filter Logic**:\\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\\n    - **Example**: [column] = \\'value1\\' [column] = \\'value2\\'\\n    *(Matches records where `column` is \\'value1\\' **or** \\'value2\\')*\\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\\n    - **Example**: [column1] = \\'value1\\' [column2] = \\'value2\\'\\n    *(Matches records where `column1` is \\'value1\\' **and** `column2` is \\'value2\\')*\\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].\\'value\\'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\\n\\n4. **Formulas**\\n\\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\\n- **Usage**:\\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\\n- **Structure**:\\n  - **Formulas Field**:\\n    \\\"formulas\\\": [\\n      {\\n        \\\"name\\\": \\\"<formula_name>\\\",\\n        \\\"expression\\\": \\\"<formula_expression>\\\"\\n      },\\n      ...\\n    ]\\n  - **Tokens Field Example**:\\n    {\\n      \\\"tokens\\\": \\\"[Formula Name] by [Column Name]\\\",\\n      \\\"formulas\\\": [ ... ]\\n    }\\n- **Key Points**:\\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user\\'s query, for example, pick a relevant substring of the query.\\n  - **Expressions**:\\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\\n    - Refer to the examples provided later for formula syntax and better understanding.\\n  - **Dependencies**:\\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\", then you cannot apply \\\"sum ( unique users )\\\"\\\" because it is already aggregated i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n**5. Column and Value Selection**\\n\\n- **Column Selection**:\\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user\\'s query. Columns are sorted by relevance in the schema, with the most relevant first.\\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\\n  - **Column Co-occurrence Groups**: Column names separated by commas `,` co-occur with each other and form a use-case/group. When selecting column names relevant for the current user query, **prefer the co-occurring/neighboring columns** within the same group. Columns from different groups are generally not used together.\\n    - **Examples**\\n          Group1 Quantity Purchased,Item Price,State,State,City,Longitude,Sales Amount,Sales Date,Region,Product Type,Item Price,Zip Code\\n\\n- **Value Selection**:\\n  - **Use Schema Values**:\\n    - When applying filters, prioritize sample values from the schema that match the user\\'s query.\\n  - **If Values Are Missing**:\\n    - If matching values are not found in the schema, you may:\\n    - Select the nearest appropriate value from the schema.\\n    - Generate a suitable value based on the query context.\\n    Choose the approach that best captures the user\\'s intent, without bias towards the schema.\\n  - **Ensure Relevance**:\\n    - Only include values that make sense within the context of the query.\\n    - Avoid illogical or irrelevant values.\\n\\n### **Table Schema**\\n\\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\\n\\nCREATE TABLE Retail Sales WS (\\nSales Amount double /*. Group: FACT_RETAPP_SALES.*/,\\nSales Date date /* Current year is 2025.. Group: FACT_RETAPP_SALES.*/,\\nProduct Type text /*. Group: DIM_RETAPP_PRODUCTS.*/,\\nCity text /*. Group: DIM_RETAPP_STORES.*/,\\nState text /*. Group: DIM_RETAPP_STORES.*/,\\nItem Price double /*. Group: FACT_RETAPP_SALES.*/,\\nRegion text /*. Group: DIM_RETAPP_STORES.*/,\\nSales Tax % double /*. Group: FACT_RETAPP_SALES.*/,\\nZip Code text /*. Group: DIM_RETAPP_STORES.*/,\\nLongitude double /*. Group: DIM_RETAPP_STORES.*/,\\nQuantity Purchased int /*. Group: FACT_RETAPP_SALES.*/,\\nLatitude double /*. Group: DIM_RETAPP_STORES.*/,\\nCounty text /*. Group: DIM_RETAPP_STORES.*/,\\nStore Name text /*. Group: DIM_RETAPP_STORES.*/,\\nProduct Name text /*. Group: DIM_RETAPP_PRODUCTS.*/)\\n\\n### **Supported Keyword and Function References with Examples**\\n\\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\\n\\n**Relevant Keywords for Phrase Tokens**\\n\\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\\n\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [Product Type] sort by [Sales Amount]\\\",\\\"bottom 25 [Product Type] sort by count [Product Type]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Sales Amount] ascending\\\",\\\"sort by count [Product Type] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Sales Amount]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[Product Type] begins with \\'a0_value0\\'\\\",\\\"[Product Type] ends with \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[Product Type] contains \\'a0_value0\\'\\\",\\\"[Product Type] contains \\'a0_value0\\' \\'a0_value1\\'\\\",\\\"[Product Type] not contains \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Sales Amount] [Product Type] = \\'a0_value0\\' vs [Product Type] = \\'a0_value1\\'\\\",\\\"[Sales Amount] [Sales Date] = \\'this year\\' vs [Sales Date] = \\'last year\\'\\\",\\\"[Item Price] [City] = \\'a1_value0\\' vs [City] = \\'a1_value1\\' vs [City] = \\'a1_value2\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Sales Amount] by [Sales Date] [Sales Date].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [Product Type]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [Product Type]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[Product Type] in ([Product Type] [Product Type] begins with \\'a0_value0\\' [Sales Amount] > 100 top 10 [Product Type] sort by [Item Price] descending)\\\",\\\"[Product Type] not in ([Product Type] [Product Type] begins with \\'a0_value0\\' [Sales Amount] > 100 top 10 [Product Type] sort by [Item Price] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Sales Amount]\\\",\\\"average [Sales Amount]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [Product Type]\\\"]}\\n\\n\\n**Function References for Formulas**\\n\\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\\n\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Sales Amount )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( Product Type )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Sales Amount > 10), Product Type )\\\",\\\"count_if ( (Sales Amount > 10) , month ( Sales Date ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Sales Amount, Product Type, City)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Sales Amount, Product Type)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { } )\\\",\\\"group_aggregate ( stddev ( Sales Amount ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Sales Amount ), { Product Type , City }, { day_of_week ( Sales Date ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Item Price ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( City ), query_groups ( ) + { Product Type }, query_filters ( ) - { City } )\\\",\\\"group_aggregate ( unique count ( City ) , query_groups ( ) + { Product Type }, query_filters ( ) + { City != \\'a1_value0\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Sales Amount )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Sales Amount)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Sales Amount, 2, 1, Product Type)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Sales Amount, 2, 1, Product Type )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Sales Amount , 99 , \\'asc\\' )\\\",\\\"percentile ( Sales Amount , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Sales Amount )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Sales Amount )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( Product Type )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Sales Amount > 10) , Product Type )\\\",\\\"unique_count_if ( (Sales Amount > 10) , month ( Sales Date ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Sales Amount )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"Product Type in { \\'a0_value0\\' , \\'a0_value1\\' }\\\",\\\"Product Type not in { \\'a0_value0\\' , \\'a0_value1\\' ,\\'a0_value2\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Sales Date >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Sales Date <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Sales Date, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Sales Amount > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Sales Amount > 100 ) then \\'High\\' else if ( Item Price > 100 and Product Type = \\'a0_value0\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Sales Date ) = 2024\\\",\\\"month ( Sales Date ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\n**Date Keywords**\\n\\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\\n\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 7 days\\'\\\",\\\"[Sales Date] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Sales Date] = \\'march\\'\\\",\\\"[Sales Date] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Sales Date] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Sales Date] = \\'Saturday\\'\\\",\\\"[Sales Date] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Sales Date] = \\'march 2024\\'\\\",\\\"[Sales Date] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Sales Date] = \\'this day\\'\\\",\\\"[Sales Date] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Sales Date] = \\'last 2 quarters for each year\\'\\\",\\\"[Sales Date] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Sales Date].yearly\\\",\\\"[Sales Date].quarterly\\\",\\\"[Sales Date].monthly\\\",\\\"[Sales Date].weekly\\\",\\\"[Sales Date].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Sales Date] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Sales Amount] by [Sales Date] [Sales Date].daily month over month\\\",\\\"growth of [Sales Amount] by [Sales Date] [Sales Date].monthly year over year\\\",\\\"growth of [Sales Amount] by [Sales Date] [Sales Date].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Sales Date].\\'day of month\\'\\\",\\\"[Sales Date].\\'month of year\\'\\\",\\\"[Sales Date].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Sales Date] = \\'10 months ago\\'\\\",\\\"[Sales Date] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Sales Date] detailed\\\"]}\\n\\n\\n**Instructions:**\\n\\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\\n\\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\\n\\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today\\'s date in\\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\\n\\n### **Additional Rules for Generating Phrase Tokens**\\n\\n1. **Including Output Columns**\\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\\n    - Choose the output column based on the context of the query.\\n    - **Example**:\\n       - *Invalid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"}`\\n       - *Valid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column3]\\\"}`\\n2. **Expanding Month Abbreviations**\\n    - Expand month abbreviations (e.g., \\'Jan\\', \\'Feb\\') to full names when used as **date filters** in phrase tokens.\\n    - Do **not** expand them if used as filter values in **non-date columns**.\\n3. **Count and Unique Count Usage**\\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\\n    - Do **not** apply them to **measures** or numeric columns.\\n4. **Numeric Comparisons in Formulas**\\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\\n5. **Representing Date Filters in Formulas**\\n    - In **formula expressions**, represent date filters like `\\'last month\\'` using functions such as `diff_months` or `to_date` that calculate the date range.\\n6. **Avoid Redundant Formulas**\\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don\\'t need to create an additional formula for it.\\n    - **Example to Avoid**:\\n       - `{\\\"tokens\\\": \\\"[Measure]\\\", \\\"formulas\\\": [{\\\"name\\\": \\\"Total Measure\\\", \\\"expression\\\": \\\"sum(Measure)\\\"}]}`\\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\\n7. **Filtering on Null Values**\\n    - When filtering on **null values**, encapsulate `\\'null\\'` in single quotes and curly braces `{ }`, like `\\'{null}\\'`.\\n    - **Example**: `[column] != \\'{null}\\'`\\n8. **Growth of phrase cannot co-exist with versus phrase**\\n    - If there is a growth phrase like: \\'growth of sum [measure] by [date] [date].monthly\\', it cannot co-exist with \\'[attribute] = \\'value\\' vs [attribute] = \\'value\\'\\'. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = \\'value\\' [attribute] = \\'value\\' where \\'vs\\' keyword is removed.\\n9. **Avoid Counting and Grouping on the Same Column**\\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\\n10. **Avoid adding \\'by\\' keyword to date bucket**\\n    - When using date bucket in the final answer, do not add \\'by\\' keyword. Remove by keyword and just add date bucket alone.\\n11. **Query-on-Query Intent**:\\n     - **Definition**:\\n        - Occurs when the user\\'s query references previous results or includes subquery logic, similar to SQL subqueries.\\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\\342\\200\\224conditions on the **same column** that cannot be true simultaneously in a single row.\\n     - **Handling Subqueries**:\\n        - Represent such queries using the `in` or `not in` keywords.\\n     - **Syntax**:\\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\\n     - **Application**:\\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\\n        - To determine if a query has subquery intent, rephrase the user\\'s query to make it clear and unambiguous, accurately capturing their intent.\\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\\n\\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\\n\\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\\n\\nsub_queries represent a separate view (similar to SQL view) of data that is joined to main query using anchor_column_id. The return_column_id is the output of the sub_query. Both anchor_column_id & return_column_id need to be output columns in the sub_queries\\' tokens field for the join to be valid. sub_queries are used for cohort analysis, where multiple sub_queries represent cohorts & their labels (exposed through formulas) are used for cohort analysis using some measure or aggregated attribute in the main query.\\n\\n**Single Query Examples**\\n\\n{\\\"query\\\":\\\"What are the top 3 Product Type by Sales Amount per City and their market share in that City\\\",\\\"desc\\\":\\\"In the calculation of market share, we subtract Product Type from the groupings in the denominator (total Sales Amount ) using \\'query_groups() - { Product Type }\\'. This is done to avoid grouping by Product Type in the total Sales Amount , which would result in a 100% market share for each Product Type . By excluding Product Type from the groupings in the denominator, we ensure that the total Sales Amount is aggregated over City alone. This allows us to accurately compute the market share of each Product Type relative to the total Sales Amount in that City\\\",\\\"tokens\\\":\\\"top 3 [Product Type] sort by [Sales Amount] for each [City] [market share]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"total Sales Amount\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) - { Product Type } , query_filters ( ) )\\\"},{\\\"name\\\":\\\"Sales Amount for Product Type\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) + { Product Type } , query_filters ( ) )\\\"},{\\\"name\\\":\\\"market share\\\",\\\"expression\\\":\\\"Sales Amount for Product Type / total Sales Amount * 100\\\"}]}\\n{\\\"query\\\":\\\"Find the top 5 City in terms of Sales Amount and list the top 3 Product Type by Sales Amount within each of these City\\\",\\\"tokens\\\":\\\"top 3 [Product Type] for each [City] sort by [Sales Amount] [categorize based on rank] = \\'top 5 City by Sales Amount\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"categorize based on rank\\\",\\\"expression\\\":\\\"if ( top City by Sales Amount <= 5 ) then \\'top 5 City by Sales Amount\\' else \\'everything else\\'\\\"}],\\\"sub_queries\\\":[{\\\"tokens\\\":\\\"[City] [rank based on Sales Amount]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"rank based on Sales Amount\\\",\\\"expression\\\":\\\"rank ( sum ( Sales Amount ) , \\'desc\\' )\\\"}],\\\"cohort_config\\\":{\\\"name\\\":\\\"top City by Sales Amount\\\",\\\"return_column_id\\\":\\\"rank based on Sales Amount\\\",\\\"anchor_column_id\\\":\\\"City\\\"}}]}\\n{\\\"query\\\":\\\"Identify the top 10 Product Type in Sales Amount, and for each, show the top 3 City with the highest Item Price\\\",\\\"tokens\\\":\\\"top 3 [City] for each [Product Type] sort by [Item Price] [categorize based on rank] = \\'top 10 Product Type by Sales Amount\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"categorize based on rank\\\",\\\"expression\\\":\\\"if ( top Product Type by Sales Amount <= 10 ) then \\'top 10 Product Type by Sales Amount\\' else \\'everything else\\'\\\"}],\\\"sub_queries\\\":[{\\\"tokens\\\":\\\"[Product Type] [rank based on Sales Amount]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"rank based on Sales Amount\\\",\\\"expression\\\":\\\"rank ( sum ( Sales Amount ) , \\'desc\\' )\\\"}],\\\"cohort_config\\\":{\\\"name\\\":\\\"top Product Type by Sales Amount\\\",\\\"return_column_id\\\":\\\"rank based on Sales Amount\\\",\\\"anchor_column_id\\\":\\\"Product Type\\\"}}]}\\n{\\\"query\\\":\\\"show me Sales Amount for week of 11/19/2024\\\",\\\"desc\\\":\\\"First find the week number using IN filter, then apply a filter on the year 2024 to only take into account week number in current year\\\",\\\"tokens\\\":\\\"[Sales Amount] [Sales Date] in ( [Sales Date] [Sales Date].\\'week of year\\' [Sales Date] = \\'11/19/2024\\' ) [Sales Date] = \\'2024\\'\\\"}\\n{\\\"query\\\":\\\"show Product Types with the highest Sales Amount this year\\\",\\\"tokens\\\":\\\"[Product Type] sort by [Sales Amount] descending [Sales Date] = \\'this year\\'\\\"}\\n{\\\"query\\\":\\\"show Product Types that have Sales Amount more than 95 percentile and show me their Sales Amount\\\",\\\"desc\\\":\\\"This template is designed to identify the attributes whose associated \\'measure\\' values exceed the 95th percentile of all \\'measure\\' values in the dataset. It includes a calculation of the 95th percentile value and then applies a filter to count only those attributes where their \\'measure\\' exceeds this percentile threshold. Comparison with percentile function can only be done with an aggregation like sum, average so on. So sum ( measure ) is used for comparison.\\\",\\\"tokens\\\":\\\"[Product Type] [Sales Amount more than 95 percentile] = true [Sales Amount]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Sales Amount more than 95 percentile\\\",\\\"expression\\\":\\\"rank_percentile ( sum ( Sales Amount ) , \\'desc\\' ) > 95\\\"}]}\\n{\\\"query\\\":\\\"create a table with Sales Amount and Item Price by Product Type, City, and State over the last 6 months for my top 10 City all time and sort by Sales Amount\\\",\\\"tokens\\\":\\\"[Sales Amount] [Item Price] [Product Type] [City] [State] [Sales Date] = \\'last 6 months\\' [City] in ( [City] top 10 [City] sort by [Sales Amount] ) sort by [Sales Amount] descending\\\"}\\n{\\\"query\\\":\\\"display Product Types for which Sales Amount increased this year\\\",\\\"desc\\\":\\\"To compute this first compute Sales Amount per Product Type this year and last year. Then compute for which Product Type it increased by doing a difference.\\\",\\\"tokens\\\":\\\"[Product Type] [date] = \\'this year\\' [Sales Amount increased this year] = \\'true\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Sales Amount last year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) , { diff_years ( Sales Date, today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"Sales Amount this year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , query_groups ( ) , { diff_years ( Sales Date, today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Sales Amount increased this year\\\",\\\"expression\\\":\\\"Sales Amount this year > Sales Amount last year\\\"}]}\\n{\\\"query\\\":\\\"show me Sales Amount for week starting from 11/19/2024\\\",\\\"desc\\\":\\\"This requires assuming the first day of the week is mentioned in the query (start date) & then use \\'between\\' to calculate the week range of 7 days.\\\",\\\"tokens\\\":\\\"[Sales Amount] [Sales Date] between \\'11/19/2024\\' and \\'11/25/2024\\'\\\"}\\n{\\\"query\\\":\\\"best selling Product Type per City\\\",\\\"desc\\\":\\\"Since the user asked for just the best selling attribute (singular form), return only top 1 value.\\\",\\\"tokens\\\":\\\"top 1 [Product Type] sort by [Sales Amount] for each [City]\\\"}\\n{\\\"query\\\":\\\"show Product Type with highest Sales Amount in every year.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [Product Type] sort by sum [Sales Amount] for each [Sales Date] [Sales Date].yearly\\\"}\\n{\\\"query\\\":\\\"show me Product Type that have Sales Amount in the last three months and have no Sales Amount prior\\\",\\\"desc\\\":\\\"In this query, we use a sub query to filter the Product Type that have no Sales Amount prior.\\\",\\\"tokens\\\":\\\"[Product Type] [Sales Amount] > 0 [Sales Date] = \\'last 3 months\\' [Product Type] not in ( [Product Type] [Sales Amount] > 0 [Sales Date] < \\'last 3 months\\' )\\\"}\\n{\\\"query\\\":\\\"best selling Product Types per City\\\",\\\"desc\\\":\\\"Since the user asked for the best selling attributes (plural form), return all sorted by measure column.\\\",\\\"tokens\\\":\\\"[Product Type] sort by [Sales Amount] descending for each [City]\\\"}\\n{\\\"query\\\":\\\"display top 10 Product Types by City\\\",\\\"desc\\\":\\\"Since the user did not specify on what criteria to return top 10 attributes, select a measure i.e. numeric column on best effort basis automatically.\\\",\\\"tokens\\\":\\\"top 10 [Product Type] sort by [Sales Amount] by [City]\\\"}\\n{\\\"query\\\":\\\"How does each Product Type\\'s monthly Sales Amount compare to the top-performing Product Type in the same City\\\",\\\"desc\\\":\\\"Due to limitations in the available functions, we cannot directly compute the comparison between each Product Type\\'s monthly Sales Amount and the top-performing Product Type in the same City. However, by listing each Product Type\\'s monthly Sales Amount alongside the Product Types in the same City, sorted by Sales Amount in descending order for each month, the comparison can be observed.\\\",\\\"tokens\\\":\\\"[Product Type] [Sales Amount] [City] [Sales Date].monthly sort by [Sales Amount] descending for each [City]\\\"}\\n\\n**Conversation Examples with Follow-up Queries**\\n\\nThe following examples illustrate how to generate tokens when the user asks follow-up questions in complex use cases. Each conversation includes a sequence of queries along with their corresponding tokens and any formulas used.\\n\\n[{\\\"query\\\":\\\"show all time top 5 Product Types\\\",\\\"desc\\\":\\\"Select the best measure column to sort the values on.\\\",\\\"tokens\\\":\\\"top 5 [Product Type] sort by [Sales Amount] descending\\\"},{\\\"query\\\":\\\"can you show each of their trend yoy\\\",\\\"desc\\\":\\\"This is a query on query intent that requires to only return trend for the top 5 values in previous conversation. yoy (year over year) represents yearly trend.\\\",\\\"tokens\\\":\\\"[Sales Amount] [Sales Date].yearly [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\\\"},{\\\"query\\\":\\\"compare the Sales Amount this year with last year\\\",\\\"desc\\\":\\\"Comparison intent requires to use \\'vs\\' keyword to compare two time periods.\\\",\\\"tokens\\\":\\\"[Sales Amount] [Sales Date] = \\'this year\\' vs [Sales Date] = \\'last year\\' [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\\\"},{\\\"query\\\":\\\"what is the % change for each Product Type\\\",\\\"desc\\\":\\\"Query requires to show the percentage change of Sales Amount for each Product Type in addition to the comparison in previous answer\\\",\\\"tokens\\\":\\\"[% change] [Product Type] [Sales Amount] [Sales Date] = \\'this year\\' vs [Sales Date] = \\'last year\\' [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Sales Amount this month\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_months ( Sales Date , today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Sales Amount last month\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_months ( Sales Date , today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"% change\\\",\\\"expression\\\":\\\"(Sales Amount this month - Sales Amount last month) / Sales Amount last month * 100\\\"}]},{\\\"query\\\":\\\"compare this with current quarter vs previous quarter\\\",\\\"desc\\\":\\\"Only change the vs arguments in previous query to compare two quarters mentioned in the current query and change the formula expressions to use diff_quarters since the formula was dependent on versus arguments.\\\",\\\"tokens\\\":\\\"[% change] [Product Type] [Sales Amount] [Sales Date] = \\'this quarter\\' vs [Sales Date] = \\'last quarter\\' [Product Type] in ( [Product Type] top 5 [Product Type] sort by [Sales Amount] descending )\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Sales Amount this quarter\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_quarters ( Sales Date , today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Sales Amount last quarter\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Sales Amount ) , { Product Type } , { diff_quarters ( Sales Date , today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"% change\\\",\\\"expression\\\":\\\"(Sales Amount this quarter - Sales Amount last quarter) / Sales Amount last quarter * 100\\\"}]}]\\n\\n### **USER FEEDBACK EXAMPLES**\\n\\nBelow are examples from user feedback that map queries to phrase tokens and/or formulas:\\n\\n- **Focus on relevant numeric, text, or date columns and their filters.**\\n- **Prefer user feedback values over schema values if conflicts arise.**\\n- **For columns not in the schema, use formulas from user examples.**\\n- **Ensure formula expressions match the current query\\'s columns and filters.**\\n- **Include relevant formula names in the tokens field, encapsulated in `[]` brackets.**\\n- **When creating multiple formulas with dependencies, include all of them in the formulas list.**\\n- **In case of conflicts between user feedback and synthetic examples, user feedback should take precedence.**\\n\\n**Examples from user feedback below:**\\n{\\\"query\\\":\\\"sales of my product categories by city\\\",\\\"tokens\\\":\\\"[Product Type] [City] [Sales Amount]\\\"}\"\n}\nchat_messages {\n  role: USER\n  content: \"Here, the user has started the conversation from an answer titled - \\'Total Sales\\'. This answer is constructed using specific phrase tokens and may include formulas. The conversation will continue from here with user asking follow-up questions.\\n\\nBelow are the relevant tokens and formulas associated with the initial answer:\\n{\\\"tokens\\\":\\\"[Sales Amount] [Sales Date].\\'weekly\\'\\\"}\\n\\n**Answer Title Related Instruction**:\\nThe title of the answer is provided by the user and may include business-specific terminology that might not be universally recognized. Your task is to interpret these terms as closely as possible using the tokens provided above. This interpretation will serve as a reference for any subsequent questions.\\n\\nThe above tokens and formulas, if any, would be useful to answer follow-up queries. Also, the query results, if exists, would be useful in answering data-related queries, in cases when the user points out to any data in the follow-up queries.\\n\"\n}\nchat_messages {\n  role: USER\n  content: \"### **User Query**\\n\\nUser Query: show me sales by region\\n\\n### **Important Instructions for Handling Follow-Up Queries with Conversation Context**\\nWhen answering follow-up queries, retain the previous context and modify responses according to the user\\'s new requests while following these guidelines:\\n\\n1. **Always Retain Previous Context**: Start by keeping ALL tokens and formulas in the same order from the previous ASSISTANT response {\\\"tokens\\\":\\\"[Sales Amount] [Sales Date].\\'weekly\\'\\\"}.\\n2. **Modify Only Upon User Request**: - If the user asks to change or remove specific phrase tokens, adjust only those phrases. - Keep all other parts of the previous response intact to maintain continuity.\\n3. **Avoid Conflicting Filters and Duplicates**: - Ensure there are no conflicting filters in your response (e.g., [column] = \\'value\\' [column] != \\'value\\' are conflicting.). Also, Do not include duplicate token phrases.\\n4. **Retain Sorting and Grouping Instructions**: - Keep any sorting or grouping instructions from the last response unless the user specifies changes.\\n5. **Replace date filters if needed**: If the user\\'s current query is for a different date period than the date filter present in the last response, remove the previous date filters & append the new date filter.\\n6. **Modify date bucket keyword based on date filter granularity**: If there is an existing date bucket keyword in last ASSISTANT response, then for date ranges spanning multiple units (e.g., \\'last 3 months\\', \\'last 4 years\\'), use a bucketing granularity of the same level (e.g., use \\'monthly\\' for \\'last 3 months\\', \\'yearly\\' for \\'last 4 years\\'). For date filters specifying a single unit (e.g., \\'last month\\', \\'this month\\', \\'last year\\', \\'this quarter\\', so on), use a lower granularity (e.g., \\'weekly\\' for \\'last month\\', \\'this month\\', \\'quarterly\\' for \\'last year\\', \\'this year\\').\\n7. **Retain all output columns**: Retain all output columns unless user asks for a different column. Do not make any assumptions on what to retain unless user specifies it in the question.\\n8. **Incorporate User Feedback**: If the user provides feedback on the current response that you dropped filters or columns, ensure to include them back in the response.\\n9. **User query containing \\'all <attribute>\\'**: - If the user is asking to show data for all <column_name>, remove all filters on that <column_name> in the \\'tokens\\' field.\\n10. **Top/Bottom Intent**: If the user is asking to return top/bottom items, ensure date bucketing like monthly, weekly, yearly so on, is dropped because user is only interested in the top <column_name> in the final answer & date bucketing can cause it to return a trend line.\\n11. **Query on Query Intent**: If the query includes any pronouns or determiners like \\\"those\\\", \\\"them\\\", \\\"these\\\", \\\"that\\\" or phrases like \\\"the ones\\\" or \\\"from above\\\" which refer back to entities or data from previous response. To answer such questions, use the IN/(NOT IN) query accordingly as mentioned in definitions & examples to enclose previous ASSISTANT response inside the IN/(NOT IN) query and then incorporate the user\\'s current tokens to form a new, combined answer.\\n\\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\\342\\200\\224only their names should be included.\\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\\n\\n\\n### **Step-by-Step Guidance for Generating Phrase Tokens**\\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\\n\\n1. **Rephrase the User\\'s Query**\\n   - Rephrase the latest user\\'s query to make it clear and unambiguous, accurately capturing the user\\'s intent.\\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\\n   - The rephrased query should be easily translatable into SQL for data retrieval.\\n   - Use the rephrased query to generate the phrase tokens.\\n2. **Consult Provided Resources**\\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\\n3. **Generate Phrase Tokens Methodically**\\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\\n4. **Ensure Strict Compliance**\\n   - Follow all instructions exactly as given.\\n   - Do **not** invent or assume any information not provided.\\n   - Avoid adding any unlisted elements.\\n5. **Review for Accuracy**\\n   - Verify that the tokens fully represent the user\\'s query and adhere to all guidelines.\\n   - Check for any errors or omissions before finalizing.\\n\\n### **Response Format**\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"rephrasedQuery\\\": \\\"\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"\\\",\\n    \\\"stepByStepThinking\\\": \\\"\\\"\\n  },\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\": [\\n    {\\n      \\\"name\\\": \\\"\\\",\\n      \\\"expression\\\": \\\"\\\"\\n    }\\n  ]\\n}\"\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "2ca04e481b583c20", "flags": 1, "operationName": "getModelsForTenantAndOrg", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "5d75d573819e3d69"}], "startTime": 1735845427051000, "duration": 457, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "5d75d573819e3d69", "flags": 1, "operationName": "getLLMConfigMap", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "b40219d12c8a170c"}], "startTime": 1735845427051000, "duration": 515, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "44ea04113262bf7e", "flags": 1, "operationName": "getLLMApiProperties", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "b40219d12c8a170c"}], "startTime": 1735845427052000, "duration": 587, "tags": [{"key": "is-custom-model", "type": "string", "value": "false"}, {"key": "api-version", "type": "string", "value": "2024-02-01"}, {"key": "endpoint", "type": "string", "value": "https://llm-staging-east-us-2.openai.azure.com/"}, {"key": "deployment-id", "type": "string", "value": "eureka-gpt-4o"}, {"key": "client-name", "type": "string", "value": "eureka-searcher"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "5e7ea29e34965d3b", "flags": 1, "operationName": "getDefaultModel", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "44ea04113262bf7e"}], "startTime": 1735845427052000, "duration": 286, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "c3378c3f5d33e1d7", "flags": 1, "operationName": "get", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "97eec86bdee1db7b"}], "startTime": 1735845427057000, "duration": 944, "tags": [{"key": "cacheHit", "type": "string", "value": "false"}, {"key": "get.key", "type": "string", "value": "eureka-gpt-4o--1409994884"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=97eec86bdee1db7b; skipping clock skew adjustment"]}, {"traceID": "ac215def619acbf7", "spanID": "a9889f73a82c62ae", "flags": 1, "operationName": "chatCompletion", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "97eec86bdee1db7b"}], "startTime": 1735845427061000, "duration": 2508134, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=97eec86bdee1db7b; skipping clock skew adjustment"]}, {"traceID": "ac215def619acbf7", "spanID": "b51c985b38f2de22", "flags": 1, "operationName": "put", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "97eec86bdee1db7b"}], "startTime": 1735845429569000, "duration": 1060, "tags": [{"key": "put.key", "type": "string", "value": "eureka-gpt-4o--1409994884"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=97eec86bdee1db7b; skipping clock skew adjustment"]}, {"traceID": "ac215def619acbf7", "spanID": "8c3ae822a8fa4ca2", "flags": 1, "operationName": "TMLPostProcessor.process", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "4dbf0e39a79c4207"}], "startTime": 1735845429573000, "duration": 879, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845429574000, "fields": [{"key": "event.log", "type": "string", "value": "Post processed tokens: [Sales Amount] [Sales Date].'weekly' [Region]"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "4dbf0e39a79c4207", "flags": 1, "operationName": "getResultFromTML", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "eb53d04095953fea"}], "startTime": 1735845429573000, "duration": 1007, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845429573000, "fields": [{"key": "event.log", "type": "string", "value": "Using TML translation directly: tokens: \"[Sales Amount] [Sales Date].\\'weekly\\' [Region]\"\nreasoning {\n  assumptions: \"The user wants to see the sales amount grouped by region, retaining the weekly granularity from the previous context.\"\n  step_by_step_thinking: \"1. Retain the previous context of showing sales amount on a weekly basis. 2. Add the region column to group the sales amount by region.\"\n}\nrephrased_query: \"Show me the sales amount by region on a weekly basis.\"\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "01f191790c1e6717", "flags": 1, "operationName": "translateTokens", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8c3ae822a8fa4ca2"}], "startTime": 1735845429574000, "duration": 20, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "b13b14527cfbaba9", "flags": 1, "operationName": "populateConvAssistDebugInfo", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "63b1674faf8d04c8"}], "startTime": 1735845429576000, "duration": 69, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "a404f9794ea4142f", "flags": 1, "operationName": "_update_conversation_save", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8443526528e1455c"}], "startTime": 1735845429580345, "duration": 3957, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "97820137d8a20566", "flags": 1, "operationName": "add_conv", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "a404f9794ea4142f"}], "startTime": 1735845429582533, "duration": 1727, "tags": [{"key": "conv.id", "type": "string", "value": "fc858307-e971-4853-a842-dda37efa1131"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "614571154f4e633e", "flags": 1, "operationName": "handleGraphQl.serialize", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "aee919a8c63f348b"}], "startTime": 1735845429660000, "duration": 358, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "29b5cd79c6250f22", "flags": 1, "operationName": "getFilteredResponse", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "ac215def619acbf7"}], "startTime": 1735845429691908, "duration": 367003, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "d694d5f33192e38c", "flags": 1, "operationName": "StringFilterHeuristic.apply", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "29b5cd79c6250f22"}], "startTime": 1735845429692515, "duration": 270284, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "acdca2f3cc9d76fd", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "d694d5f33192e38c"}], "startTime": 1735845429693724, "duration": 268987, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "6af145e0c9338106", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "1bb1a3f39d3893e7"}], "startTime": 1735845429929000, "duration": 948, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "x.request.id", "type": "string", "value": "6a7320feb3550380fc8933c94757ae0d"}, {"key": "user.id", "type": "string", "value": ""}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh/10.252.224.19"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "1bb1a3f39d3893e7", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "acdca2f3cc9d76fd"}], "startTime": 1735845429929000, "duration": 1613, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.metadata.MetadataService/applyValueHeuristic"}, {"key": "peer.address", "type": "string", "value": "10.252.226.251:49706"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "8276fcb02dad57a1", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "6af145e0c9338106"}], "startTime": 1735845429930000, "duration": 740, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "x.request.id", "type": "string", "value": "45709801-0330-49b8-873b-440e762e24c7"}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh/10.252.224.19"}, {"key": "x.tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845429930000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic request: ([Sales Amount] [Sales Date].'weekly' [Region],[])"}]}, {"timestamp": 1735845429930000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic response: query: \"[Sales Amount] [Sales Date].\\'weekly\\' [Region]\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "c3606f40352edeed", "flags": 1, "operationName": "applyFilterHeuristics", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "8276fcb02dad57a1"}], "startTime": 1735845429930000, "duration": 224, "tags": [{"key": "query.updated", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735845429930000, "fields": [{"key": "event.log", "type": "string", "value": "ValueHeuristicsResponse query: \"[Sales Amount] [Sales Date].\\'weekly\\' [Region]\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "ac215def619acbf7", "spanID": "45acd3c83f8148d7", "flags": 1, "operationName": "sanitizeTMLQuery", "references": [{"refType": "CHILD_OF", "traceID": "ac215def619acbf7", "spanID": "29b5cd79c6250f22"}], "startTime": 1735845429970601, "duration": 24929, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735845429970823, "fields": [{"key": "event.log", "type": "string", "value": "TML query Before Sanitization: [[Sales Amount] [Sales Date].'weekly' [Region]]"}]}, {"timestamp": 1735845429995506, "fields": [{"key": "event.log", "type": "string", "value": "TML query After Sanitization: [[Sales Amount] [Sales Date].weekly [Region]]"}]}], "processID": "p1", "warnings": null}], "processes": {"p1": {"serviceName": "eureka-agent", "tags": [{"key": "hostname", "type": "string", "value": "ip-10-254-128-10.ec2.internal"}, {"key": "ip", "type": "string", "value": "10.254.128.10"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p2": {"serviceName": "eureka-graphql", "tags": [{"key": "hostname", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "ip", "type": "string", "value": "10.252.225.72"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p3": {"serviceName": "convassist", "tags": [{"key": "hostname", "type": "string", "value": "convassist-5db97bf549-rwxlq"}, {"key": "ip", "type": "string", "value": "10.252.225.166"}, {"key": "jaeger.version", "type": "string", "value": "Python-4.8.0"}]}, "p4": {"serviceName": "eureka-searcher", "tags": [{"key": "hostname", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "ip", "type": "string", "value": "10.252.226.13"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p5": {"serviceName": "eureka-llm-gateway", "tags": [{"key": "hostname", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc"}, {"key": "ip", "type": "string", "value": "10.252.224.191"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p6": {"serviceName": "eureka-metadata-service", "tags": [{"key": "hostname", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "ip", "type": "string", "value": "10.252.224.19"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}}, "warnings": null}, {"traceID": "64eafe5c19327ba7", "spans": [{"traceID": "64eafe5c19327ba7", "spanID": "64eafe5c19327ba7", "flags": 1, "operationName": "Agent.graphQLHandler", "references": [], "startTime": 1735846030313187, "duration": 3106299, "tags": [{"key": "component", "type": "string", "value": "eureka-agent"}, {"key": "x.request.id", "type": "string", "value": "e9d52e8d-b4f8-41bc-b792-f98e2a4ec200"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "sampler.type", "type": "string", "value": "const"}, {"key": "sampler.param", "type": "bool", "value": true}, {"key": "org.id", "type": "string", "value": "33363357"}, {"key": "self.ip", "type": "string", "value": "ip-10-254-128-10.ec2.internal/10.254.128.10"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030315441, "fields": [{"key": "event.log", "type": "string", "value": "Explicitly adding org admin group 61a00200-8e6f-4517-9564-79a3d86a1456 for user 00000844-4d3c-81bc-877f-b1179c5153f5 in permissions as user is org admin"}]}], "processID": "p1", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "30b67b8ecb11e605", "flags": 1, "operationName": "handleGraphQLReqEnrichment", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "64eafe5c19327ba7"}], "startTime": 1735846030315527, "duration": 48558, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030315537, "fields": [{"key": "event.log", "type": "string", "value": "Enriching message class com.thoughtspot.convassist.SendMessageRequest"}]}, {"timestamp": 1735846030315961, "fields": [{"key": "event.log", "type": "string", "value": "Enriching SendMessageRequest"}]}, {"timestamp": 1735846030316015, "fields": [{"key": "event.log", "type": "string", "value": "SendMessageRequest: conv_id: \"a7b55229-c2bf-4ba6-93ef-cd1721926351\"\nmsg {\n  msg_id: \"6145863c-83ad-4f73-ad48-8385c432818f\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"include SF url\"\n      nls_data {\n        worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      }\n    }\n  }\n}\n"}]}, {"timestamp": 1735846030316156, "fields": [{"key": "event.log", "type": "string", "value": "Enriching USER_COMMAND message payload"}]}, {"timestamp": 1735846030364029, "fields": [{"key": "event.log", "type": "string", "value": "Returning SendMessageReq conv_id: \"a7b55229-c2bf-4ba6-93ef-cd1721926351\"\nmsg {\n  msg_id: \"6145863c-83ad-4f73-ad48-8385c432818f\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"include SF url\"\n      nls_data {\n        query_hypothesis_columns {\n          column_name: \"SF Opp Link\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sf\"\n          guid: \"faff01d3-0476-405a-8256-af207e8b8819\"\n        }\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: 1444047642\n        permission_guids: -1564398878\n        permission_guids: 1467743907\n        permission_guids: -1585248667\n        permission_guids: -1564398878\n        non_sharable: false\n        worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      }\n    }\n  }\n}\n"}]}], "processID": "p1", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "eaa275850527ea28", "flags": 1, "operationName": "getResponseBodyFromCloud", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "64eafe5c19327ba7"}], "startTime": 1735846030364193, "duration": 2798854, "tags": [{"key": "proxy.eurekaCloudApiLatency", "type": "string", "value": "2798"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "aa87f8d07d8485b4", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "eaa275850527ea28"}], "startTime": 1735846030364542, "duration": 2798337, "tags": [{"key": "component", "type": "string", "value": "apache-httpclient"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "ab331422d9e28878", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "aa87f8d07d8485b4"}], "startTime": 1735846030364548, "duration": 2798234, "tags": [{"key": "http.status_code", "type": "int64", "value": 200}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "http.url", "type": "string", "value": "https://eureka.thoughtspotstaging.cloud/graphql"}, {"key": "peer.hostname", "type": "string", "value": "eureka.thoughtspotstaging.cloud"}, {"key": "peer.port", "type": "int64", "value": 443}, {"key": "http.method", "type": "string", "value": "POST"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "f853b05d5fe1e3b3", "flags": 1, "operationName": "handle", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "ab331422d9e28878"}], "startTime": 1735846030599000, "duration": 2530083, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "x.request.id", "type": "string", "value": "e9d52e8d-b4f8-41bc-b792-f98e2a4ec200"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4/10.252.225.72"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "3de5cac31caa2d03", "flags": 1, "operationName": "handleGraphQl", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "f853b05d5fe1e3b3"}], "startTime": 1735846030599000, "duration": 2530028, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "x.request.id", "type": "string", "value": "e9d52e8d-b4f8-41bc-b792-f98e2a4ec200"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "x.thought.spot.orgs", "type": "string", "value": "33363357"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4/10.252.225.72"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "7a4ca034c2661908", "flags": 1, "operationName": "convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "3de5cac31caa2d03"}], "startTime": 1735846030603000, "duration": 2525954, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "bb819caafba036f1", "flags": 1, "operationName": "/convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "ab331422d9e28878"}], "startTime": 1735846030611955, "duration": 2516566, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "peer.ipv4", "type": "string", "value": "10.252.225.72"}, {"key": "peer.port", "type": "string", "value": "33414"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846030612011, "fields": [{"key": "request", "type": "string", "value": "conv_id: \"a7b55229-c2bf-4ba6-93ef-cd1721926351\"\nmsg {\n  msg_id: \"6145863c-83ad-4f73-ad48-8385c432818f\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"include SF url\"\n      nls_data {\n        query_hypothesis_columns {\n          guid: \"faff01d3-0476-405a-8256-af207e8b8819\"\n          column_name: \"SF Opp Link\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sf\"\n        }\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: 1444047642\n        permission_guids: -1564398878\n        permission_guids: 1467743907\n        permission_guids: -1585248667\n        permission_guids: -1564398878\n        non_sharable: false\n        worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      }\n    }\n  }\n}\n"}]}, {"timestamp": 1735846033128472, "fields": [{"key": "response", "type": "string", "value": "responses {\n  msg_id: \"7279b687-41d0-4d67-a0d3-cc9a368c4f16\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          tokens: \"SF Opp Link\"\n          title: \"\"\n          tml_tokens: \"[SF Opp Link]\"\n          cached: false\n          sql_query: \"\"\n          visualization_suggestion {\n            display_mode: UNDEFINED\n            chart_type: NONE\n            users_viz_intent_applied: false\n          }\n          is_partial: false\n          llm_reasoning {\n            assumptions: \"The user wants to include the SF Opp Link column in the output.\"\n            step_by_step_thinking: \"Since the query is straightforward and only asks to include the SF Opp Link column, we will use the column name directly in the tokens.\"\n          }\n        }\n        debug_info {\n        }\n      }\n    }\n  }\n  timestamp: 1735846033\n}\n"}]}], "processID": "p3", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "2ad9daf249fe89a4", "flags": 1, "operationName": "SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "bb819caafba036f1"}], "startTime": 1735846030612069, "duration": 2516329, "tags": [{"key": "x.request.id", "type": "string", "value": "e9d52e8d-b4f8-41bc-b792-f98e2a4ec200"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "org.id", "type": "string", "value": "33363357"}, {"key": "locale", "type": "string", "value": "en-us"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846030614350, "fields": [{"key": "event", "type": "string", "value": "User Query"}, {"key": "value", "type": "string", "value": "User Query: include SF url"}]}], "processID": "p3", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "324c3ee3c48d131b", "flags": 1, "operationName": "get_conv", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "2ad9daf249fe89a4"}], "startTime": 1735846030612702, "duration": 1070, "tags": [{"key": "conv.id", "type": "string", "value": "a7b55229-c2bf-4ba6-93ef-cd1721926351"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "e25755caf80d6a78", "flags": 1, "operationName": "find_tool", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "2ad9daf249fe89a4"}], "startTime": 1735846030614438, "duration": 316, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846030614724, "fields": [{"key": "event", "type": "string", "value": "Find Tool is not enabled. Returning NLSTool."}]}], "processID": "p3", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "5edf6baf3b8b2b85", "flags": 1, "operationName": "_get_tool_response", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "2ad9daf249fe89a4"}], "startTime": 1735846030614822, "duration": 2435956, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "01ba6c11a568c76d", "flags": 1, "operationName": "get_response_from_nls", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "5edf6baf3b8b2b85"}], "startTime": 1735846030615225, "duration": 2435526, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "2a1f03aa7148f95e", "flags": 1, "operationName": "get_response_latest", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "01ba6c11a568c76d"}], "startTime": 1735846030616498, "duration": 2434173, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "eb44ee35be700966", "flags": 1, "operationName": "/eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "2a1f03aa7148f95e"}], "startTime": 1735846030616951, "duration": 2432251, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846030616999, "fields": [{"key": "request", "type": "string", "value": "msg_payload {\n  msg_id: \"6145863c-83ad-4f73-ad48-8385c432818f\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"include SF url\"\n      nls_data {\n        query_hypothesis_columns {\n          guid: \"faff01d3-0476-405a-8256-af207e8b8819\"\n          column_name: \"SF Opp Link\"\n          referenced_by_query_hypothesis: true\n          source_query_term: \"sf\"\n        }\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: 1444047642\n        permission_guids: -1564398878\n        permission_guids: 1467743907\n        permission_guids: -1585248667\n        permission_guids: -1564398878\n        non_sharable: false\n        worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      }\n    }\n  }\n}\nconv {\n  conv_id: \"a7b55229-c2bf-4ba6-93ef-cd1721926351\"\n  user_info {\n    user_id: \"00000844-4d3c-81bc-877f-b1179c5153f5\"\n    tenant_id: \"fa794c92-1470-11ee-8c81-cbe72\"\n    tenant_url: \"https://embed-1-do-not-delete.thoughtspotstaging.cloud/prism\"\n  }\n  initial_ctx {\n    type: TS_WORKSHEET\n   "}]}, {"timestamp": 1735846033049109, "fields": [{"key": "response", "type": "string", "value": "tool: TS_NLS\nmessages {\n  msg_id: \"7279b687-41d0-4d67-a0d3-cc9a368c4f16\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          tokens: \"SF Opp Link\"\n          title: \"\"\n          tml_tokens: \"[SF Opp Link]\"\n          cached: false\n          sql_query: \"\"\n          visualization_suggestion {\n            display_mode: UNDEFINED\n            chart_type: NONE\n            users_viz_intent_applied: false\n          }\n          is_partial: false\n          llm_reasoning {\n            assumptions: \"The user wants to include the SF Opp Link column in the output.\"\n            step_by_step_thinking: \"Since the query is straightforward and only asks to include the SF Opp Link column, we will use the column name directly in the tokens.\"\n          }\n        }\n        debug_info {\n        }\n      }\n    }\n  }\n}\nupdated_messages {\n  msg_id: \"6145863c-83ad-4f73-ad48-8385c432818f\"\n  type: "}]}], "processID": "p3", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "94f30f9bff222b5a", "flags": 1, "operationName": "eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "eb44ee35be700966"}], "startTime": 1735846030625000, "duration": 2423590, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.EurekaGrpcService/ConvAssistNLSearch"}, {"key": "peer.address", "type": "string", "value": "10.252.225.166:59228"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "1343025e25886c99", "flags": 1, "operationName": "NLInstructionsHandler.createIndex", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "ec7c87a4e3bb3f62"}], "startTime": 1735846030626000, "duration": 8958, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "4e220c022eda37cd", "flags": 1, "operationName": "createIndex", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "1343025e25886c99"}], "startTime": 1735846030626000, "duration": 8752, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "ec7c87a4e3bb3f62", "flags": 1, "operationName": "convAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "94f30f9bff222b5a"}], "startTime": 1735846030626000, "duration": 2422825, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "e9d52e8d-b4f8-41bc-b792-f98e2a4ec200"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "0ff84d6f368f5116", "flags": 1, "operationName": "hasIndex", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "4e220c022eda37cd"}], "startTime": 1735846030627000, "duration": 3909, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "4480ebed8a03b9f8", "flags": 1, "operationName": "updateDefaultIngestPipeline", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "4e220c022eda37cd"}], "startTime": 1735846030631000, "duration": 3883, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "2a602ffa79747639", "flags": 1, "operationName": "getConvAssistResult", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "ec7c87a4e3bb3f62"}], "startTime": 1735846030636000, "duration": 2410250, "tags": [{"key": "user.command", "type": "string", "value": "include SF url"}, {"key": "_debugInfo.eureka.ConvAssistDebugInfo", "type": "string", "value": "{\n  \"tenantId\": \"fa794c92-1470-11ee-8c81-cbe72\",\n  \"userId\": \"00000844-4d3c-81bc-877f-b1179c5153f5\",\n  \"userName\": \"\",\n  \"convId\": \"a7b55229-c2bf-4ba6-93ef-cd1721926351\",\n  \"userMsgId\": \"6145863c-83ad-4f73-ad48-8385c432818f\",\n  \"datasourceId\": \"5f92ed57-6310-43c7-9184-7acb9e57829c\",\n  \"userQuery\": \"include SF url\",\n  \"generatedTmlTokens\": \"[SF Opp Link]\",\n  \"generatedSql\": \"\",\n  \"userFeedback\": \"NEUTRAL\",\n  \"timestamp\": \"1735846033046\",\n  \"orgId\": \"33363357\",\n  \"requestId\": \"e9d52e8d-b4f8-41bc-b792-f98e2a4ec200\",\n  \"userMessageCount\": \"1\",\n  \"datasourceName\": \"TSEMBED\",\n  \"asstMsgId\": \"7279b687-41d0-4d67-a0d3-cc9a368c4f16\"\n}"}, {"key": "query.id", "type": "string", "value": ""}, {"key": "query", "type": "string", "value": "include SF url"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "011f77c2404a848d", "flags": 1, "operationName": "getNLSResults", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "2a602ffa79747639"}], "startTime": 1735846030639000, "duration": 2406925, "tags": [{"key": "empty_nl_query", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030639000, "fields": [{"key": "event.log", "type": "string", "value": "Number of worksheet columns = 45"}]}, {"timestamp": 1735846030639000, "fields": [{"key": "event.log", "type": "string", "value": "clientRequest = ctx {\n  init_ctx {\n    worksheet {\n      worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      worksheet_name: \"TSEMBED\"\n      column_details {\n        column_name: \"Account Name\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"5f26ac42-582b-4f09-84ad-c42ea7f2b791\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"dca81639-647e-4fb4-b6af-27d1c0d7aa8b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Account Createddate\"\n        data_type: DATE\n        col_type: ATTRIBUTE\n        guid: \"d70acc35-030b-4a0f-942a-aa9d01b8d5d5\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"9b9ae546-a6e0-42f6-906f-2363505a3904\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Account Type\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"21524f1c-e44a-4364-b65a-54926e5277ce\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"f5548ed5-12f3-4a9c-966d-fd8bb42f39d2\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingpostalcode\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"a1b21320-adea-4390-b24a-7462d38bf456\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"9cdab7d4-d71c-4dbb-b5ad-2b709edba8f8\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Phone\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"d33978b7-487e-4311-9637-ae3affd65976\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"0933b5bf-888c-4052-bca6-a74dd12a658c\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Website\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"0686530e-7218-4e00-99a8-19a8bf4a06f0\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"295c2f8e-2c40-470f-b1ee-1eb557199beb\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippinglongitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"fbaf4150-929a-4e76-9bc5-0ee90bc2d1cf\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"8f5737f7-45a4-41b3-850b-d13dc7719b09\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingcity\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"b9449654-bc94-4860-9d42-50d38f6fdf2f\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"f80485b7-adba-4f40-8fca-1910400ef7f9\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingpostalcode\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"0e05497f-054e-4c84-948d-89646c67042c\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"bbe29e1b-e29f-4561-8b3a-33c570d1209b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Createdbyid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"af765d93-1060-4e92-af86-9c47e7283810\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"6371710b-1718-487d-9993-5e2d050e57da\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Account Ownerid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"9c10e880-abef-4a3e-9347-a466ad5a24b2\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"9da19e76-209d-4c7b-9146-4765fead576a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Tickersymbol\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"77a233c6-0f5f-46a5-80c5-58c938c7fe26\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"34e55fa7-7f48-4b8d-b5e6-4a12941f1572\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Active C\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"49e834db-6126-4a68-aa38-1d90f1645384\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"012ecb09-66cd-47b1-b303-47709250e1e6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingcity\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"604446b1-bf48-4b78-82d8-855dac21c8d2\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"23e371d8-81e7-4c33-9ff8-e7cb7af09da4\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Accountnumber\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"848ca949-7d12-43e0-baf3-0f4dd01ad661\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"38370d07-1f32-4ebe-9bc4-58b7c14bb94a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billinglatitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"af6f7ebd-bb91-49ba-8a0c-434e8b795333\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"8b64bbb7-bf38-44f1-b118-2d11abec1ff0\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingcountry\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"69c14d6a-dab1-4950-ab06-0cf7232933a2\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"b629caf4-ef7f-4e7c-a812-f6e1716de164\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Annualrevenue\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"7e1f49f3-344a-47a9-9dd6-0a980b44d417\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"d4d3545a-3279-445e-95a8-51d6ff9cc0a0\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingstreet\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"65274e01-ab4a-47fc-8e0d-70ff5592a4d4\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"95166ea0-9ba4-4d8b-870e-7e81fa433b95\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"SF Opp Link\"\n        data_type: VARCHAR\n        referenced_by_query_hypothesis: true\n        col_type: ATTRIBUTE\n        source_query_term: \"sf\"\n        guid: \"faff01d3-0476-405a-8256-af207e8b8819\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billinggeocodeaccuracy\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"38dbf124-f601-4e28-af4f-6e2efddf7595\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"1078265f-9f15-4012-b3b3-95d4aabeac6b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingcountry\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"18d7f1bd-7102-4f7e-a14c-82c61f07e203\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"514d9496-696f-43b0-bb3d-d6562dacdd4a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Numberofemployees\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"9ed653d5-74e4-4aba-931e-2d534f25434b\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"817aac67-5011-47ce-a062-99c4e6c94de2\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Parentid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"04c411f4-c986-4878-b422-f898ff785638\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"6e5aba8b-ac28-496a-80b8-1e556f72fa1d\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippinglatitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"1a2d309d-7fdd-446c-be3d-f2af32aed8a1\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"21c3d171-f7da-457f-858b-d6705be1b110\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingstreet\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"12592b79-fe4c-429d-b838-847b0a04033f\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"1b2c53f4-3b2e-4789-bca8-ef1f8b39756a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Isclosed\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"39012fb3-5df9-44e3-a0d7-739c981cde07\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"308dfb84-6244-4935-8927-282a4d1a29f6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Name\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"c2a5962a-fe88-433d-8dc9-901339901013\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"47fb3214-efe9-4317-84a3-59613faedf88\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Iswon\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"cddc0149-87c3-48a7-ad34-fbd08d276667\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"b3968ab5-9558-4fc3-a9d2-fbc2b6239785\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Amount\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"c8449fee-340f-4dfa-b790-6826089a9fd1\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a1eb1b38-f42c-4774-8795-5a3a0bbb3241\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Type\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"344c0273-d437-40b9-88a9-6694b8090e43\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a62adebf-e2a5-4020-9c1d-2174f25c32a2\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Ownerid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"20d909cd-2a2d-477a-8cab-dce37149978a\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"5bec33ac-97d5-4ab7-973e-ba5cb77cb5c6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Id\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"da430c99-1045-4b93-a088-93a70a017218\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Createddate\"\n        data_type: DATE\n        col_type: ATTRIBUTE\n        guid: \"ccca8f82-83a5-4e06-a409-a946ce1b98ca\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"ecfd2be5-78cd-4225-93e5-aa135694d870\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Closedate\"\n        data_type: DATE\n        col_type: ATTRIBUTE\n        guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"0ba211b9-b93e-4a31-b655-601acba160e4\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Accountid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"061439eb-cd65-4808-a0ab-14ff9b497e88\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"b260869d-8deb-45d5-baca-aab5f99f4b5f\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Forecastcategory\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"f0a25a61-db9f-491a-bcb9-81a101203036\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"3494a4a2-0cab-44bf-8160-16300b4e283f\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Description\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"66414b98-29a7-4479-9776-7473b20420ea\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"4ef19d18-00b4-444b-a9e2-45874dbcb60d\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Stagename\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"4fe13431-9237-4652-ad06-78c682876d60\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"fa1a77af-689d-4a59-b249-e907a3448872\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Expectedrevenue\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"7be227c3-88bb-48d0-a457-472b00735ba6\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"45e1c432-7cd2-478e-ac74-5fe85b7e5377\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingstate\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"d0d34b90-2ca9-4be6-aa1e-972ad5dd0d02\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"7b0eb1a6-0358-434e-b30e-bcfdaf86e1b4\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billinglongitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"4080f840-4f73-483a-9f37-88787629eff0\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"144b0a65-cb7a-4b35-9e4a-bed872e98ae6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingstate\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"56fa83a3-4a05-4733-8e61-512c1ae5d2b7\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"b9c39977-9291-476d-8747-6e8c9605f7b9\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Lastactivitydate\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"5f3a5253-1c15-4020-ba05-394da062a4b3\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"2a56b0bd-979c-4616-8029-813aba444f5b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Partneraccountid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"755ea752-bc47-4192-919f-db0e8cdc291e\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"64a6e816-e516-4fbd-be17-dae394d2760f\"\n        is_group_aggregate: false\n      }\n    }\n  }\n}\nquery: \"include SF url\"\nnl_handler_version: LATEST\n"}]}, {"timestamp": 1735846030639000, "fields": [{"key": "event.log", "type": "string", "value": "nlHandlerVersion = LATEST"}]}, {"timestamp": 1735846030639000, "fields": [{"key": "event.log", "type": "string", "value": "worksheetFacetPayload = worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\nworksheet_name: \"TSEMBED\"\ncolumn_details {\n  column_name: \"Account Name\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"5f26ac42-582b-4f09-84ad-c42ea7f2b791\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"dca81639-647e-4fb4-b6af-27d1c0d7aa8b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Account Createddate\"\n  data_type: DATE\n  col_type: ATTRIBUTE\n  guid: \"d70acc35-030b-4a0f-942a-aa9d01b8d5d5\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"9b9ae546-a6e0-42f6-906f-2363505a3904\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Account Type\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"21524f1c-e44a-4364-b65a-54926e5277ce\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"f5548ed5-12f3-4a9c-966d-fd8bb42f39d2\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingpostalcode\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"a1b21320-adea-4390-b24a-7462d38bf456\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"9cdab7d4-d71c-4dbb-b5ad-2b709edba8f8\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Phone\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"d33978b7-487e-4311-9637-ae3affd65976\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"0933b5bf-888c-4052-bca6-a74dd12a658c\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Website\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"0686530e-7218-4e00-99a8-19a8bf4a06f0\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"295c2f8e-2c40-470f-b1ee-1eb557199beb\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippinglongitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"fbaf4150-929a-4e76-9bc5-0ee90bc2d1cf\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"8f5737f7-45a4-41b3-850b-d13dc7719b09\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingcity\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"b9449654-bc94-4860-9d42-50d38f6fdf2f\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"f80485b7-adba-4f40-8fca-1910400ef7f9\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingpostalcode\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"0e05497f-054e-4c84-948d-89646c67042c\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"bbe29e1b-e29f-4561-8b3a-33c570d1209b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Createdbyid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"af765d93-1060-4e92-af86-9c47e7283810\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"6371710b-1718-487d-9993-5e2d050e57da\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Account Ownerid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"9c10e880-abef-4a3e-9347-a466ad5a24b2\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"9da19e76-209d-4c7b-9146-4765fead576a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Tickersymbol\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"77a233c6-0f5f-46a5-80c5-58c938c7fe26\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"34e55fa7-7f48-4b8d-b5e6-4a12941f1572\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Active C\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"49e834db-6126-4a68-aa38-1d90f1645384\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"012ecb09-66cd-47b1-b303-47709250e1e6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingcity\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"604446b1-bf48-4b78-82d8-855dac21c8d2\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"23e371d8-81e7-4c33-9ff8-e7cb7af09da4\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Accountnumber\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"848ca949-7d12-43e0-baf3-0f4dd01ad661\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"38370d07-1f32-4ebe-9bc4-58b7c14bb94a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billinglatitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"af6f7ebd-bb91-49ba-8a0c-434e8b795333\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"8b64bbb7-bf38-44f1-b118-2d11abec1ff0\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingcountry\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"69c14d6a-dab1-4950-ab06-0cf7232933a2\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"b629caf4-ef7f-4e7c-a812-f6e1716de164\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Annualrevenue\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"7e1f49f3-344a-47a9-9dd6-0a980b44d417\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"d4d3545a-3279-445e-95a8-51d6ff9cc0a0\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingstreet\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"65274e01-ab4a-47fc-8e0d-70ff5592a4d4\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"95166ea0-9ba4-4d8b-870e-7e81fa433b95\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"SF Opp Link\"\n  data_type: VARCHAR\n  referenced_by_query_hypothesis: true\n  col_type: ATTRIBUTE\n  source_query_term: \"sf\"\n  guid: \"faff01d3-0476-405a-8256-af207e8b8819\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billinggeocodeaccuracy\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"38dbf124-f601-4e28-af4f-6e2efddf7595\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"1078265f-9f15-4012-b3b3-95d4aabeac6b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingcountry\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"18d7f1bd-7102-4f7e-a14c-82c61f07e203\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"514d9496-696f-43b0-bb3d-d6562dacdd4a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Numberofemployees\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"9ed653d5-74e4-4aba-931e-2d534f25434b\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"817aac67-5011-47ce-a062-99c4e6c94de2\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Parentid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"04c411f4-c986-4878-b422-f898ff785638\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"6e5aba8b-ac28-496a-80b8-1e556f72fa1d\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippinglatitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"1a2d309d-7fdd-446c-be3d-f2af32aed8a1\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"21c3d171-f7da-457f-858b-d6705be1b110\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingstreet\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"12592b79-fe4c-429d-b838-847b0a04033f\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"1b2c53f4-3b2e-4789-bca8-ef1f8b39756a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Isclosed\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"39012fb3-5df9-44e3-a0d7-739c981cde07\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"308dfb84-6244-4935-8927-282a4d1a29f6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Name\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"c2a5962a-fe88-433d-8dc9-901339901013\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"47fb3214-efe9-4317-84a3-59613faedf88\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Iswon\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"cddc0149-87c3-48a7-ad34-fbd08d276667\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"b3968ab5-9558-4fc3-a9d2-fbc2b6239785\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Amount\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"c8449fee-340f-4dfa-b790-6826089a9fd1\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a1eb1b38-f42c-4774-8795-5a3a0bbb3241\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Type\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"344c0273-d437-40b9-88a9-6694b8090e43\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a62adebf-e2a5-4020-9c1d-2174f25c32a2\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Ownerid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"20d909cd-2a2d-477a-8cab-dce37149978a\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"5bec33ac-97d5-4ab7-973e-ba5cb77cb5c6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Id\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"da430c99-1045-4b93-a088-93a70a017218\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Createddate\"\n  data_type: DATE\n  col_type: ATTRIBUTE\n  guid: \"ccca8f82-83a5-4e06-a409-a946ce1b98ca\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"ecfd2be5-78cd-4225-93e5-aa135694d870\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Closedate\"\n  data_type: DATE\n  col_type: ATTRIBUTE\n  guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"0ba211b9-b93e-4a31-b655-601acba160e4\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Accountid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"061439eb-cd65-4808-a0ab-14ff9b497e88\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"b260869d-8deb-45d5-baca-aab5f99f4b5f\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Forecastcategory\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"f0a25a61-db9f-491a-bcb9-81a101203036\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"3494a4a2-0cab-44bf-8160-16300b4e283f\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Description\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"66414b98-29a7-4479-9776-7473b20420ea\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"4ef19d18-00b4-444b-a9e2-45874dbcb60d\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Stagename\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"4fe13431-9237-4652-ad06-78c682876d60\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"fa1a77af-689d-4a59-b249-e907a3448872\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Expectedrevenue\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"7be227c3-88bb-48d0-a457-472b00735ba6\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"45e1c432-7cd2-478e-ac74-5fe85b7e5377\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingstate\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"d0d34b90-2ca9-4be6-aa1e-972ad5dd0d02\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"7b0eb1a6-0358-434e-b30e-bcfdaf86e1b4\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billinglongitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"4080f840-4f73-483a-9f37-88787629eff0\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"144b0a65-cb7a-4b35-9e4a-bed872e98ae6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingstate\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"56fa83a3-4a05-4733-8e61-512c1ae5d2b7\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"b9c39977-9291-476d-8747-6e8c9605f7b9\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Lastactivitydate\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"5f3a5253-1c15-4020-ba05-394da062a4b3\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"2a56b0bd-979c-4616-8029-813aba444f5b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Partneraccountid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"755ea752-bc47-4192-919f-db0e8cdc291e\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"64a6e816-e516-4fbd-be17-dae394d2760f\"\n  is_group_aggregate: false\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "f8c0e983e6eba8b1", "flags": 1, "operationName": "lambda$getAnswerSuggestionFuture$33", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "ec7c87a4e3bb3f62"}], "startTime": 1735846030640000, "duration": 2404919, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846033045000, "fields": [{"key": "event.log", "type": "string", "value": "Sage TML token list = [[SF Opp Link]]"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "1d9baa56b81a36f8", "flags": 1, "operationName": "getSageQueryGenResults", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "f8c0e983e6eba8b1"}], "startTime": 1735846030641000, "duration": 2403830, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030642000, "fields": [{"key": "event.log", "type": "string", "value": "Couldnt find cache value for key: fa794c92-1470-11ee-8c81-cbe72_5f92ed57-6310-43c7-9184-7acb9e57829c"}]}, {"timestamp": 1735846030642000, "fields": [{"key": "event.log", "type": "string", "value": "Populated properties in WorksheetFacetPayload"}]}, {"timestamp": 1735846030646000, "fields": [{"key": "event.log", "type": "string", "value": "Sage query gen cache hit = false"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "41d0d7ab79351285", "flags": 1, "operationName": "getCachedSageQueryGenResultFromElastic", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "1d9baa56b81a36f8"}], "startTime": 1735846030642000, "duration": 4491, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "157bfd1e30b8a391", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "24998b319d2dd428"}], "startTime": 1735846030642000, "duration": 3721, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "24998b319d2dd428", "flags": 1, "operationName": "fetch", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "41d0d7ab79351285"}], "startTime": 1735846030642000, "duration": 4436, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030642000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=00000844-4d3c-81bc-877f-b1179c5153f5 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"5f92ed57-6310-43c7-9184-7acb9e57829c\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"fa794c92-1470-11ee-8c81-cbe72\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"match_phrase\":{\"NL_QUERY\":{\"query\":\"include sf url\"}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 1\"}}},{\"term\":{\"ORG_ID\":{\"value\":\"33363357\"}}},{\"bool\":{\"minimum_should_match\":\"1\",\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"00000844-4d3c-81bc-877f-b1179c5153f5\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}}]}},\"size\":10}"}]}, {"timestamp": 1735846030646000, "fields": [{"key": "event.log", "type": "string", "value": "search-response : SearchResponse: {\"took\":1,\"timed_out\":false,\"_shards\":{\"failed\":0.0,\"successful\":1.0,\"total\":1.0,\"skipped\":0.0},\"hits\":{\"total\":{\"relation\":\"eq\",\"value\":0},\"hits\":[],\"max_score\":null}}"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "a5f93f14e4e4a366", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "24998b319d2dd428"}], "startTime": 1735846030642000, "duration": 78, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "69c2944a7d683550", "flags": 1, "operationName": "getEntriesForNLQuery", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "ef563a1fac174b65"}], "startTime": 1735846030647000, "duration": 3457, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "e9d52e8d-b4f8-41bc-b792-f98e2a4ec200"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "ef563a1fac174b65", "flags": 1, "operationName": "getSageQueryResultsFromQB", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "1d9baa56b81a36f8"}], "startTime": 1735846030647000, "duration": 3514, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030650000, "fields": [{"key": "event.log", "type": "string", "value": "Found 0 entries from question bank for query include SF url"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "58b3f6075c7716ef", "flags": 1, "operationName": "getSchemaFromDescriptors", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "004740962aa20993"}], "startTime": 1735846030650000, "duration": 28054, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "b1ed03f542e52a99", "flags": 1, "operationName": "generateSageQueries", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "1d9baa56b81a36f8"}], "startTime": 1735846030650000, "duration": 2393894, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030650000, "fields": [{"key": "event.log", "type": "string", "value": "NLPConfig: NLPConfig(dateTokenExtractionHeuristics=false, dateSQLFunctionHeuristics=true, dateSQLFunctionDefinitionV2=false, nl2TMLPromptGeneration=false, comparisonHeuristic=true, dateAggregationHeuristic=true, nlHandlerVersion=STABLE, removeOverlappingColumnDetailSampleValues=false, includeColumnSynonymsInPrompt=true, generateColumnMap=false, includeColumnValueSynonymsInPrompt=false, forEachHeuristic=true, seasonHeuristic=true, bypassCache=false, isColdStart=false, useZeroShotTMLPromptGeneration=true, includeColumnTableInfo=true, literacyPromptingEnabled=true, noSage=false, doNotReplaceWildcard=false, maxNumSelectItems=5, cotPromptingEnabled=true)"}]}, {"timestamp": 1735846033044000, "fields": [{"key": "event.log", "type": "string", "value": "UsedColumns-QUERY_HYPOTHESIS: 1"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "004740962aa20993", "flags": 1, "operationName": "getSchema", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "b1ed03f542e52a99"}], "startTime": 1735846030650000, "duration": 28719, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030679000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from NL-to-SQL map: "}]}, {"timestamp": 1735846030679000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Query Hypothesis: SF Opp Link"}]}, {"timestamp": 1735846030679000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from KNN search on saved answers: "}]}, {"timestamp": 1735846030679000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Semantic Value Search: "}]}, {"timestamp": 1735846030679000, "fields": [{"key": "event.log", "type": "string", "value": "Query Hypothesis column, sample values: {SF Opp Link=[]}"}]}, {"timestamp": 1735846030679000, "fields": [{"key": "event.log", "type": "string", "value": "Final Ranked Query Relevant Columns: SF Opp Link"}]}, {"timestamp": 1735846030679000, "fields": [{"key": "event.log", "type": "string", "value": "Final Query relevant column, sample values: {SF Opp Link=[]}"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "88144b44230aef72", "flags": 1, "operationName": "fetchKnnEntries", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "f8c0e983e6eba8b1"}], "startTime": 1735846030651000, "duration": 23180, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030674000, "fields": [{"key": "event.log", "type": "string", "value": "Feedback Column scores: "}]}, {"timestamp": 1735846030674000, "fields": [{"key": "event.log", "type": "string", "value": "Columns dropped from Knn Search "}]}, {"timestamp": 1735846030674000, "fields": [{"key": "event.log", "type": "string", "value": "Final Column scores: "}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "c0d6d6c544c06953", "flags": 1, "operationName": "getSchemaFromQH", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "f8c0e983e6eba8b1"}], "startTime": 1735846030651000, "duration": 2105, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "5b6163dbef166757", "flags": 1, "operationName": "fetchNLSqlMappingsForQuery", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "f8c0e983e6eba8b1"}], "startTime": 1735846030651000, "duration": 7503, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "35f605ecb3787fb9", "flags": 1, "operationName": "fetchSchemaFromConvContext", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "f8c0e983e6eba8b1"}], "startTime": 1735846030651000, "duration": 2109, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "79a90f1b43552991", "flags": 1, "operationName": "KNNSearch", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "88144b44230aef72"}], "startTime": 1735846030653000, "duration": 20223, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030654000, "fields": [{"key": "event.log", "type": "string", "value": "Fetching KNN for query: include SF url"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "4affd54aaaaa9c60", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "81991a071c43472f"}], "startTime": 1735846030653000, "duration": 543, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "81991a071c43472f", "flags": 1, "operationName": "fetchRelevantFeedbackForQuery", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "5b6163dbef166757"}], "startTime": 1735846030653000, "duration": 5218, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "7116095880dca4d8", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "48fe7109a574ac4c"}], "startTime": 1735846030654000, "duration": 239, "tags": [{"key": "NLSqlMappingRequest.worksheet", "type": "string", "value": "5f92ed57-6310-43c7-9184-7acb9e57829c"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "727492e6997ee161", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "79a90f1b43552991"}], "startTime": 1735846030654000, "duration": 13886, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "f886f965000ee45c", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "48fe7109a574ac4c"}], "startTime": 1735846030654000, "duration": 3560, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "48fe7109a574ac4c", "flags": 1, "operationName": "ElasticNLSqlMappingFetcher.fetch", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "81991a071c43472f"}], "startTime": 1735846030654000, "duration": 4442, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030654000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=00000844-4d3c-81bc-877f-b1179c5153f5 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"5f92ed57-6310-43c7-9184-7acb9e57829c\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"fa794c92-1470-11ee-8c81-cbe72\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"bool\":{\"minimum_should_match\":\"1\",\"must\":[{\"term\":{\"ORG_ID\":{\"value\":\"33363357\"}}}],\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"00000844-4d3c-81bc-877f-b1179c5153f5\"}}},{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"WORKSHEET_USER\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}},{\"range\":{\"UP_VOTES\":{\"gte\":1}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 0\"}}}],\"minimum_should_match\":\"1\",\"should\":[{\"match\":{\"PARENT_QUERY\":{\"query\":\"include sf url\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"SF\"}}}]}},\"size\":20,\"track_scores\":true}"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "b084c2f552fdd44a", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "48fe7109a574ac4c"}], "startTime": 1735846030658000, "duration": 126, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "f5f754f90129286b", "flags": 1, "operationName": "searchByEmbedding", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "79a90f1b43552991"}], "startTime": 1735846030668000, "duration": 5577, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "e9d52e8d-b4f8-41bc-b792-f98e2a4ec200"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "84b08a51d39f416d", "flags": 1, "operationName": "applyImpressionWeightedFiltering", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "88144b44230aef72"}], "startTime": 1735846030673000, "duration": 99, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030674000, "fields": [{"key": "event.log", "type": "string", "value": "Total Answers Filtered out: 0"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "fe3ebd4699a465f5", "flags": 1, "operationName": "fetchSemanticValueMatches", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "f8c0e983e6eba8b1"}], "startTime": 1735846030675000, "duration": 3598, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "1411323c4930f95a", "flags": 1, "operationName": "mergeSchemas", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "004740962aa20993"}], "startTime": 1735846030679000, "duration": 114, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "e7d810488731af45", "flags": 1, "operationName": "filterColumnDetails", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "b1ed03f542e52a99"}], "startTime": 1735846030679000, "duration": 376, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846030679000, "fields": [{"key": "event.log", "type": "string", "value": "Original Column Details: Partneraccountid,Lastactivitydate,Shippingstate,Billinglongitude,Billingstate,Expectedrevenue,Stagename,Description,Forecastcategory,Accountid,Closedate,Createddate,Id,Ownerid,Type,Amount,Iswon,Name,Isclosed,Shippingstreet,Shippinglatitude,Parentid,Numberofemployees,Shippingcountry,Billinggeocodeaccuracy,SF Opp Link,Billingstreet,Annualrevenue,Billingcountry,Billinglatitude,Accountnumber,Shippingcity,Active C,Tickersymbol,Account Ownerid,Createdbyid,Shippingpostalcode,Billingcity,Shippinglongitude,Website,Phone,Billingpostalcode,Account Type,Account Createddate,Account Name"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "f2d201d5fe5b9121", "flags": 1, "operationName": "selectColumns", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "e7d810488731af45"}], "startTime": 1735846030679000, "duration": 131, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "681150a527fce31d", "flags": 1, "operationName": "generateQueries", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "b1ed03f542e52a99"}], "startTime": 1735846030680000, "duration": 2363637, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "d074b58854c1a94b", "flags": 1, "operationName": "generateResponse", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "6a8044fd5f37e069"}], "startTime": 1735846030680000, "duration": 2363582, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "6a8044fd5f37e069", "flags": 1, "operationName": "generateTMLResponse", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "681150a527fce31d"}], "startTime": 1735846030680000, "duration": 2363624, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "143d7156de9a5c6d", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "d074b58854c1a94b"}], "startTime": 1735846030700000, "duration": 11976, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "2bdf65bfd7ef916e", "flags": 1, "operationName": "getEmbeddingScoresForExamples", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "d074b58854c1a94b"}], "startTime": 1735846030719000, "duration": 315903, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "2c595f44a5a2e92f", "flags": 1, "operationName": "batchEncode", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "2bdf65bfd7ef916e"}], "startTime": 1735846030719000, "duration": 314587, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "46d86990590a5e27", "flags": 1, "operationName": "getTMLResponseInfoTranslation", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "d074b58854c1a94b"}], "startTime": 1735846031038000, "duration": 2004209, "tags": [{"key": "x.request.id", "type": "string", "value": "e9d52e8d-b4f8-41bc-b792-f98e2a4ec200"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846033042000, "fields": [{"key": "event.log", "type": "string", "value": "LLM response = {\n  \"rephrasedQuery\": \"Include SF Opp Link\",\n  \"reasoning\": {\n    \"assumptions\": \"The user wants to include the SF Opp Link column in the output.\",\n    \"stepByStepThinking\": \"Since the query is straightforward and only asks to include the SF Opp Link column, we will use the column name directly in the tokens.\"\n  },\n  \"tokens\": \"[SF Opp Link]\",\n  \"formulas\": []\n}"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "0b8b15b70ca87746", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "46d86990590a5e27"}], "startTime": 1735846031039000, "duration": 15555, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "1a7d9f9c491c3b71", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "46d86990590a5e27"}], "startTime": 1735846031055000, "duration": 87, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "33cdff267621d11e", "flags": 1, "operationName": "LLMGatewayNLPService::getResponsesFromLLM", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "46d86990590a5e27"}], "startTime": 1735846031055000, "duration": 1986498, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846031057000, "fields": [{"key": "event.log", "type": "string", "value": "Chat Completion prompt = \nSYSTEM:\n**Task:**\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\n\nYou are given the following:\n1. Definition & rules of the language.\n2. References for which functions and keywords to use with examples.\n3. Table Schema with column names, their data type, synonyms & sample values.\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\n5. Chat History, if any, containing all the previous interactions between user and assistant.\n\n**Definitions and Rules of the Phrase Token Language:**\n\n### **Key Definitions**\n\n1. **Column Types**\n\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\n\n2. **Output Columns**\n\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `' '`.\n- **Examples**:\n  - **Output Column**: [column]\n  - **Filter Applied**: [column] = 'value'\n\n3. **Filters**\n\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `' '`. The general format is `[column] operator 'value'`.\n- **Filter Logic**:\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\n    - **Example**: [column] = 'value1' [column] = 'value2'\n    *(Matches records where `column` is 'value1' **or** 'value2')*\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\n    - **Example**: [column1] = 'value1' [column2] = 'value2'\n    *(Matches records where `column1` is 'value1' **and** `column2` is 'value2')*\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].'value'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\n\n4. **Formulas**\n\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\n- **Usage**:\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\n- **Structure**:\n  - **Formulas Field**:\n    \"formulas\": [\n      {\n        \"name\": \"<formula_name>\",\n        \"expression\": \"<formula_expression>\"\n      },\n      ...\n    ]\n  - **Tokens Field Example**:\n    {\n      \"tokens\": \"[Formula Name] by [Column Name]\",\n      \"formulas\": [ ... ]\n    }\n- **Key Points**:\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user's query, for example, pick a relevant substring of the query.\n  - **Expressions**:\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\n    - Refer to the examples provided later for formula syntax and better understanding.\n  - **Dependencies**:\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \"unique users\", expression: \"unique count ( user id )\", then you cannot apply \"sum ( unique users )\"\" because it is already aggregated i.e. \"group_aggregate ( sum ( unique users ) , { } , { } )\" is incorrect because it will fail formula grammar check. The correct expression should be: \"group_aggregate ( unique users , { } , { } )\" i.e. without any aggregation function applied on aggregated formula/column.\n\n**5. Column and Value Selection**\n\n- **Column Selection**:\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user's query. Columns are sorted by relevance in the schema, with the most relevant first.\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\n\n- **Value Selection**:\n  - **Use Schema Values**:\n    - When applying filters, prioritize sample values from the schema that match the user's query.\n  - **If Values Are Missing**:\n    - If matching values are not found in the schema, you may:\n    - Select the nearest appropriate value from the schema.\n    - Generate a suitable value based on the query context.\n    Choose the approach that best captures the user's intent, without bias towards the schema.\n  - **Ensure Relevance**:\n    - Only include values that make sense within the context of the query.\n    - Avoid illogical or irrelevant values.\n\n### **Table Schema**\n\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\n\nCREATE TABLE TSEMBED (\nSF Opp Link text /*. Group: TSEMBED Dev Org - Opps.*/,\nPartneraccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\nLastactivitydate text /*. Group: TSEMBED Dev Org - Opps.*/,\nShippingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\nExpectedrevenue int /*. Group: TSEMBED Dev Org - Opps.*/,\nStagename text /*. Group: TSEMBED Dev Org - Opps.*/,\nDescription text /*. Group: TSEMBED Dev Org - Opps.*/,\nForecastcategory text /*. Group: TSEMBED Dev Org - Opps.*/,\nAccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\nClosedate date /* Current year is 2025.. Group: TSEMBED Dev Org - Opps.*/,\nCreateddate date /*. Group: TSEMBED Dev Org - Opps.*/,\nId text /*. Group: TSEMBED Dev Org - Opps.*/,\nOwnerid text /*. Group: TSEMBED Dev Org - Opps.*/,\nType text /*. Group: TSEMBED Dev Org - Opps.*/,\nAmount int /*. Group: TSEMBED Dev Org - Opps.*/,\nIswon int /*. Group: TSEMBED Dev Org - Opps.*/,\nName text /*. Group: TSEMBED Dev Org - Opps.*/,\nIsclosed int /*. Group: TSEMBED Dev Org - Opps.*/,\nShippingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nParentid text /*. Group: TSEMBED Dev Org Export - Account.*/,\nNumberofemployees int /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillinggeocodeaccuracy text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAnnualrevenue int /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccountnumber text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\nActive C text /*. Group: TSEMBED Dev Org Export - Account.*/,\nTickersymbol text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccount Ownerid text /*. Group: TSEMBED Dev Org Export - Account.*/,\nCreatedbyid text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nWebsite text /*. Group: TSEMBED Dev Org Export - Account.*/,\nPhone text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccount Type text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccount Createddate date /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccount Name text /*. Group: TSEMBED Dev Org Export - Account.*/)\n\n### **Supported Keyword and Function References with Examples**\n\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\n\n**Relevant Keywords for Phrase Tokens**\n\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\n\n{\"function\":\"top|bottom n\",\"description\":\"Generates the top (or bottom) n items from a sorted result. Substitute 'n' with number specified by the user in query. When 'sort by' is used with 'top', it automatically implies sorting is done in descending order. If 'bottom' is used with 'sort by', then it is in ascending order by default.\",\"example\":[\"top 10 [SF Opp Link] sort by [Expectedrevenue]\",\"bottom 25 [SF Opp Link] sort by count [SF Opp Link]\"]}\n{\"function\":\"sort by\",\"example\":[\"sort by [Expectedrevenue] ascending\",\"sort by count [SF Opp Link] descending\"]}\n{\"function\":\"by\",\"description\":\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\",\"example\":[\"by [Expectedrevenue]\"]}\n{\"function\":\"begins|ends with\",\"description\":\"Returns all column values that begins or ends with a value defined in quotes.\",\"example\":[\"[SF Opp Link] begins with 'a0_value0'\",\"[SF Opp Link] ends with 'a0_value0'\"]}\n{\"function\":\"contains|not contains\",\"description\":\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\",\"example\":[\"[SF Opp Link] contains 'a0_value0'\",\"[SF Opp Link] contains 'a0_value0' 'a0_value1'\",\"[SF Opp Link] not contains 'a0_value0'\"]}\n{\"function\":\"vs\",\"description\":\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = 'east' vs [region] = 'west'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = 'value1' vs [attribute] = 'value2'\",\"example\":[\"[Expectedrevenue] [SF Opp Link] = 'a0_value0' vs [SF Opp Link] = 'a0_value1'\",\"[Expectedrevenue] [Closedate] = 'this year' vs [Closedate] = 'last year'\",\"[Amount] [Partneraccountid] = 'a1_value0' vs [Partneraccountid] = 'a1_value1' vs [Partneraccountid] = 'a1_value2'\"]}\n{\"function\":\"growth of\",\"description\":\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\",\"example\":[\"growth of [Expectedrevenue] by [Closedate] [Closedate].'daily'\"]}\n{\"function\":\"unique count\",\"description\":\"Similar to SQL's SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"unique count [SF Opp Link]\"]}\n{\"function\":\"count\",\"description\":\"Similar to SQL's SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"count [SF Opp Link]\"]}\n{\"function\":\"in|not in\",\"description\":\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user's query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using 'in' or 'not in' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn't support use of 'vs' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where 'subsearch' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using 'not in'.\",\"example\":[\"[SF Opp Link] in ([SF Opp Link] [SF Opp Link] begins with 'a0_value0' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\",\"[SF Opp Link] not in ([SF Opp Link] [SF Opp Link] begins with 'a0_value0' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\"]}\n{\"function\":\"sum|average|min|max\",\"description\":\"Similar to SQL's SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\",\"example\":[\"sum [Expectedrevenue]\",\"average [Expectedrevenue]\"]}\n{\"function\":\"for each\",\"description\":\"Used on attributes i.e. columns with type text.\",\"example\":[\"for each [SF Opp Link]\"]}\n\n\n**Function References for Formulas**\n\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\n\n{\"function\":\"average\",\"description\":\"Returns the average of all the values of a column.\",\"example\":[\"average ( Expectedrevenue )\"]}\n{\"function\":\"count\",\"description\":\"Returns the number of rows in the table containing the column.\",\"example\":[\"count ( SF Opp Link )\"]}\n{\"function\":\"count_if\",\"description\":\"Returns the number of rows in the table containing the column that meet a given criteria.\",\"example\":[\"count_if ( (Expectedrevenue > 10), SF Opp Link )\",\"count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\"]}\n{\"function\":\"cumulative_average\",\"description\":\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_average (Expectedrevenue, SF Opp Link, Partneraccountid)\"]}\n{\"function\":\"cumulative_sum\",\"description\":\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_sum (Expectedrevenue, SF Opp Link)\"]}\n{\"function\":\"group_aggregate\",\"description\":\"**Summary of the `group_aggregate` Function**\n\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\n\n**Function Syntax:**\n```\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\n```\n\n**Parameters:**\n\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\n   - `sum(measure0)`\n   - `count(attribute0)`\n   - `unique count (attribute0)`\n   - `average(measure1)`\n   - `avg(measure1)`\n\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\n   - **`query_groups()`**: Includes all groupings from the main query.\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\n\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\n   - **`query_filters()`**: Includes all filters from the main query.\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\n\n**Usage Notes:**\n\n- **Grouping Modifications:**\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\n\n- **Filter Modifications:**\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\n    - Example: `query_filters() + {attribute0 = 'value'}` adds a new filter condition.\n\n- **Process `grouping_set`**:\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\n  - **`query_groups()`**: Use the groupings defined in the main query.\n  - **Modify Groupings with `+` and `-`**:\n    - **Adding Groupings**: Combine main query groupings with additional columns.\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\n\n- **Process `filter_set`**:\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\n  - **`query_filters()`**: Use filters defined in the main query.\n  - **Modify Filters with `+` and `-`**:\n    - **Adding Filters**: Include additional filter conditions.\n    - **Excluding Filters**: Remove filters related to specific columns.\n\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\n\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\n\n**Key Concepts:**\n\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\n\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\n\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\n\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\n\n**Summary of Operators:**\n\n- **Groupings**:\n  - **`{ }`**: No groupings.\n  - **`query_groups()`**: Use main query groupings.\n  - **`+ {columns}`**: Add columns to groupings.\n  - **`- {columns}`**: Remove columns from groupings.\n\n- **Filters**:\n  - **`{ }`**: No filters.\n  - **`query_filters()`**: Use main query filters.\n  - **`+ {conditions}`**: Add filter conditions.\n  - **`- {columns}`**: Remove filters on columns.\n\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\",\"example\":[\"group_aggregate ( sum ( Expectedrevenue ) , { SF Opp Link } , { } )\",\"group_aggregate ( stddev ( Expectedrevenue ) , { } , { } )\",\"group_aggregate ( variance ( Expectedrevenue ), { SF Opp Link , Partneraccountid }, { day_of_week ( Closedate ) = 'friday' } )\",\"group_aggregate ( average ( Amount ), query_groups ( ), query_filters ( ) )\",\"group_aggregate ( count ( Partneraccountid ), query_groups ( ) + { SF Opp Link }, query_filters ( ) - { Partneraccountid } )\",\"group_aggregate ( unique count ( Partneraccountid ) , query_groups ( ) + { SF Opp Link }, query_filters ( ) + { Partneraccountid != 'a1_value0' } )\"]}\n{\"function\":\"max\",\"description\":\"Returns the maximum value of a column.\",\"example\":[\"max ( Expectedrevenue )\"]}\n{\"function\":\"min\",\"description\":\"Returns the minimum value of a column.\",\"example\":[\"min (Expectedrevenue)\"]}\n{\"function\":\"moving_average\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\",\"example\":[\"moving_average (Expectedrevenue, 2, 1, SF Opp Link)\"]}\n{\"function\":\"moving_sum\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\u2026Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\",\"example\":[\"moving_sum ( Expectedrevenue, 2, 1, SF Opp Link )\"]}\n{\"function\":\"percentile\",\"description\":\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\",\"example\":[\"percentile ( Expectedrevenue , 99 , 'asc' )\",\"percentile ( Expectedrevenue , 95 , 'desc' )\"]}\n{\"function\":\"stddev\",\"description\":\"Returns the standard deviation of all values of a column.\",\"example\":[\"stddev ( Expectedrevenue )\"]}\n{\"function\":\"sum\",\"description\":\"Returns the sum of all the values of a numeric column i.e. measure.\",\"example\":[\"sum ( Expectedrevenue )\"]}\n{\"function\":\"unique count\",\"description\":\"Returns the number of unique values of a column.\",\"example\":[\"unique count ( SF Opp Link )\"]}\n{\"function\":\"unique_count_if\",\"description\":\"Returns the number of unique values of a column provided it meets a criteria.\",\"example\":[\"unique_count_if ( (Expectedrevenue > 10) , SF Opp Link )\",\"unique_count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\"]}\n{\"function\":\"variance\",\"description\":\"Returns the variance of all the values of a column.\",\"example\":[\"variance ( Expectedrevenue )\"]}\n{\"function\":\"in|not in\",\"description\":\"Function that takes a column name and a list of values, used in 'formulas' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\",\"example\":[\"SF Opp Link in { 'a0_value0' , 'a0_value1' }\",\"SF Opp Link not in { 'a0_value0' , 'a0_value1' ,'a0_value2' }\"]}\n{\"function\":\"to_date\",\"description\":\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like 'march 2024' in formula language, since 'march 2024' is not a valid formula keyword but only valid in main tokens query.\",\"example\":[\"to_date ('2024-05-16', '%Y-%m-%d')\",\"Closedate >= to_date ('03/01/2024', '%m/%d/%Y') and Closedate <= to_date ('03/31/2024', '%m/%d/%Y')\"]}\n{\"function\":\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\",\"description\":\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords 'this year', 'this day', 'last year', 'last 2 quarters', so on in formula language.\",\"example\":[\"diff_days ( Closedate, today ( ) ) = 0\",\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\",\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\"]}\n{\"function\":\"if-else\",\"description\":\"if-else statements similar to the ones in programming languages, only use them in 'formulas' field.\",\"example\":[\"if ( Expectedrevenue > 100 ) then 'High' else 'Low'\",\"if ( Expectedrevenue > 100 ) then 'High' else if ( Amount > 100 and SF Opp Link = 'a0_value0' ) then 'Medium' else 'Low'\"]}\n{\"function\":\"year|month|day\",\"description\":\"Functions below that are used to extract year, month, and day from a date column or even today() function.\",\"example\":[\"year ( Closedate ) = 2024\",\"month ( Closedate ) = 'June'\",\"day ( today ( ) ) = 2\"]}\n\n\n**Date Keywords**\n\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\n\n{\"function\":\"last|next month\",\"example\":[\"[Closedate] = 'last month'\"]}\n{\"function\":\"last|next n days\",\"example\":[\"[Closedate] = 'last 7 days'\",\"[Closedate] = 'next 7 days'\"]}\n{\"function\":\"last|next n months\",\"example\":[\"[Closedate] = 'last 12 months'\"]}\n{\"function\":\"last|next n quarters\",\"example\":[\"[Closedate] = 'last 12 quarters'\"]}\n{\"function\":\"last|next n weeks\",\"example\":[\"[Closedate] = 'last 12 weeks'\"]}\n{\"function\":\"last|next n years\",\"example\":[\"[Closedate] = 'last 12 years'\"]}\n{\"function\":\"last|next quarter\",\"example\":[\"[Closedate] = 'last quarter'\"]}\n{\"function\":\"last|next week\",\"example\":[\"[Closedate] = 'last week'\"]}\n{\"function\":\"last|next year\",\"example\":[\"[Closedate] = 'last year'\"]}\n{\"function\":\"<month>\",\"example\":[\"[Closedate] = 'march'\",\"[Closedate] = 'april'\"]}\n{\"function\":\"<year>\",\"example\":[\"[Closedate] = '2024'\"]}\n{\"function\":\"<weekday>\",\"example\":[\"[Closedate] = 'Saturday'\",\"[Closedate] = 'Monday'\"]}\n{\"function\":\"<month_year>\",\"example\":[\"[Closedate] = 'march 2024'\",\"[Closedate] = 'april 2024'\"]}\n{\"function\":\"this day|month|year|quarter|week\",\"example\":[\"[Closedate] = 'this day'\",\"[Closedate] = 'this quarter'\"]}\n{\"function\":\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\",\"example\":[\"[Closedate] = 'last 2 quarters for each year'\",\"[Closedate] = 'last 10 weeks for each month'\"]}\n{\"function\":\"yearly|quarterly|monthly|weekly|daily|hourly\",\"description\":\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\",\"example\":[\"[Closedate].yearly\",\"[Closedate].quarterly\",\"[Closedate].monthly\",\"[Closedate].weekly\",\"[Closedate].daily\"]}\n{\"function\":\"between ... and ...\",\"description\":\"Selects records where the date is between the two specified dates. The dates must be in the format 'MM/dd/yyyy'. 'january 2024' type of dates are not supported, they have to be in a date format.\",\"example\":[\"[Closedate] between '01/30/2012' and '01/30/2014'\"]}\n{\"function\":\"month over month|quarter over quarter|year over year|week over week\",\"description\":\"Only used with 'growth of' keyword. The 'year over year' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The 'month over month' keyword compares data between the same time period from different months.\",\"example\":[\"growth of [Expectedrevenue] by [Closedate] [Closedate].daily month over month\",\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly year over year\",\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly quarter over quarter\"]}\n{\"function\":\"day|week of month|quarter|year\",\"description\":\"Returns the day|week number of the month quarter or year for the date value. Example, 'day of month' for 13th Jan would be 13. 'day of year' for 13th Jan would be 13. 'week of month' for 13th Jan would be 2.\",\"example\":[\"[Closedate].'day of month'\",\"[Closedate].'month of year'\",\"[Closedate].'week of year'\"]}\n{\"function\":\"n months|weeks|days|quarters|years ago\",\"example\":[\"[Closedate] = '10 months ago'\",\"[Closedate] = '5 years ago'\"]}\n{\"function\":\"detailed\",\"description\":\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\",\"example\":[\"[Closedate] detailed\"]}\n\n\n**Instructions:**\n\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\n\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\n\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today's date in\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\n\n### **Additional Rules for Generating Phrase Tokens**\n\n1. **Including Output Columns**\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\n    - Choose the output column based on the context of the query.\n    - **Example**:\n       - *Invalid*: `{\"tokens\": \"[column1] = 'value1' [column2] = 'value2'\"}`\n       - *Valid*: `{\"tokens\": \"[column1] = 'value1' [column2] = 'value2' [column3]\"}`\n2. **Expanding Month Abbreviations**\n    - Expand month abbreviations (e.g., 'Jan', 'Feb') to full names when used as **date filters** in phrase tokens.\n    - Do **not** expand them if used as filter values in **non-date columns**.\n3. **Count and Unique Count Usage**\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\n    - Do **not** apply them to **measures** or numeric columns.\n4. **Numeric Comparisons in Formulas**\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\n5. **Representing Date Filters in Formulas**\n    - In **formula expressions**, represent date filters like `'last month'` using functions such as `diff_months` or `to_date` that calculate the date range.\n6. **Avoid Redundant Formulas**\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don't need to create an additional formula for it.\n    - **Example to Avoid**:\n       - `{\"tokens\": \"[Measure]\", \"formulas\": [{\"name\": \"Total Measure\", \"expression\": \"sum(Measure)\"}]}`\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\n7. **Filtering on Null Values**\n    - When filtering on **null values**, encapsulate `'null'` in single quotes and curly braces `{ }`, like `'{null}'`.\n    - **Example**: `[column] != '{null}'`\n8. **Growth of phrase cannot co-exist with versus phrase**\n    - If there is a growth phrase like: 'growth of sum [measure] by [date] [date].monthly', it cannot co-exist with '[attribute] = 'value' vs [attribute] = 'value''. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = 'value' [attribute] = 'value' where 'vs' keyword is removed.\n9. **Avoid Counting and Grouping on the Same Column**\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\n10. **Avoid adding 'by' keyword to date bucket**\n    - When using date bucket in the final answer, do not add 'by' keyword. Remove by keyword and just add date bucket alone.\n11. **Query-on-Query Intent**:\n     - **Definition**:\n        - Occurs when the user's query references previous results or includes subquery logic, similar to SQL subqueries.\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\u2014conditions on the **same column** that cannot be true simultaneously in a single row.\n     - **Handling Subqueries**:\n        - Represent such queries using the `in` or `not in` keywords.\n     - **Syntax**:\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\n     - **Application**:\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\n        - To determine if a query has subquery intent, rephrase the user's query to make it clear and unambiguous, accurately capturing their intent.\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\n\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\n\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\n\n\n**Single Query Examples**\n\n{\"query\":\"I want to see Expectedrevenue of SF Opp Links, for SF Opp Links that were Expectedrevenue yesterday, where those same SF Opp Links have not had any Expectedrevenue today\",\"desc\":\"In this query, we aim to display the 'Expectedrevenue' of 'SF Opp Link's that had recorded 'Expectedrevenue' **yesterday** but have **no 'Expectedrevenue' today**. Essentially, we're identifying 'SF Opp Link's where 'Expectedrevenue' was greater than zero yesterday and zero today.\",\"tokens\":\"[Expectedrevenue] [SF Opp Link] [Closedate] = 'today' vs [Closedate] = 'yesterday' [Expectedrevenue ( today )] = 0 [Expectedrevenue ( yesterday )] > 0\",\"formulas\":[{\"name\":\"Expectedrevenue ( today )\",\"expression\":\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_days ( Closedate , today() ) = 0 } )\"},{\"name\":\"Expectedrevenue ( yesterday )\",\"expression\":\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_days ( Closedate , today() ) = -1 } )\"}]}\n{\"query\":\"I want to see Expectedrevenue of SF Opp Links this month, for SF Opp Links that had Expectedrevenue in the last 2 consecutive months\",\"tokens\":\"[Expectedrevenue] [SF Opp Link] [Closedate] = 'this month' [SF Opp Link] in ( [SF Opp Link] [Expectedrevenue] [Closedate] = 'last month' ) [SF Opp Link] in ( [SF Opp Link] [Expectedrevenue] [Closedate] = '2 months ago' )\"}\n{\"query\":\"show SF Opp Links with the highest Expectedrevenue this year\",\"tokens\":\"[SF Opp Link] sort by [Expectedrevenue] descending [Closedate] = 'this year'\"}\n{\"query\":\"which is the fastest growing SF Opp Link last year\",\"tokens\":\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue] [Closedate] = 'last year'\",\"formulas\":[{\"name\":\"absolute change in Expectedrevenue\",\"expression\":\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\"}]}\n{\"query\":\"which was my best performing SF Opp Link last quarter\",\"desc\":\"Use the 'top 1' format when the query specifically asks for the single highest or 'best' result in a given category or metric. This format directly retrieves the highest-ranking item based on the specified measure and is appropriate for queries that require a definitive top performer without the need for viewing other close contenders.\",\"tokens\":\"top 1 [SF Opp Link] sort by [Expectedrevenue] [Closedate] = 'last quarter'\"}\n{\"query\":\"which were my best performing SF Opp Links since last 4 weeks\",\"desc\":\"Apply the 'sort by' method when the query involves ranking multiple items to display a list of top performers in descending order. This method is suitable for queries where understanding the relative performance of multiple attributes is important, and where the user might benefit from seeing more than just the single best result.\",\"tokens\":\"[SF Opp Link] [Expectedrevenue] [Closedate] >= 'last 4 weeks' sort by sum [Expectedrevenue] descending\"}\n{\"query\":\"list SF Opp Links that have Expectedrevenue more than the average Expectedrevenue of all SF Opp Links\",\"desc\":\"In this query, we are listing all 'SF Opp Link's where the total 'Expectedrevenue' for each 'SF Opp Link' exceeds the average 'Expectedrevenue' across all 'SF Opp Link's. The main query groups the data by 'SF Opp Link' and does not apply any filters. The overall average 'Expectedrevenue' is calculated using 'group_aggregate(average(Expectedrevenue), { }, { })', which computes the average over the entire dataset without any groupings or filters. Since the main query is grouped by 'SF Opp Link', the 'sum(Expectedrevenue)' used in the expression 'sum(Expectedrevenue) > average Expectedrevenue' automatically computes the sum for each 'SF Opp Link'. The comparison effectively identifies those 'SF Opp Link's where their total 'Expectedrevenue' is greater than the overall average\",\"tokens\":\"[SF Opp Link] [Expectedrevenue more than the average Expectedrevenue]\",\"formulas\":[{\"name\":\"average Expectedrevenue\",\"expression\":\"group_aggregate( average ( Expectedrevenue ), { } , { } )\"},{\"name\":\"Expectedrevenue more than the average Expectedrevenue\",\"expression\":\"sum ( Expectedrevenue ) > average Expectedrevenue\"}]}\n{\"query\":\"month over month Expectedrevenue for all SF Opp Links this year\",\"desc\":\"When month over month is mentioned without growth intent, it is assumed that the user wants to see the measure for all attributes for each month of the year.\",\"tokens\":\"[Expectedrevenue] [Closedate].monthly [SF Opp Link] [Closedate] = 'this year'\"}\n{\"query\":\"which SF Opp Link is growing fastest\",\"tokens\":\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue]\",\"formulas\":[{\"name\":\"absolute change in Expectedrevenue\",\"expression\":\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\"}]}\n{\"query\":\"which SF Opp Link is growing fastest yoy\",\"desc\":\"yoy stands for year-over-year, first find absolute change in Expectedrevenue using 12 to denote 12 months before, when date bucketing is monthly\",\"tokens\":\"[SF Opp Link] [absolute change in Expectedrevenue yoy] top 1 by [absolute change in Expectedrevenue yoy] [Closedate].monthly\",\"formulas\":[{\"name\":\"prior year Expectedrevenue\",\"expression\":\"moving_sum (Expectedrevenue , 12, -12, Closedate )\"},{\"name\":\"current year Expectedrevenue\",\"expression\":\"moving_sum (Expectedrevenue , 0, 0, Closedate )\"},{\"name\":\"absolute change in Expectedrevenue yoy\",\"expression\":\"current year Expectedrevenue - prior year Expectedrevenue\"}]}\n{\"query\":\"For every year, which SF Opp Link had largest Expectedrevenue.\",\"desc\":\"'for each' phrase is used when using 'top x' phrase with a date bucketing filter.\",\"tokens\":\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\"}\n{\"query\":\"show SF Opp Link with highest Expectedrevenue in every year.\",\"desc\":\"'for each' phrase is used when using 'top x' phrase with a date bucketing filter.\",\"tokens\":\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\"}\n{\"query\":\"display SF Opp Links for which Expectedrevenue increased this year\",\"desc\":\"To compute this first compute Expectedrevenue per SF Opp Link this year and last year. Then compute for which SF Opp Link it increased by doing a difference.\",\"tokens\":\"[SF Opp Link] [date] = 'this year' [Expectedrevenue increased this year] = 'true'\",\"formulas\":[{\"name\":\"Expectedrevenue last year\",\"expression\":\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = -1 } )\"},{\"name\":\"Expectedrevenue this year\",\"expression\":\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = 0 } )\"},{\"name\":\"Expectedrevenue increased this year\",\"expression\":\"Expectedrevenue this year > Expectedrevenue last year\"}]}\n{\"query\":\"which SF Opp Link is growing fastest in 2024\",\"desc\":\"moving_sum ( Expectedrevenue , 1 , 1 , Closedate ) implies sum of Expectedrevenue in the internal 'Closedate - 1' and 'Closedate + 1'. Since the query asks for fastest growing SF Opp Links, use the formula to compute absolute difference in moving_sum between today and yesterday. Then use sage keywords to find top SF Opp Link for the absolute difference.\",\"tokens\":\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue] [Closedate] = '2024'\",\"formulas\":[{\"name\":\"absolute change in Expectedrevenue\",\"expression\":\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\"}]}\n{\"query\":\"show SF Opp Links that have Expectedrevenue more than 95 percentile and show me their Expectedrevenue\",\"desc\":\"This template is designed to identify the attributes whose associated 'measure' values exceed the 95th percentile of all 'measure' values in the dataset. It includes a calculation of the 95th percentile value and then applies a filter to count only those attributes where their 'measure' exceeds this percentile threshold. Comparison with percentile function can only be done with an aggregation like sum, average so on. So sum ( measure ) is used for comparison.\",\"tokens\":\"[SF Opp Link] [Expectedrevenue more than 95 percentile] = true [Expectedrevenue]\",\"formulas\":[{\"name\":\"Expectedrevenue more than 95 percentile\",\"expression\":\"rank_percentile ( sum ( Expectedrevenue ) , 'desc' ) > 95\"}]}\n\nUSER:\n### **User Query**\n\nUser Query: include SF url\n\n\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\n\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\u2014never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query's intent.\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\u2014only their names should be included.\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\n\n\n### **Step-by-Step Guidance for Generating Phrase Tokens**\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\n\n1. **Rephrase the User's Query**\n   - Rephrase the latest user's query to make it clear and unambiguous, accurately capturing the user's intent.\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\n   - The rephrased query should be easily translatable into SQL for data retrieval.\n   - Use the rephrased query to generate the phrase tokens.\n2. **Consult Provided Resources**\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\n3. **Generate Phrase Tokens Methodically**\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\n4. **Ensure Strict Compliance**\n   - Follow all instructions exactly as given.\n   - Do **not** invent or assume any information not provided.\n   - Avoid adding any unlisted elements.\n5. **Review for Accuracy**\n   - Verify that the tokens fully represent the user's query and adhere to all guidelines.\n   - Check for any errors or omissions before finalizing.\n\n### **Response Format**\n\nThe response should be well-formatted JSON as shown below:\n{\n  \"rephrasedQuery\": \"\",\n  \"reasoning\": {\n    \"assumptions\": \"\",\n    \"stepByStepThinking\": \"\"\n  },\n  \"tokens\": \"\",\n  \"formulas\": [\n    {\n      \"name\": \"\",\n      \"expression\": \"\"\n    }\n  ]\n}\n"}]}, {"timestamp": 1735846031058000, "fields": [{"key": "event.log", "type": "string", "value": "Completion Request = headers {\n  tenant_id: \"fa794c92-1470-11ee-8c81-cbe72\"\n  client_id: \"eureka-searcher\"\n  request_id: \"e9d52e8d-b4f8-41bc-b792-f98e2a4ec200\"\n  org_id: \"33363357\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"**Task:**\\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\\n\\nYou are given the following:\\n1. Definition & rules of the language.\\n2. References for which functions and keywords to use with examples.\\n3. Table Schema with column names, their data type, synonyms & sample values.\\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\\n5. Chat History, if any, containing all the previous interactions between user and assistant.\\n\\n**Definitions and Rules of the Phrase Token Language:**\\n\\n### **Key Definitions**\\n\\n1. **Column Types**\\n\\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\\n\\n2. **Output Columns**\\n\\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `\\' \\'`.\\n- **Examples**:\\n  - **Output Column**: [column]\\n  - **Filter Applied**: [column] = \\'value\\'\\n\\n3. **Filters**\\n\\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `\\' \\'`. The general format is `[column] operator \\'value\\'`.\\n- **Filter Logic**:\\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\\n    - **Example**: [column] = \\'value1\\' [column] = \\'value2\\'\\n    *(Matches records where `column` is \\'value1\\' **or** \\'value2\\')*\\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\\n    - **Example**: [column1] = \\'value1\\' [column2] = \\'value2\\'\\n    *(Matches records where `column1` is \\'value1\\' **and** `column2` is \\'value2\\')*\\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].\\'value\\'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\\n\\n4. **Formulas**\\n\\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\\n- **Usage**:\\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\\n- **Structure**:\\n  - **Formulas Field**:\\n    \\\"formulas\\\": [\\n      {\\n        \\\"name\\\": \\\"<formula_name>\\\",\\n        \\\"expression\\\": \\\"<formula_expression>\\\"\\n      },\\n      ...\\n    ]\\n  - **Tokens Field Example**:\\n    {\\n      \\\"tokens\\\": \\\"[Formula Name] by [Column Name]\\\",\\n      \\\"formulas\\\": [ ... ]\\n    }\\n- **Key Points**:\\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user\\'s query, for example, pick a relevant substring of the query.\\n  - **Expressions**:\\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\\n    - Refer to the examples provided later for formula syntax and better understanding.\\n  - **Dependencies**:\\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\", then you cannot apply \\\"sum ( unique users )\\\"\\\" because it is already aggregated i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n**5. Column and Value Selection**\\n\\n- **Column Selection**:\\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user\\'s query. Columns are sorted by relevance in the schema, with the most relevant first.\\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\\n\\n- **Value Selection**:\\n  - **Use Schema Values**:\\n    - When applying filters, prioritize sample values from the schema that match the user\\'s query.\\n  - **If Values Are Missing**:\\n    - If matching values are not found in the schema, you may:\\n    - Select the nearest appropriate value from the schema.\\n    - Generate a suitable value based on the query context.\\n    Choose the approach that best captures the user\\'s intent, without bias towards the schema.\\n  - **Ensure Relevance**:\\n    - Only include values that make sense within the context of the query.\\n    - Avoid illogical or irrelevant values.\\n\\n### **Table Schema**\\n\\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\\n\\nCREATE TABLE TSEMBED (\\nSF Opp Link text /*. Group: TSEMBED Dev Org - Opps.*/,\\nPartneraccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nLastactivitydate text /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nExpectedrevenue int /*. Group: TSEMBED Dev Org - Opps.*/,\\nStagename text /*. Group: TSEMBED Dev Org - Opps.*/,\\nDescription text /*. Group: TSEMBED Dev Org - Opps.*/,\\nForecastcategory text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nClosedate date /* Current year is 2025.. Group: TSEMBED Dev Org - Opps.*/,\\nCreateddate date /*. Group: TSEMBED Dev Org - Opps.*/,\\nId text /*. Group: TSEMBED Dev Org - Opps.*/,\\nOwnerid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nType text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAmount int /*. Group: TSEMBED Dev Org - Opps.*/,\\nIswon int /*. Group: TSEMBED Dev Org - Opps.*/,\\nName text /*. Group: TSEMBED Dev Org - Opps.*/,\\nIsclosed int /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nParentid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nNumberofemployees int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinggeocodeaccuracy text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAnnualrevenue int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccountnumber text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nActive C text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nTickersymbol text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Ownerid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nCreatedbyid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nWebsite text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nPhone text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Type text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Createddate date /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Name text /*. Group: TSEMBED Dev Org Export - Account.*/)\\n\\n### **Supported Keyword and Function References with Examples**\\n\\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\\n\\n**Relevant Keywords for Phrase Tokens**\\n\\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\\n\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [SF Opp Link] sort by [Expectedrevenue]\\\",\\\"bottom 25 [SF Opp Link] sort by count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Expectedrevenue] ascending\\\",\\\"sort by count [SF Opp Link] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[SF Opp Link] begins with \\'a0_value0\\'\\\",\\\"[SF Opp Link] ends with \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[SF Opp Link] contains \\'a0_value0\\'\\\",\\\"[SF Opp Link] contains \\'a0_value0\\' \\'a0_value1\\'\\\",\\\"[SF Opp Link] not contains \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Expectedrevenue] [SF Opp Link] = \\'a0_value0\\' vs [SF Opp Link] = \\'a0_value1\\'\\\",\\\"[Expectedrevenue] [Closedate] = \\'this year\\' vs [Closedate] = \\'last year\\'\\\",\\\"[Amount] [Partneraccountid] = \\'a1_value0\\' vs [Partneraccountid] = \\'a1_value1\\' vs [Partneraccountid] = \\'a1_value2\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[SF Opp Link] in ([SF Opp Link] [SF Opp Link] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\\\",\\\"[SF Opp Link] not in ([SF Opp Link] [SF Opp Link] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Expectedrevenue]\\\",\\\"average [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [SF Opp Link]\\\"]}\\n\\n\\n**Function References for Formulas**\\n\\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\\n\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Expectedrevenue > 10), SF Opp Link )\\\",\\\"count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Expectedrevenue, SF Opp Link, Partneraccountid)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Expectedrevenue, SF Opp Link)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Expectedrevenue ) , { SF Opp Link } , { } )\\\",\\\"group_aggregate ( stddev ( Expectedrevenue ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Expectedrevenue ), { SF Opp Link , Partneraccountid }, { day_of_week ( Closedate ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Amount ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( Partneraccountid ), query_groups ( ) + { SF Opp Link }, query_filters ( ) - { Partneraccountid } )\\\",\\\"group_aggregate ( unique count ( Partneraccountid ) , query_groups ( ) + { SF Opp Link }, query_filters ( ) + { Partneraccountid != \\'a1_value0\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Expectedrevenue)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Expectedrevenue, 2, 1, SF Opp Link)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Expectedrevenue, 2, 1, SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Expectedrevenue , 99 , \\'asc\\' )\\\",\\\"percentile ( Expectedrevenue , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Expectedrevenue > 10) , SF Opp Link )\\\",\\\"unique_count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"SF Opp Link in { \\'a0_value0\\' , \\'a0_value1\\' }\\\",\\\"SF Opp Link not in { \\'a0_value0\\' , \\'a0_value1\\' ,\\'a0_value2\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Closedate >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Closedate <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Closedate, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else if ( Amount > 100 and SF Opp Link = \\'a0_value0\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Closedate ) = 2024\\\",\\\"month ( Closedate ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\n**Date Keywords**\\n\\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\\n\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Closedate] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 7 days\\'\\\",\\\"[Closedate] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Closedate] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Closedate] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Closedate] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march\\'\\\",\\\"[Closedate] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Closedate] = \\'Saturday\\'\\\",\\\"[Closedate] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march 2024\\'\\\",\\\"[Closedate] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Closedate] = \\'this day\\'\\\",\\\"[Closedate] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 2 quarters for each year\\'\\\",\\\"[Closedate] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Closedate].yearly\\\",\\\"[Closedate].quarterly\\\",\\\"[Closedate].monthly\\\",\\\"[Closedate].weekly\\\",\\\"[Closedate].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Closedate] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].daily month over month\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly year over year\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Closedate].\\'day of month\\'\\\",\\\"[Closedate].\\'month of year\\'\\\",\\\"[Closedate].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Closedate] = \\'10 months ago\\'\\\",\\\"[Closedate] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Closedate] detailed\\\"]}\\n\\n\\n**Instructions:**\\n\\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\\n\\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\\n\\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today\\'s date in\\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\\n\\n### **Additional Rules for Generating Phrase Tokens**\\n\\n1. **Including Output Columns**\\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\\n    - Choose the output column based on the context of the query.\\n    - **Example**:\\n       - *Invalid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"}`\\n       - *Valid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column3]\\\"}`\\n2. **Expanding Month Abbreviations**\\n    - Expand month abbreviations (e.g., \\'Jan\\', \\'Feb\\') to full names when used as **date filters** in phrase tokens.\\n    - Do **not** expand them if used as filter values in **non-date columns**.\\n3. **Count and Unique Count Usage**\\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\\n    - Do **not** apply them to **measures** or numeric columns.\\n4. **Numeric Comparisons in Formulas**\\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\\n5. **Representing Date Filters in Formulas**\\n    - In **formula expressions**, represent date filters like `\\'last month\\'` using functions such as `diff_months` or `to_date` that calculate the date range.\\n6. **Avoid Redundant Formulas**\\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don\\'t need to create an additional formula for it.\\n    - **Example to Avoid**:\\n       - `{\\\"tokens\\\": \\\"[Measure]\\\", \\\"formulas\\\": [{\\\"name\\\": \\\"Total Measure\\\", \\\"expression\\\": \\\"sum(Measure)\\\"}]}`\\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\\n7. **Filtering on Null Values**\\n    - When filtering on **null values**, encapsulate `\\'null\\'` in single quotes and curly braces `{ }`, like `\\'{null}\\'`.\\n    - **Example**: `[column] != \\'{null}\\'`\\n8. **Growth of phrase cannot co-exist with versus phrase**\\n    - If there is a growth phrase like: \\'growth of sum [measure] by [date] [date].monthly\\', it cannot co-exist with \\'[attribute] = \\'value\\' vs [attribute] = \\'value\\'\\'. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = \\'value\\' [attribute] = \\'value\\' where \\'vs\\' keyword is removed.\\n9. **Avoid Counting and Grouping on the Same Column**\\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\\n10. **Avoid adding \\'by\\' keyword to date bucket**\\n    - When using date bucket in the final answer, do not add \\'by\\' keyword. Remove by keyword and just add date bucket alone.\\n11. **Query-on-Query Intent**:\\n     - **Definition**:\\n        - Occurs when the user\\'s query references previous results or includes subquery logic, similar to SQL subqueries.\\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\\342\\200\\224conditions on the **same column** that cannot be true simultaneously in a single row.\\n     - **Handling Subqueries**:\\n        - Represent such queries using the `in` or `not in` keywords.\\n     - **Syntax**:\\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\\n     - **Application**:\\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\\n        - To determine if a query has subquery intent, rephrase the user\\'s query to make it clear and unambiguous, accurately capturing their intent.\\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\\n\\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\\n\\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\\n\\n\\n**Single Query Examples**\\n\\n{\\\"query\\\":\\\"I want to see Expectedrevenue of SF Opp Links, for SF Opp Links that were Expectedrevenue yesterday, where those same SF Opp Links have not had any Expectedrevenue today\\\",\\\"desc\\\":\\\"In this query, we aim to display the \\'Expectedrevenue\\' of \\'SF Opp Link\\'s that had recorded \\'Expectedrevenue\\' **yesterday** but have **no \\'Expectedrevenue\\' today**. Essentially, we\\'re identifying \\'SF Opp Link\\'s where \\'Expectedrevenue\\' was greater than zero yesterday and zero today.\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [SF Opp Link] [Closedate] = \\'today\\' vs [Closedate] = \\'yesterday\\' [Expectedrevenue ( today )] = 0 [Expectedrevenue ( yesterday )] > 0\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue ( today )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_days ( Closedate , today() ) = 0 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue ( yesterday )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_days ( Closedate , today() ) = -1 } )\\\"}]}\\n{\\\"query\\\":\\\"I want to see Expectedrevenue of SF Opp Links this month, for SF Opp Links that had Expectedrevenue in the last 2 consecutive months\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [SF Opp Link] [Closedate] = \\'this month\\' [SF Opp Link] in ( [SF Opp Link] [Expectedrevenue] [Closedate] = \\'last month\\' ) [SF Opp Link] in ( [SF Opp Link] [Expectedrevenue] [Closedate] = \\'2 months ago\\' )\\\"}\\n{\\\"query\\\":\\\"show SF Opp Links with the highest Expectedrevenue this year\\\",\\\"tokens\\\":\\\"[SF Opp Link] sort by [Expectedrevenue] descending [Closedate] = \\'this year\\'\\\"}\\n{\\\"query\\\":\\\"which is the fastest growing SF Opp Link last year\\\",\\\"tokens\\\":\\\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue] [Closedate] = \\'last year\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"absolute change in Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\\\"}]}\\n{\\\"query\\\":\\\"which was my best performing SF Opp Link last quarter\\\",\\\"desc\\\":\\\"Use the \\'top 1\\' format when the query specifically asks for the single highest or \\'best\\' result in a given category or metric. This format directly retrieves the highest-ranking item based on the specified measure and is appropriate for queries that require a definitive top performer without the need for viewing other close contenders.\\\",\\\"tokens\\\":\\\"top 1 [SF Opp Link] sort by [Expectedrevenue] [Closedate] = \\'last quarter\\'\\\"}\\n{\\\"query\\\":\\\"which were my best performing SF Opp Links since last 4 weeks\\\",\\\"desc\\\":\\\"Apply the \\'sort by\\' method when the query involves ranking multiple items to display a list of top performers in descending order. This method is suitable for queries where understanding the relative performance of multiple attributes is important, and where the user might benefit from seeing more than just the single best result.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue] [Closedate] >= \\'last 4 weeks\\' sort by sum [Expectedrevenue] descending\\\"}\\n{\\\"query\\\":\\\"list SF Opp Links that have Expectedrevenue more than the average Expectedrevenue of all SF Opp Links\\\",\\\"desc\\\":\\\"In this query, we are listing all \\'SF Opp Link\\'s where the total \\'Expectedrevenue\\' for each \\'SF Opp Link\\' exceeds the average \\'Expectedrevenue\\' across all \\'SF Opp Link\\'s. The main query groups the data by \\'SF Opp Link\\' and does not apply any filters. The overall average \\'Expectedrevenue\\' is calculated using \\'group_aggregate(average(Expectedrevenue), { }, { })\\', which computes the average over the entire dataset without any groupings or filters. Since the main query is grouped by \\'SF Opp Link\\', the \\'sum(Expectedrevenue)\\' used in the expression \\'sum(Expectedrevenue) > average Expectedrevenue\\' automatically computes the sum for each \\'SF Opp Link\\'. The comparison effectively identifies those \\'SF Opp Link\\'s where their total \\'Expectedrevenue\\' is greater than the overall average\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue more than the average Expectedrevenue]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"average Expectedrevenue\\\",\\\"expression\\\":\\\"group_aggregate( average ( Expectedrevenue ), { } , { } )\\\"},{\\\"name\\\":\\\"Expectedrevenue more than the average Expectedrevenue\\\",\\\"expression\\\":\\\"sum ( Expectedrevenue ) > average Expectedrevenue\\\"}]}\\n{\\\"query\\\":\\\"month over month Expectedrevenue for all SF Opp Links this year\\\",\\\"desc\\\":\\\"When month over month is mentioned without growth intent, it is assumed that the user wants to see the measure for all attributes for each month of the year.\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [Closedate].monthly [SF Opp Link] [Closedate] = \\'this year\\'\\\"}\\n{\\\"query\\\":\\\"which SF Opp Link is growing fastest\\\",\\\"tokens\\\":\\\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"absolute change in Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\\\"}]}\\n{\\\"query\\\":\\\"which SF Opp Link is growing fastest yoy\\\",\\\"desc\\\":\\\"yoy stands for year-over-year, first find absolute change in Expectedrevenue using 12 to denote 12 months before, when date bucketing is monthly\\\",\\\"tokens\\\":\\\"[SF Opp Link] [absolute change in Expectedrevenue yoy] top 1 by [absolute change in Expectedrevenue yoy] [Closedate].monthly\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"prior year Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum (Expectedrevenue , 12, -12, Closedate )\\\"},{\\\"name\\\":\\\"current year Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum (Expectedrevenue , 0, 0, Closedate )\\\"},{\\\"name\\\":\\\"absolute change in Expectedrevenue yoy\\\",\\\"expression\\\":\\\"current year Expectedrevenue - prior year Expectedrevenue\\\"}]}\\n{\\\"query\\\":\\\"For every year, which SF Opp Link had largest Expectedrevenue.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\\\"}\\n{\\\"query\\\":\\\"show SF Opp Link with highest Expectedrevenue in every year.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\\\"}\\n{\\\"query\\\":\\\"display SF Opp Links for which Expectedrevenue increased this year\\\",\\\"desc\\\":\\\"To compute this first compute Expectedrevenue per SF Opp Link this year and last year. Then compute for which SF Opp Link it increased by doing a difference.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [date] = \\'this year\\' [Expectedrevenue increased this year] = \\'true\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue last year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue this year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue increased this year\\\",\\\"expression\\\":\\\"Expectedrevenue this year > Expectedrevenue last year\\\"}]}\\n{\\\"query\\\":\\\"which SF Opp Link is growing fastest in 2024\\\",\\\"desc\\\":\\\"moving_sum ( Expectedrevenue , 1 , 1 , Closedate ) implies sum of Expectedrevenue in the internal \\'Closedate - 1\\' and \\'Closedate + 1\\'. Since the query asks for fastest growing SF Opp Links, use the formula to compute absolute difference in moving_sum between today and yesterday. Then use sage keywords to find top SF Opp Link for the absolute difference.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue] [Closedate] = \\'2024\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"absolute change in Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\\\"}]}\\n{\\\"query\\\":\\\"show SF Opp Links that have Expectedrevenue more than 95 percentile and show me their Expectedrevenue\\\",\\\"desc\\\":\\\"This template is designed to identify the attributes whose associated \\'measure\\' values exceed the 95th percentile of all \\'measure\\' values in the dataset. It includes a calculation of the 95th percentile value and then applies a filter to count only those attributes where their \\'measure\\' exceeds this percentile threshold. Comparison with percentile function can only be done with an aggregation like sum, average so on. So sum ( measure ) is used for comparison.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue more than 95 percentile] = true [Expectedrevenue]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue more than 95 percentile\\\",\\\"expression\\\":\\\"rank_percentile ( sum ( Expectedrevenue ) , \\'desc\\' ) > 95\\\"}]}\"\n}\nchat_messages {\n  role: USER\n  content: \"### **User Query**\\n\\nUser Query: include SF url\\n\\n\\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\\342\\200\\224only their names should be included.\\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\\n\\n\\n### **Step-by-Step Guidance for Generating Phrase Tokens**\\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\\n\\n1. **Rephrase the User\\'s Query**\\n   - Rephrase the latest user\\'s query to make it clear and unambiguous, accurately capturing the user\\'s intent.\\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\\n   - The rephrased query should be easily translatable into SQL for data retrieval.\\n   - Use the rephrased query to generate the phrase tokens.\\n2. **Consult Provided Resources**\\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\\n3. **Generate Phrase Tokens Methodically**\\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\\n4. **Ensure Strict Compliance**\\n   - Follow all instructions exactly as given.\\n   - Do **not** invent or assume any information not provided.\\n   - Avoid adding any unlisted elements.\\n5. **Review for Accuracy**\\n   - Verify that the tokens fully represent the user\\'s query and adhere to all guidelines.\\n   - Check for any errors or omissions before finalizing.\\n\\n### **Response Format**\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"rephrasedQuery\\\": \\\"\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"\\\",\\n    \\\"stepByStepThinking\\\": \\\"\\\"\\n  },\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\": [\\n    {\\n      \\\"name\\\": \\\"\\\",\\n      \\\"expression\\\": \\\"\\\"\\n    }\\n  ]\\n}\"\n}\n"}]}, {"timestamp": 1735846033041000, "fields": [{"key": "event.log", "type": "string", "value": "Response from LLM Gateway:\ncompletions {\n  id: \"chatcmpl-AlL8ZDiSLPQ4atF9OCDg6hRFf6KmB\"\n  created: 1735846031\n  choices {\n    text: \"{\\n  \\\"rephrasedQuery\\\": \\\"Include SF Opp Link\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The user wants to include the SF Opp Link column in the output.\\\",\\n    \\\"stepByStepThinking\\\": \\\"Since the query is straightforward and only asks to include the SF Opp Link column, we will use the column name directly in the tokens.\\\"\\n  },\\n  \\\"tokens\\\": \\\"[SF Opp Link]\\\",\\n  \\\"formulas\\\": []\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 94\n    prompt_tokens: 10906\n    total_tokens: 11000\n  }\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "973bf0a6cd5a6fdc", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "33cdff267621d11e"}], "startTime": 1735846031056000, "duration": 191, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "2d7a19149bbed886", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "33cdff267621d11e"}], "startTime": 1735846031056000, "duration": 58, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "da104c534f18618c", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "33cdff267621d11e"}], "startTime": 1735846031057000, "duration": 51, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "ac987016fc9c848a", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "218f903caa18b3b7"}], "startTime": 1735846031060000, "duration": 1980914, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "218f903caa18b3b7", "flags": 1, "operationName": "getResponseFromTimedRPCCall", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "f8c0e983e6eba8b1"}], "startTime": 1735846031060000, "duration": 1980989, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "dfe480937392cda6", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "ac987016fc9c848a"}], "startTime": 1735846031062000, "duration": 1978606, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.llmgateway.LLMCompletionsService/Complete"}, {"key": "peer.address", "type": "string", "value": "10.252.226.13:33976"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "f6bbcef0f84d07f4", "flags": 1, "operationName": "getModelsForTenantAndOrg", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "138fdf36041dbaf1"}], "startTime": 1735846031063000, "duration": 483, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "9c1b7ff56b87be39", "flags": 1, "operationName": "complete", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "dfe480937392cda6"}], "startTime": 1735846031063000, "duration": 1977441, "tags": [{"key": "component", "type": "string", "value": "eureka-llm-gateway"}, {"key": "pod.name", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc"}, {"key": "x.request.id", "type": "string", "value": "e9d52e8d-b4f8-41bc-b792-f98e2a4ec200"}, {"key": "self.ip", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc/10.252.224.191"}, {"key": "client.name", "type": "string", "value": "eureka-searcher"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846033040000, "fields": [{"key": "event.log", "type": "string", "value": "Completions response = completions {\n  id: \"chatcmpl-AlL8ZDiSLPQ4atF9OCDg6hRFf6KmB\"\n  created: 1735846031\n  choices {\n    text: \"{\\n  \\\"rephrasedQuery\\\": \\\"Include SF Opp Link\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The user wants to include the SF Opp Link column in the output.\\\",\\n    \\\"stepByStepThinking\\\": \\\"Since the query is straightforward and only asks to include the SF Opp Link column, we will use the column name directly in the tokens.\\\"\\n  },\\n  \\\"tokens\\\": \\\"[SF Opp Link]\\\",\\n  \\\"formulas\\\": []\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 94\n    prompt_tokens: 10906\n    total_tokens: 11000\n  }\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "21a65cc618915475", "flags": 1, "operationName": "getProtoResponseWithCustomModel", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "9c1b7ff56b87be39"}], "startTime": 1735846031063000, "duration": 1976952, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846031065000, "fields": [{"key": "event.log", "type": "string", "value": "Completions proto request: headers {\n  tenant_id: \"fa794c92-1470-11ee-8c81-cbe72\"\n  client_id: \"eureka-searcher\"\n  request_id: \"e9d52e8d-b4f8-41bc-b792-f98e2a4ec200\"\n  org_id: \"33363357\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"**Task:**\\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\\n\\nYou are given the following:\\n1. Definition & rules of the language.\\n2. References for which functions and keywords to use with examples.\\n3. Table Schema with column names, their data type, synonyms & sample values.\\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\\n5. Chat History, if any, containing all the previous interactions between user and assistant.\\n\\n**Definitions and Rules of the Phrase Token Language:**\\n\\n### **Key Definitions**\\n\\n1. **Column Types**\\n\\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\\n\\n2. **Output Columns**\\n\\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `\\' \\'`.\\n- **Examples**:\\n  - **Output Column**: [column]\\n  - **Filter Applied**: [column] = \\'value\\'\\n\\n3. **Filters**\\n\\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `\\' \\'`. The general format is `[column] operator \\'value\\'`.\\n- **Filter Logic**:\\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\\n    - **Example**: [column] = \\'value1\\' [column] = \\'value2\\'\\n    *(Matches records where `column` is \\'value1\\' **or** \\'value2\\')*\\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\\n    - **Example**: [column1] = \\'value1\\' [column2] = \\'value2\\'\\n    *(Matches records where `column1` is \\'value1\\' **and** `column2` is \\'value2\\')*\\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].\\'value\\'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\\n\\n4. **Formulas**\\n\\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\\n- **Usage**:\\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\\n- **Structure**:\\n  - **Formulas Field**:\\n    \\\"formulas\\\": [\\n      {\\n        \\\"name\\\": \\\"<formula_name>\\\",\\n        \\\"expression\\\": \\\"<formula_expression>\\\"\\n      },\\n      ...\\n    ]\\n  - **Tokens Field Example**:\\n    {\\n      \\\"tokens\\\": \\\"[Formula Name] by [Column Name]\\\",\\n      \\\"formulas\\\": [ ... ]\\n    }\\n- **Key Points**:\\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user\\'s query, for example, pick a relevant substring of the query.\\n  - **Expressions**:\\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\\n    - Refer to the examples provided later for formula syntax and better understanding.\\n  - **Dependencies**:\\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\", then you cannot apply \\\"sum ( unique users )\\\"\\\" because it is already aggregated i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n**5. Column and Value Selection**\\n\\n- **Column Selection**:\\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user\\'s query. Columns are sorted by relevance in the schema, with the most relevant first.\\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\\n\\n- **Value Selection**:\\n  - **Use Schema Values**:\\n    - When applying filters, prioritize sample values from the schema that match the user\\'s query.\\n  - **If Values Are Missing**:\\n    - If matching values are not found in the schema, you may:\\n    - Select the nearest appropriate value from the schema.\\n    - Generate a suitable value based on the query context.\\n    Choose the approach that best captures the user\\'s intent, without bias towards the schema.\\n  - **Ensure Relevance**:\\n    - Only include values that make sense within the context of the query.\\n    - Avoid illogical or irrelevant values.\\n\\n### **Table Schema**\\n\\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\\n\\nCREATE TABLE TSEMBED (\\nSF Opp Link text /*. Group: TSEMBED Dev Org - Opps.*/,\\nPartneraccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nLastactivitydate text /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nExpectedrevenue int /*. Group: TSEMBED Dev Org - Opps.*/,\\nStagename text /*. Group: TSEMBED Dev Org - Opps.*/,\\nDescription text /*. Group: TSEMBED Dev Org - Opps.*/,\\nForecastcategory text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nClosedate date /* Current year is 2025.. Group: TSEMBED Dev Org - Opps.*/,\\nCreateddate date /*. Group: TSEMBED Dev Org - Opps.*/,\\nId text /*. Group: TSEMBED Dev Org - Opps.*/,\\nOwnerid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nType text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAmount int /*. Group: TSEMBED Dev Org - Opps.*/,\\nIswon int /*. Group: TSEMBED Dev Org - Opps.*/,\\nName text /*. Group: TSEMBED Dev Org - Opps.*/,\\nIsclosed int /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nParentid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nNumberofemployees int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinggeocodeaccuracy text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAnnualrevenue int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccountnumber text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nActive C text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nTickersymbol text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Ownerid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nCreatedbyid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nWebsite text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nPhone text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Type text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Createddate date /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Name text /*. Group: TSEMBED Dev Org Export - Account.*/)\\n\\n### **Supported Keyword and Function References with Examples**\\n\\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\\n\\n**Relevant Keywords for Phrase Tokens**\\n\\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\\n\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [SF Opp Link] sort by [Expectedrevenue]\\\",\\\"bottom 25 [SF Opp Link] sort by count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Expectedrevenue] ascending\\\",\\\"sort by count [SF Opp Link] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[SF Opp Link] begins with \\'a0_value0\\'\\\",\\\"[SF Opp Link] ends with \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[SF Opp Link] contains \\'a0_value0\\'\\\",\\\"[SF Opp Link] contains \\'a0_value0\\' \\'a0_value1\\'\\\",\\\"[SF Opp Link] not contains \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Expectedrevenue] [SF Opp Link] = \\'a0_value0\\' vs [SF Opp Link] = \\'a0_value1\\'\\\",\\\"[Expectedrevenue] [Closedate] = \\'this year\\' vs [Closedate] = \\'last year\\'\\\",\\\"[Amount] [Partneraccountid] = \\'a1_value0\\' vs [Partneraccountid] = \\'a1_value1\\' vs [Partneraccountid] = \\'a1_value2\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [SF Opp Link]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[SF Opp Link] in ([SF Opp Link] [SF Opp Link] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\\\",\\\"[SF Opp Link] not in ([SF Opp Link] [SF Opp Link] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [SF Opp Link] sort by [Amount] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Expectedrevenue]\\\",\\\"average [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [SF Opp Link]\\\"]}\\n\\n\\n**Function References for Formulas**\\n\\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\\n\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Expectedrevenue > 10), SF Opp Link )\\\",\\\"count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Expectedrevenue, SF Opp Link, Partneraccountid)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Expectedrevenue, SF Opp Link)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Expectedrevenue ) , { SF Opp Link } , { } )\\\",\\\"group_aggregate ( stddev ( Expectedrevenue ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Expectedrevenue ), { SF Opp Link , Partneraccountid }, { day_of_week ( Closedate ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Amount ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( Partneraccountid ), query_groups ( ) + { SF Opp Link }, query_filters ( ) - { Partneraccountid } )\\\",\\\"group_aggregate ( unique count ( Partneraccountid ) , query_groups ( ) + { SF Opp Link }, query_filters ( ) + { Partneraccountid != \\'a1_value0\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Expectedrevenue)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Expectedrevenue, 2, 1, SF Opp Link)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Expectedrevenue, 2, 1, SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Expectedrevenue , 99 , \\'asc\\' )\\\",\\\"percentile ( Expectedrevenue , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( SF Opp Link )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Expectedrevenue > 10) , SF Opp Link )\\\",\\\"unique_count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"SF Opp Link in { \\'a0_value0\\' , \\'a0_value1\\' }\\\",\\\"SF Opp Link not in { \\'a0_value0\\' , \\'a0_value1\\' ,\\'a0_value2\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Closedate >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Closedate <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Closedate, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else if ( Amount > 100 and SF Opp Link = \\'a0_value0\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Closedate ) = 2024\\\",\\\"month ( Closedate ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\n**Date Keywords**\\n\\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\\n\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Closedate] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 7 days\\'\\\",\\\"[Closedate] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Closedate] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Closedate] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Closedate] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march\\'\\\",\\\"[Closedate] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Closedate] = \\'Saturday\\'\\\",\\\"[Closedate] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march 2024\\'\\\",\\\"[Closedate] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Closedate] = \\'this day\\'\\\",\\\"[Closedate] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 2 quarters for each year\\'\\\",\\\"[Closedate] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Closedate].yearly\\\",\\\"[Closedate].quarterly\\\",\\\"[Closedate].monthly\\\",\\\"[Closedate].weekly\\\",\\\"[Closedate].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Closedate] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].daily month over month\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly year over year\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Closedate].\\'day of month\\'\\\",\\\"[Closedate].\\'month of year\\'\\\",\\\"[Closedate].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Closedate] = \\'10 months ago\\'\\\",\\\"[Closedate] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Closedate] detailed\\\"]}\\n\\n\\n**Instructions:**\\n\\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\\n\\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\\n\\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today\\'s date in\\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\\n\\n### **Additional Rules for Generating Phrase Tokens**\\n\\n1. **Including Output Columns**\\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\\n    - Choose the output column based on the context of the query.\\n    - **Example**:\\n       - *Invalid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"}`\\n       - *Valid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column3]\\\"}`\\n2. **Expanding Month Abbreviations**\\n    - Expand month abbreviations (e.g., \\'Jan\\', \\'Feb\\') to full names when used as **date filters** in phrase tokens.\\n    - Do **not** expand them if used as filter values in **non-date columns**.\\n3. **Count and Unique Count Usage**\\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\\n    - Do **not** apply them to **measures** or numeric columns.\\n4. **Numeric Comparisons in Formulas**\\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\\n5. **Representing Date Filters in Formulas**\\n    - In **formula expressions**, represent date filters like `\\'last month\\'` using functions such as `diff_months` or `to_date` that calculate the date range.\\n6. **Avoid Redundant Formulas**\\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don\\'t need to create an additional formula for it.\\n    - **Example to Avoid**:\\n       - `{\\\"tokens\\\": \\\"[Measure]\\\", \\\"formulas\\\": [{\\\"name\\\": \\\"Total Measure\\\", \\\"expression\\\": \\\"sum(Measure)\\\"}]}`\\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\\n7. **Filtering on Null Values**\\n    - When filtering on **null values**, encapsulate `\\'null\\'` in single quotes and curly braces `{ }`, like `\\'{null}\\'`.\\n    - **Example**: `[column] != \\'{null}\\'`\\n8. **Growth of phrase cannot co-exist with versus phrase**\\n    - If there is a growth phrase like: \\'growth of sum [measure] by [date] [date].monthly\\', it cannot co-exist with \\'[attribute] = \\'value\\' vs [attribute] = \\'value\\'\\'. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = \\'value\\' [attribute] = \\'value\\' where \\'vs\\' keyword is removed.\\n9. **Avoid Counting and Grouping on the Same Column**\\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\\n10. **Avoid adding \\'by\\' keyword to date bucket**\\n    - When using date bucket in the final answer, do not add \\'by\\' keyword. Remove by keyword and just add date bucket alone.\\n11. **Query-on-Query Intent**:\\n     - **Definition**:\\n        - Occurs when the user\\'s query references previous results or includes subquery logic, similar to SQL subqueries.\\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\\342\\200\\224conditions on the **same column** that cannot be true simultaneously in a single row.\\n     - **Handling Subqueries**:\\n        - Represent such queries using the `in` or `not in` keywords.\\n     - **Syntax**:\\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\\n     - **Application**:\\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\\n        - To determine if a query has subquery intent, rephrase the user\\'s query to make it clear and unambiguous, accurately capturing their intent.\\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\\n\\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\\n\\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\\n\\n\\n**Single Query Examples**\\n\\n{\\\"query\\\":\\\"I want to see Expectedrevenue of SF Opp Links, for SF Opp Links that were Expectedrevenue yesterday, where those same SF Opp Links have not had any Expectedrevenue today\\\",\\\"desc\\\":\\\"In this query, we aim to display the \\'Expectedrevenue\\' of \\'SF Opp Link\\'s that had recorded \\'Expectedrevenue\\' **yesterday** but have **no \\'Expectedrevenue\\' today**. Essentially, we\\'re identifying \\'SF Opp Link\\'s where \\'Expectedrevenue\\' was greater than zero yesterday and zero today.\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [SF Opp Link] [Closedate] = \\'today\\' vs [Closedate] = \\'yesterday\\' [Expectedrevenue ( today )] = 0 [Expectedrevenue ( yesterday )] > 0\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue ( today )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_days ( Closedate , today() ) = 0 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue ( yesterday )\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , query_filters ( ) + { diff_days ( Closedate , today() ) = -1 } )\\\"}]}\\n{\\\"query\\\":\\\"I want to see Expectedrevenue of SF Opp Links this month, for SF Opp Links that had Expectedrevenue in the last 2 consecutive months\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [SF Opp Link] [Closedate] = \\'this month\\' [SF Opp Link] in ( [SF Opp Link] [Expectedrevenue] [Closedate] = \\'last month\\' ) [SF Opp Link] in ( [SF Opp Link] [Expectedrevenue] [Closedate] = \\'2 months ago\\' )\\\"}\\n{\\\"query\\\":\\\"show SF Opp Links with the highest Expectedrevenue this year\\\",\\\"tokens\\\":\\\"[SF Opp Link] sort by [Expectedrevenue] descending [Closedate] = \\'this year\\'\\\"}\\n{\\\"query\\\":\\\"which is the fastest growing SF Opp Link last year\\\",\\\"tokens\\\":\\\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue] [Closedate] = \\'last year\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"absolute change in Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\\\"}]}\\n{\\\"query\\\":\\\"which was my best performing SF Opp Link last quarter\\\",\\\"desc\\\":\\\"Use the \\'top 1\\' format when the query specifically asks for the single highest or \\'best\\' result in a given category or metric. This format directly retrieves the highest-ranking item based on the specified measure and is appropriate for queries that require a definitive top performer without the need for viewing other close contenders.\\\",\\\"tokens\\\":\\\"top 1 [SF Opp Link] sort by [Expectedrevenue] [Closedate] = \\'last quarter\\'\\\"}\\n{\\\"query\\\":\\\"which were my best performing SF Opp Links since last 4 weeks\\\",\\\"desc\\\":\\\"Apply the \\'sort by\\' method when the query involves ranking multiple items to display a list of top performers in descending order. This method is suitable for queries where understanding the relative performance of multiple attributes is important, and where the user might benefit from seeing more than just the single best result.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue] [Closedate] >= \\'last 4 weeks\\' sort by sum [Expectedrevenue] descending\\\"}\\n{\\\"query\\\":\\\"list SF Opp Links that have Expectedrevenue more than the average Expectedrevenue of all SF Opp Links\\\",\\\"desc\\\":\\\"In this query, we are listing all \\'SF Opp Link\\'s where the total \\'Expectedrevenue\\' for each \\'SF Opp Link\\' exceeds the average \\'Expectedrevenue\\' across all \\'SF Opp Link\\'s. The main query groups the data by \\'SF Opp Link\\' and does not apply any filters. The overall average \\'Expectedrevenue\\' is calculated using \\'group_aggregate(average(Expectedrevenue), { }, { })\\', which computes the average over the entire dataset without any groupings or filters. Since the main query is grouped by \\'SF Opp Link\\', the \\'sum(Expectedrevenue)\\' used in the expression \\'sum(Expectedrevenue) > average Expectedrevenue\\' automatically computes the sum for each \\'SF Opp Link\\'. The comparison effectively identifies those \\'SF Opp Link\\'s where their total \\'Expectedrevenue\\' is greater than the overall average\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue more than the average Expectedrevenue]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"average Expectedrevenue\\\",\\\"expression\\\":\\\"group_aggregate( average ( Expectedrevenue ), { } , { } )\\\"},{\\\"name\\\":\\\"Expectedrevenue more than the average Expectedrevenue\\\",\\\"expression\\\":\\\"sum ( Expectedrevenue ) > average Expectedrevenue\\\"}]}\\n{\\\"query\\\":\\\"month over month Expectedrevenue for all SF Opp Links this year\\\",\\\"desc\\\":\\\"When month over month is mentioned without growth intent, it is assumed that the user wants to see the measure for all attributes for each month of the year.\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [Closedate].monthly [SF Opp Link] [Closedate] = \\'this year\\'\\\"}\\n{\\\"query\\\":\\\"which SF Opp Link is growing fastest\\\",\\\"tokens\\\":\\\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"absolute change in Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\\\"}]}\\n{\\\"query\\\":\\\"which SF Opp Link is growing fastest yoy\\\",\\\"desc\\\":\\\"yoy stands for year-over-year, first find absolute change in Expectedrevenue using 12 to denote 12 months before, when date bucketing is monthly\\\",\\\"tokens\\\":\\\"[SF Opp Link] [absolute change in Expectedrevenue yoy] top 1 by [absolute change in Expectedrevenue yoy] [Closedate].monthly\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"prior year Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum (Expectedrevenue , 12, -12, Closedate )\\\"},{\\\"name\\\":\\\"current year Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum (Expectedrevenue , 0, 0, Closedate )\\\"},{\\\"name\\\":\\\"absolute change in Expectedrevenue yoy\\\",\\\"expression\\\":\\\"current year Expectedrevenue - prior year Expectedrevenue\\\"}]}\\n{\\\"query\\\":\\\"For every year, which SF Opp Link had largest Expectedrevenue.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\\\"}\\n{\\\"query\\\":\\\"show SF Opp Link with highest Expectedrevenue in every year.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [SF Opp Link] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\\\"}\\n{\\\"query\\\":\\\"display SF Opp Links for which Expectedrevenue increased this year\\\",\\\"desc\\\":\\\"To compute this first compute Expectedrevenue per SF Opp Link this year and last year. Then compute for which SF Opp Link it increased by doing a difference.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [date] = \\'this year\\' [Expectedrevenue increased this year] = \\'true\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue last year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue this year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue increased this year\\\",\\\"expression\\\":\\\"Expectedrevenue this year > Expectedrevenue last year\\\"}]}\\n{\\\"query\\\":\\\"which SF Opp Link is growing fastest in 2024\\\",\\\"desc\\\":\\\"moving_sum ( Expectedrevenue , 1 , 1 , Closedate ) implies sum of Expectedrevenue in the internal \\'Closedate - 1\\' and \\'Closedate + 1\\'. Since the query asks for fastest growing SF Opp Links, use the formula to compute absolute difference in moving_sum between today and yesterday. Then use sage keywords to find top SF Opp Link for the absolute difference.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [absolute change in Expectedrevenue] top 1 by [absolute change in Expectedrevenue] [Closedate] = \\'2024\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"absolute change in Expectedrevenue\\\",\\\"expression\\\":\\\"moving_sum ( Expectedrevenue , 0 , 0 , Closedate ) - moving_sum ( Expectedrevenue , 1 , -1 , Closedate )\\\"}]}\\n{\\\"query\\\":\\\"show SF Opp Links that have Expectedrevenue more than 95 percentile and show me their Expectedrevenue\\\",\\\"desc\\\":\\\"This template is designed to identify the attributes whose associated \\'measure\\' values exceed the 95th percentile of all \\'measure\\' values in the dataset. It includes a calculation of the 95th percentile value and then applies a filter to count only those attributes where their \\'measure\\' exceeds this percentile threshold. Comparison with percentile function can only be done with an aggregation like sum, average so on. So sum ( measure ) is used for comparison.\\\",\\\"tokens\\\":\\\"[SF Opp Link] [Expectedrevenue more than 95 percentile] = true [Expectedrevenue]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue more than 95 percentile\\\",\\\"expression\\\":\\\"rank_percentile ( sum ( Expectedrevenue ) , \\'desc\\' ) > 95\\\"}]}\"\n}\nchat_messages {\n  role: USER\n  content: \"### **User Query**\\n\\nUser Query: include SF url\\n\\n\\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\\342\\200\\224only their names should be included.\\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\\n\\n\\n### **Step-by-Step Guidance for Generating Phrase Tokens**\\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\\n\\n1. **Rephrase the User\\'s Query**\\n   - Rephrase the latest user\\'s query to make it clear and unambiguous, accurately capturing the user\\'s intent.\\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\\n   - The rephrased query should be easily translatable into SQL for data retrieval.\\n   - Use the rephrased query to generate the phrase tokens.\\n2. **Consult Provided Resources**\\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\\n3. **Generate Phrase Tokens Methodically**\\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\\n4. **Ensure Strict Compliance**\\n   - Follow all instructions exactly as given.\\n   - Do **not** invent or assume any information not provided.\\n   - Avoid adding any unlisted elements.\\n5. **Review for Accuracy**\\n   - Verify that the tokens fully represent the user\\'s query and adhere to all guidelines.\\n   - Check for any errors or omissions before finalizing.\\n\\n### **Response Format**\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"rephrasedQuery\\\": \\\"\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"\\\",\\n    \\\"stepByStepThinking\\\": \\\"\\\"\\n  },\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\": [\\n    {\\n      \\\"name\\\": \\\"\\\",\\n      \\\"expression\\\": \\\"\\\"\\n    }\\n  ]\\n}\"\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "138fdf36041dbaf1", "flags": 1, "operationName": "getLLMConfigMap", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "21a65cc618915475"}], "startTime": 1735846031063000, "duration": 527, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "9584ad6d4943aecd", "flags": 1, "operationName": "getLLMApiProperties", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "21a65cc618915475"}], "startTime": 1735846031064000, "duration": 558, "tags": [{"key": "is-custom-model", "type": "string", "value": "false"}, {"key": "api-version", "type": "string", "value": "2024-02-01"}, {"key": "endpoint", "type": "string", "value": "https://llm-staging-east-us-2.openai.azure.com/"}, {"key": "deployment-id", "type": "string", "value": "eureka-gpt-4o"}, {"key": "client-name", "type": "string", "value": "eureka-searcher"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "9c892444309e17d4", "flags": 1, "operationName": "getDefaultModel", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "9584ad6d4943aecd"}], "startTime": 1735846031064000, "duration": 269, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "218119823d7b807b", "flags": 1, "operationName": "get", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "37ce0f1f8787bb1d"}], "startTime": 1735846031065000, "duration": 862, "tags": [{"key": "cacheHit", "type": "string", "value": "false"}, {"key": "get.key", "type": "string", "value": "eureka-gpt-4o--1963508579"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=37ce0f1f8787bb1d; skipping clock skew adjustment"]}, {"traceID": "64eafe5c19327ba7", "spanID": "ac885265cfc8cc18", "flags": 1, "operationName": "chatCompletion", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "37ce0f1f8787bb1d"}], "startTime": 1735846031069000, "duration": 1969315, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=37ce0f1f8787bb1d; skipping clock skew adjustment"]}, {"traceID": "64eafe5c19327ba7", "spanID": "0c739c1f127a5ce5", "flags": 1, "operationName": "put", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "37ce0f1f8787bb1d"}], "startTime": 1735846033038000, "duration": 1225, "tags": [{"key": "put.key", "type": "string", "value": "eureka-gpt-4o--1963508579"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=37ce0f1f8787bb1d; skipping clock skew adjustment"]}, {"traceID": "64eafe5c19327ba7", "spanID": "57ce5f4ac6ccbe2e", "flags": 1, "operationName": "TMLPostProcessor.process", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "93406e99d9d1f3dd"}], "startTime": 1735846033042000, "duration": 1283, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846033043000, "fields": [{"key": "event.log", "type": "string", "value": "Post processed tokens: [SF Opp Link]"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "93406e99d9d1f3dd", "flags": 1, "operationName": "getResultFromTML", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "d074b58854c1a94b"}], "startTime": 1735846033042000, "duration": 1432, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846033042000, "fields": [{"key": "event.log", "type": "string", "value": "Using TML translation directly: tokens: \"[SF Opp Link]\"\nreasoning {\n  assumptions: \"The user wants to include the SF Opp Link column in the output.\"\n  step_by_step_thinking: \"Since the query is straightforward and only asks to include the SF Opp Link column, we will use the column name directly in the tokens.\"\n}\nrephrased_query: \"Include SF Opp Link\"\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "ffdafdb807a03258", "flags": 1, "operationName": "translateTokens", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "57ce5f4ac6ccbe2e"}], "startTime": 1735846033043000, "duration": 24, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "bd39d37c6f5530a7", "flags": 1, "operationName": "updateSearchHistoryRepository", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "042c4454f4af82cb"}], "startTime": 1735846033046000, "duration": 15674, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "1eccb72e26d41eec", "flags": 1, "operationName": "hasIndex", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "e806f66e1c7742aa"}], "startTime": 1735846033046000, "duration": 3818, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "e806f66e1c7742aa", "flags": 1, "operationName": "createIndex", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "bd39d37c6f5530a7"}], "startTime": 1735846033046000, "duration": 7883, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "042c4454f4af82cb", "flags": 1, "operationName": "updateSearchHistoryRepositoryAsync", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "ec7c87a4e3bb3f62"}], "startTime": 1735846033046000, "duration": 15780, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "e9d52e8d-b4f8-41bc-b792-f98e2a4ec200"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "1b27c63912f620bb", "flags": 1, "operationName": "populateConvAssistDebugInfo", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "2a602ffa79747639"}], "startTime": 1735846033046000, "duration": 72, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "885706cbb7ff0eb6", "flags": 1, "operationName": "updateDefaultIngestPipeline", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "e806f66e1c7742aa"}], "startTime": 1735846033050000, "duration": 3443, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "0fa4cd99287f9274", "flags": 1, "operationName": "_update_conversation_save", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "2ad9daf249fe89a4"}], "startTime": 1735846033050874, "duration": 3567, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "03f375dd76d26c89", "flags": 1, "operationName": "add_conv", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "0fa4cd99287f9274"}], "startTime": 1735846033052579, "duration": 1821, "tags": [{"key": "conv.id", "type": "string", "value": "a7b55229-c2bf-4ba6-93ef-cd1721926351"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "2cb00d42ef188626", "flags": 1, "operationName": "getExistingDocument", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "bd39d37c6f5530a7"}], "startTime": 1735846033054000, "duration": 2258, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "10c01fc352778414", "flags": 1, "operationName": "others.others.getExistingDocument.get", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "2cb00d42ef188626"}], "startTime": 1735846033054000, "duration": 1888, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "d325ecdb93b73635", "flags": 1, "operationName": "handleGraphQl.serialize", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "3de5cac31caa2d03"}], "startTime": 1735846033129000, "duration": 278, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "09d82e05f1461d97", "flags": 1, "operationName": "getFilteredResponse", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "64eafe5c19327ba7"}], "startTime": 1735846033163074, "duration": 256086, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "261c01f33aee37d5", "flags": 1, "operationName": "StringFilterHeuristic.apply", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "09d82e05f1461d97"}], "startTime": 1735846033163550, "duration": 74682, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "e0543fe4c7cbdf0d", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "261c01f33aee37d5"}], "startTime": 1735846033165039, "duration": 73082, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "864d1ef343900a23", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "e0543fe4c7cbdf0d"}], "startTime": 1735846033206000, "duration": 1428, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.metadata.MetadataService/applyValueHeuristic"}, {"key": "peer.address", "type": "string", "value": "10.252.226.251:46976"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "ca37852dcd65a516", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "864d1ef343900a23"}], "startTime": 1735846033206000, "duration": 855, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "x.request.id", "type": "string", "value": "66b0801e030b59f8a4926d365e1d9d3f"}, {"key": "user.id", "type": "string", "value": ""}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh/10.252.224.19"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "27a3980abaf4279e", "flags": 1, "operationName": "applyFilterHeuristics", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "af5ba9bedfa0cd57"}], "startTime": 1735846033207000, "duration": 192, "tags": [{"key": "query.updated", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846033207000, "fields": [{"key": "event.log", "type": "string", "value": "ValueHeuristicsResponse query: \"[SF Opp Link]\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "af5ba9bedfa0cd57", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "ca37852dcd65a516"}], "startTime": 1735846033207000, "duration": 650, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "x.request.id", "type": "string", "value": "e9d52e8d-b4f8-41bc-b792-f98e2a4ec200"}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh/10.252.224.19"}, {"key": "x.tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846033207000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic request: ([SF Opp Link],[])"}]}, {"timestamp": 1735846033207000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic response: query: \"[SF Opp Link]\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "64eafe5c19327ba7", "spanID": "43cc31a2371d20a3", "flags": 1, "operationName": "sanitizeTMLQuery", "references": [{"refType": "CHILD_OF", "traceID": "64eafe5c19327ba7", "spanID": "09d82e05f1461d97"}], "startTime": 1735846033358327, "duration": 21066, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846033358552, "fields": [{"key": "event.log", "type": "string", "value": "TML query Before Sanitization: [[SF Opp Link]]"}]}, {"timestamp": 1735846033379376, "fields": [{"key": "event.log", "type": "string", "value": "TML query After Sanitization: [[SF Opp Link]]"}]}], "processID": "p1", "warnings": null}], "processes": {"p1": {"serviceName": "eureka-agent", "tags": [{"key": "hostname", "type": "string", "value": "ip-10-254-128-10.ec2.internal"}, {"key": "ip", "type": "string", "value": "10.254.128.10"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p2": {"serviceName": "eureka-graphql", "tags": [{"key": "hostname", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "ip", "type": "string", "value": "10.252.225.72"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p3": {"serviceName": "convassist", "tags": [{"key": "hostname", "type": "string", "value": "convassist-5db97bf549-rwxlq"}, {"key": "ip", "type": "string", "value": "10.252.225.166"}, {"key": "jaeger.version", "type": "string", "value": "Python-4.8.0"}]}, "p4": {"serviceName": "eureka-searcher", "tags": [{"key": "hostname", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "ip", "type": "string", "value": "10.252.226.13"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p5": {"serviceName": "eureka-llm-gateway", "tags": [{"key": "hostname", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc"}, {"key": "ip", "type": "string", "value": "10.252.224.191"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p6": {"serviceName": "eureka-metadata-service", "tags": [{"key": "hostname", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "ip", "type": "string", "value": "10.252.224.19"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}}, "warnings": null}, {"traceID": "63f84a6bb2864730", "spans": [{"traceID": "63f84a6bb2864730", "spanID": "63f84a6bb2864730", "flags": 1, "operationName": "Agent.graphQLHandler", "references": [], "startTime": 1735846000014095, "duration": 4487323, "tags": [{"key": "component", "type": "string", "value": "eureka-agent"}, {"key": "x.request.id", "type": "string", "value": "aabeff3e-ee32-4e8f-848b-c8b6a8636a65"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "sampler.type", "type": "string", "value": "const"}, {"key": "sampler.param", "type": "bool", "value": true}, {"key": "org.id", "type": "string", "value": "33363357"}, {"key": "self.ip", "type": "string", "value": "ip-10-254-128-10.ec2.internal/10.254.128.10"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000016233, "fields": [{"key": "event.log", "type": "string", "value": "Explicitly adding org admin group 61a00200-8e6f-4517-9564-79a3d86a1456 for user 00000844-4d3c-81bc-877f-b1179c5153f5 in permissions as user is org admin"}]}], "processID": "p1", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "4970772f89241f44", "flags": 1, "operationName": "handleGraphQLReqEnrichment", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "63f84a6bb2864730"}], "startTime": 1735846000016328, "duration": 40802, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000016337, "fields": [{"key": "event.log", "type": "string", "value": "Enriching message class com.thoughtspot.convassist.SendMessageRequest"}]}, {"timestamp": 1735846000016729, "fields": [{"key": "event.log", "type": "string", "value": "Enriching SendMessageRequest"}]}, {"timestamp": 1735846000016756, "fields": [{"key": "event.log", "type": "string", "value": "SendMessageRequest: conv_id: \"18c492df-bddf-4779-a135-0b543b63c222\"\nmsg {\n  msg_id: \"4c3dbb85-6fa4-419c-ac2d-f2f2ed8968db\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show details\"\n      nls_data {\n        worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      }\n    }\n  }\n}\n"}]}, {"timestamp": 1735846000016887, "fields": [{"key": "event.log", "type": "string", "value": "Enriching USER_COMMAND message payload"}]}, {"timestamp": 1735846000057056, "fields": [{"key": "event.log", "type": "string", "value": "Returning SendMessageReq conv_id: \"18c492df-bddf-4779-a135-0b543b63c222\"\nmsg {\n  msg_id: \"4c3dbb85-6fa4-419c-ac2d-f2f2ed8968db\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show details\"\n      nls_data {\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: 1444047642\n        permission_guids: -1564398878\n        permission_guids: 1467743907\n        permission_guids: -1585248667\n        permission_guids: -1564398878\n        non_sharable: false\n        worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      }\n    }\n  }\n}\n"}]}], "processID": "p1", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "768297a912fa9f35", "flags": 1, "operationName": "getResponseBodyFromCloud", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "63f84a6bb2864730"}], "startTime": 1735846000057256, "duration": 4104836, "tags": [{"key": "proxy.eurekaCloudApiLatency", "type": "string", "value": "4104"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "0292ba0b0be1f5aa", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "768297a912fa9f35"}], "startTime": 1735846000057614, "duration": 4104301, "tags": [{"key": "component", "type": "string", "value": "apache-httpclient"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "4e187e41f4182376", "flags": 1, "operationName": "POST", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "0292ba0b0be1f5aa"}], "startTime": 1735846000057620, "duration": 4104191, "tags": [{"key": "http.status_code", "type": "int64", "value": 200}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "http.url", "type": "string", "value": "https://eureka.thoughtspotstaging.cloud/graphql"}, {"key": "peer.hostname", "type": "string", "value": "eureka.thoughtspotstaging.cloud"}, {"key": "peer.port", "type": "int64", "value": 443}, {"key": "http.method", "type": "string", "value": "POST"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "a112b11e8789d0d1", "flags": 1, "operationName": "handle", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "4e187e41f4182376"}], "startTime": 1735846000275000, "duration": 3855614, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "x.request.id", "type": "string", "value": "aabeff3e-ee32-4e8f-848b-c8b6a8636a65"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4/10.252.225.72"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "e48b46a0682bdd05", "flags": 1, "operationName": "handleGraphQl", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "a112b11e8789d0d1"}], "startTime": 1735846000276000, "duration": 3855562, "tags": [{"key": "component", "type": "string", "value": "eureka-graphql"}, {"key": "pod.name", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "x.request.id", "type": "string", "value": "aabeff3e-ee32-4e8f-848b-c8b6a8636a65"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "x.thought.spot.orgs", "type": "string", "value": "33363357"}, {"key": "self.ip", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4/10.252.225.72"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "8168003075c59e5e", "flags": 1, "operationName": "convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "e48b46a0682bdd05"}], "startTime": 1735846000278000, "duration": 3851635, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "423272136b5b6092", "flags": 1, "operationName": "/convassist.ConvAssistGrpcService/SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "4e187e41f4182376"}], "startTime": 1735846000292208, "duration": 3837832, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "peer.ipv4", "type": "string", "value": "10.252.225.72"}, {"key": "peer.port", "type": "string", "value": "33414"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846000292261, "fields": [{"key": "request", "type": "string", "value": "conv_id: \"18c492df-bddf-4779-a135-0b543b63c222\"\nmsg {\n  msg_id: \"4c3dbb85-6fa4-419c-ac2d-f2f2ed8968db\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show details\"\n      nls_data {\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: 1444047642\n        permission_guids: -1564398878\n        permission_guids: 1467743907\n        permission_guids: -1585248667\n        permission_guids: -1564398878\n        non_sharable: false\n        worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      }\n    }\n  }\n}\n"}]}, {"timestamp": 1735846004129954, "fields": [{"key": "response", "type": "string", "value": "responses {\n  msg_id: \"2bf78258-93fd-4f24-af16-911253e033b0\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          tokens: \"Id Partneraccountid Shippingstate Billinglongitude Billingstate Expectedrevenue Ownerid Stagename Type Amount Description Forecastcategory Accountid Iswon Closedate Name Createddate Lastactivitydate Isclosed Shippingstreet Shippinglatitude Parentid Numberofemployees Shippingcountry Billinggeocodeaccuracy SF Opp Link Billingstreet Annualrevenue Billingcountry Billinglatitude Accountnumber Shippingcity Active C Tickersymbol Account Ownerid Createdbyid Shippingpostalcode Billingcity Shippinglongitude Website Phone Billingpostalcode Account Type Account Createddate Account Name\"\n          title: \"\"\n          tml_tokens: \"[Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] ["}]}], "processID": "p3", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "10ae938aa4cbdb5f", "flags": 1, "operationName": "SendMessage", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "423272136b5b6092"}], "startTime": 1735846000292318, "duration": 3837549, "tags": [{"key": "x.request.id", "type": "string", "value": "aabeff3e-ee32-4e8f-848b-c8b6a8636a65"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "org.id", "type": "string", "value": "33363357"}, {"key": "locale", "type": "string", "value": "en-us"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846000294569, "fields": [{"key": "event", "type": "string", "value": "User Query"}, {"key": "value", "type": "string", "value": "User Query: show details"}]}], "processID": "p3", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "fc8eb76fa1cf00d5", "flags": 1, "operationName": "get_conv", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "10ae938aa4cbdb5f"}], "startTime": 1735846000292895, "duration": 1053, "tags": [{"key": "conv.id", "type": "string", "value": "18c492df-bddf-4779-a135-0b543b63c222"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "0be400ecca4e86da", "flags": 1, "operationName": "find_tool", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "10ae938aa4cbdb5f"}], "startTime": 1735846000294655, "duration": 272, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846000294902, "fields": [{"key": "event", "type": "string", "value": "Find Tool is not enabled. Returning NLSTool."}]}], "processID": "p3", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "a67229695a7b9ce3", "flags": 1, "operationName": "_get_tool_response", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "10ae938aa4cbdb5f"}], "startTime": 1735846000294999, "duration": 3757268, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "5e29381d966bd3aa", "flags": 1, "operationName": "get_response_from_nls", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "a67229695a7b9ce3"}], "startTime": 1735846000295429, "duration": 3756812, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "875cf70eecf7ad51", "flags": 1, "operationName": "get_response_latest", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "5e29381d966bd3aa"}], "startTime": 1735846000296649, "duration": 3755513, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "b570ea77aa8c5c45", "flags": 1, "operationName": "/eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "875cf70eecf7ad51"}], "startTime": 1735846000297088, "duration": 3753592, "tags": [{"key": "component", "type": "string", "value": "grpc"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846000297135, "fields": [{"key": "request", "type": "string", "value": "msg_payload {\n  msg_id: \"4c3dbb85-6fa4-419c-ac2d-f2f2ed8968db\"\n  type: USER_COMMAND\n  data {\n    user_cmd_data {\n      cmd_text: \"show details\"\n      nls_data {\n        permission_type: D13Y_PERMISSIONS_EXPLICIT\n        permission_guids: 1444047642\n        permission_guids: -1564398878\n        permission_guids: 1467743907\n        permission_guids: -1585248667\n        permission_guids: -1564398878\n        non_sharable: false\n        worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      }\n    }\n  }\n}\nconv {\n  conv_id: \"18c492df-bddf-4779-a135-0b543b63c222\"\n  user_info {\n    user_id: \"00000844-4d3c-81bc-877f-b1179c5153f5\"\n    tenant_id: \"fa794c92-1470-11ee-8c81-cbe72\"\n    tenant_url: \"https://embed-1-do-not-delete.thoughtspotstaging.cloud/prism\"\n  }\n  initial_ctx {\n    type: TS_WORKSHEET\n    ts_worksheet_ctx {\n      worksheet {\n        worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n        worksheet_name: \"TSEMBED\"\n        column_details {\n          guid: \"5f26ac42-582b-4f09-84ad-c42ea7f2b791\"\n       "}]}, {"timestamp": 1735846004050578, "fields": [{"key": "response", "type": "string", "value": "tool: TS_NLS\nmessages {\n  msg_id: \"2bf78258-93fd-4f24-af16-911253e033b0\"\n  type: ASST_RESPONSE\n  data {\n    asst_resp_data {\n      tool: TS_NLS\n      nls_ans_data {\n        sage_query_suggestions {\n          worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n          tokens: \"Id Partneraccountid Shippingstate Billinglongitude Billingstate Expectedrevenue Ownerid Stagename Type Amount Description Forecastcategory Accountid Iswon Closedate Name Createddate Lastactivitydate Isclosed Shippingstreet Shippinglatitude Parentid Numberofemployees Shippingcountry Billinggeocodeaccuracy SF Opp Link Billingstreet Annualrevenue Billingcountry Billinglatitude Accountnumber Shippingcity Active C Tickersymbol Account Ownerid Createdbyid Shippingpostalcode Billingcity Shippinglongitude Website Phone Billingpostalcode Account Type Account Createddate Account Name\"\n          title: \"\"\n          tml_tokens: \"[Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type"}]}], "processID": "p3", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "f496d38377028330", "flags": 1, "operationName": "eureka.EurekaGrpcService/ConvAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "b570ea77aa8c5c45"}], "startTime": 1735846000304000, "duration": 3745957, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.EurekaGrpcService/ConvAssistNLSearch"}, {"key": "peer.address", "type": "string", "value": "10.252.225.166:55166"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "e6066def780a4c64", "flags": 1, "operationName": "NLInstructionsHandler.createIndex", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "89f32e0b6fee8354"}], "startTime": 1735846000305000, "duration": 8104, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "79e0496fbf22a6de", "flags": 1, "operationName": "createIndex", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "e6066def780a4c64"}], "startTime": 1735846000305000, "duration": 7868, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "89f32e0b6fee8354", "flags": 1, "operationName": "convAssistNLSearch", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "f496d38377028330"}], "startTime": 1735846000305000, "duration": 3745319, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "aabeff3e-ee32-4e8f-848b-c8b6a8636a65"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "fa8358985a20c0a9", "flags": 1, "operationName": "hasIndex", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "79e0496fbf22a6de"}], "startTime": 1735846000306000, "duration": 3601, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "580de7e4aa708a07", "flags": 1, "operationName": "updateDefaultIngestPipeline", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "79e0496fbf22a6de"}], "startTime": 1735846000309000, "duration": 3366, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "44c45fec96bf8358", "flags": 1, "operationName": "getConvAssistResult", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "89f32e0b6fee8354"}], "startTime": 1735846000314000, "duration": 3734622, "tags": [{"key": "user.command", "type": "string", "value": "show details"}, {"key": "_debugInfo.eureka.ConvAssistDebugInfo", "type": "string", "value": "{\n  \"tenantId\": \"fa794c92-1470-11ee-8c81-cbe72\",\n  \"userId\": \"00000844-4d3c-81bc-877f-b1179c5153f5\",\n  \"userName\": \"\",\n  \"convId\": \"18c492df-bddf-4779-a135-0b543b63c222\",\n  \"userMsgId\": \"4c3dbb85-6fa4-419c-ac2d-f2f2ed8968db\",\n  \"datasourceId\": \"5f92ed57-6310-43c7-9184-7acb9e57829c\",\n  \"userQuery\": \"show details\",\n  \"generatedTmlTokens\": \"[Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] [Description] [Forecastcategory] [Accountid] [Iswon] [Closedate] [Name] [Createddate] [Lastactivitydate] [Isclosed] [Shippingstreet] [Shippinglatitude] [Parentid] [Numberofemployees] [Shippingcountry] [Billinggeocodeaccuracy] [SF Opp Link] [Billingstreet] [Annualrevenue] [Billingcountry] [Billinglatitude] [Accountnumber] [Shippingcity] [Active C] [Tickersymbol] [Account Ownerid] [Createdbyid] [Shippingpostalcode] [Billingcity] [Shippinglongitude] [Website] [Phone] [Billingpostalcode] [Account Type] [Account Createddate] [Account Name]\",\n  \"generatedSql\": \"\",\n  \"userFeedback\": \"NEUTRAL\",\n  \"timestamp\": \"1735846004048\",\n  \"orgId\": \"33363357\",\n  \"requestId\": \"aabeff3e-ee32-4e8f-848b-c8b6a8636a65\",\n  \"userMessageCount\": \"1\",\n  \"datasourceName\": \"TSEMBED\",\n  \"asstMsgId\": \"2bf78258-93fd-4f24-af16-911253e033b0\"\n}"}, {"key": "query.id", "type": "string", "value": ""}, {"key": "query", "type": "string", "value": "show details"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "53313b8785052442", "flags": 1, "operationName": "getNLSResults", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "44c45fec96bf8358"}], "startTime": 1735846000316000, "duration": 3731515, "tags": [{"key": "empty_nl_query", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000316000, "fields": [{"key": "event.log", "type": "string", "value": "Number of worksheet columns = 45"}]}, {"timestamp": 1735846000317000, "fields": [{"key": "event.log", "type": "string", "value": "clientRequest = ctx {\n  init_ctx {\n    worksheet {\n      worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\n      worksheet_name: \"TSEMBED\"\n      column_details {\n        column_name: \"Account Name\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"5f26ac42-582b-4f09-84ad-c42ea7f2b791\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"dca81639-647e-4fb4-b6af-27d1c0d7aa8b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Account Createddate\"\n        data_type: DATE\n        col_type: ATTRIBUTE\n        guid: \"d70acc35-030b-4a0f-942a-aa9d01b8d5d5\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"9b9ae546-a6e0-42f6-906f-2363505a3904\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Account Type\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"21524f1c-e44a-4364-b65a-54926e5277ce\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"f5548ed5-12f3-4a9c-966d-fd8bb42f39d2\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingpostalcode\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"a1b21320-adea-4390-b24a-7462d38bf456\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"9cdab7d4-d71c-4dbb-b5ad-2b709edba8f8\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Phone\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"d33978b7-487e-4311-9637-ae3affd65976\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"0933b5bf-888c-4052-bca6-a74dd12a658c\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Website\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"0686530e-7218-4e00-99a8-19a8bf4a06f0\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"295c2f8e-2c40-470f-b1ee-1eb557199beb\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippinglongitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"fbaf4150-929a-4e76-9bc5-0ee90bc2d1cf\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"8f5737f7-45a4-41b3-850b-d13dc7719b09\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingcity\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"b9449654-bc94-4860-9d42-50d38f6fdf2f\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"f80485b7-adba-4f40-8fca-1910400ef7f9\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingpostalcode\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"0e05497f-054e-4c84-948d-89646c67042c\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"bbe29e1b-e29f-4561-8b3a-33c570d1209b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Createdbyid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"af765d93-1060-4e92-af86-9c47e7283810\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"6371710b-1718-487d-9993-5e2d050e57da\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Account Ownerid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"9c10e880-abef-4a3e-9347-a466ad5a24b2\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"9da19e76-209d-4c7b-9146-4765fead576a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Tickersymbol\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"77a233c6-0f5f-46a5-80c5-58c938c7fe26\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"34e55fa7-7f48-4b8d-b5e6-4a12941f1572\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Active C\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"49e834db-6126-4a68-aa38-1d90f1645384\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"012ecb09-66cd-47b1-b303-47709250e1e6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingcity\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"604446b1-bf48-4b78-82d8-855dac21c8d2\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"23e371d8-81e7-4c33-9ff8-e7cb7af09da4\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Accountnumber\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"848ca949-7d12-43e0-baf3-0f4dd01ad661\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"38370d07-1f32-4ebe-9bc4-58b7c14bb94a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billinglatitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"af6f7ebd-bb91-49ba-8a0c-434e8b795333\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"8b64bbb7-bf38-44f1-b118-2d11abec1ff0\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingcountry\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"69c14d6a-dab1-4950-ab06-0cf7232933a2\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"b629caf4-ef7f-4e7c-a812-f6e1716de164\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Annualrevenue\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"7e1f49f3-344a-47a9-9dd6-0a980b44d417\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"d4d3545a-3279-445e-95a8-51d6ff9cc0a0\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingstreet\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"65274e01-ab4a-47fc-8e0d-70ff5592a4d4\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"95166ea0-9ba4-4d8b-870e-7e81fa433b95\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"SF Opp Link\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"faff01d3-0476-405a-8256-af207e8b8819\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billinggeocodeaccuracy\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"38dbf124-f601-4e28-af4f-6e2efddf7595\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"1078265f-9f15-4012-b3b3-95d4aabeac6b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingcountry\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"18d7f1bd-7102-4f7e-a14c-82c61f07e203\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"514d9496-696f-43b0-bb3d-d6562dacdd4a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Numberofemployees\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"9ed653d5-74e4-4aba-931e-2d534f25434b\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"817aac67-5011-47ce-a062-99c4e6c94de2\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Parentid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"04c411f4-c986-4878-b422-f898ff785638\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"6e5aba8b-ac28-496a-80b8-1e556f72fa1d\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippinglatitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"1a2d309d-7fdd-446c-be3d-f2af32aed8a1\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"21c3d171-f7da-457f-858b-d6705be1b110\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingstreet\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"12592b79-fe4c-429d-b838-847b0a04033f\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"1b2c53f4-3b2e-4789-bca8-ef1f8b39756a\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Isclosed\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"39012fb3-5df9-44e3-a0d7-739c981cde07\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"308dfb84-6244-4935-8927-282a4d1a29f6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Lastactivitydate\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"5f3a5253-1c15-4020-ba05-394da062a4b3\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"2a56b0bd-979c-4616-8029-813aba444f5b\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Createddate\"\n        data_type: DATE\n        col_type: ATTRIBUTE\n        guid: \"ccca8f82-83a5-4e06-a409-a946ce1b98ca\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"ecfd2be5-78cd-4225-93e5-aa135694d870\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Name\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"c2a5962a-fe88-433d-8dc9-901339901013\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"47fb3214-efe9-4317-84a3-59613faedf88\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Closedate\"\n        data_type: DATE\n        col_type: ATTRIBUTE\n        guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"0ba211b9-b93e-4a31-b655-601acba160e4\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Iswon\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"cddc0149-87c3-48a7-ad34-fbd08d276667\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"b3968ab5-9558-4fc3-a9d2-fbc2b6239785\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Accountid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"061439eb-cd65-4808-a0ab-14ff9b497e88\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"b260869d-8deb-45d5-baca-aab5f99f4b5f\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Forecastcategory\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"f0a25a61-db9f-491a-bcb9-81a101203036\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"3494a4a2-0cab-44bf-8160-16300b4e283f\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Description\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"66414b98-29a7-4479-9776-7473b20420ea\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"4ef19d18-00b4-444b-a9e2-45874dbcb60d\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Amount\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"c8449fee-340f-4dfa-b790-6826089a9fd1\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a1eb1b38-f42c-4774-8795-5a3a0bbb3241\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Type\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"344c0273-d437-40b9-88a9-6694b8090e43\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a62adebf-e2a5-4020-9c1d-2174f25c32a2\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Stagename\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"4fe13431-9237-4652-ad06-78c682876d60\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"fa1a77af-689d-4a59-b249-e907a3448872\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Ownerid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"20d909cd-2a2d-477a-8cab-dce37149978a\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"5bec33ac-97d5-4ab7-973e-ba5cb77cb5c6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Expectedrevenue\"\n        data_type: INT64\n        col_type: MEASURE\n        guid: \"7be227c3-88bb-48d0-a457-472b00735ba6\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"45e1c432-7cd2-478e-ac74-5fe85b7e5377\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billingstate\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"d0d34b90-2ca9-4be6-aa1e-972ad5dd0d02\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"7b0eb1a6-0358-434e-b30e-bcfdaf86e1b4\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Billinglongitude\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"4080f840-4f73-483a-9f37-88787629eff0\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"144b0a65-cb7a-4b35-9e4a-bed872e98ae6\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Shippingstate\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"56fa83a3-4a05-4733-8e61-512c1ae5d2b7\"\n        table_name: \"TSEMBED Dev Org Export - Account\"\n        base_column_id: \"b9c39977-9291-476d-8747-6e8c9605f7b9\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Partneraccountid\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"755ea752-bc47-4192-919f-db0e8cdc291e\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"64a6e816-e516-4fbd-be17-dae394d2760f\"\n        is_group_aggregate: false\n      }\n      column_details {\n        column_name: \"Id\"\n        data_type: VARCHAR\n        col_type: ATTRIBUTE\n        guid: \"da430c99-1045-4b93-a088-93a70a017218\"\n        table_name: \"TSEMBED Dev Org - Opps\"\n        base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n        is_group_aggregate: false\n      }\n    }\n  }\n}\nquery: \"show details\"\nnl_handler_version: LATEST\n"}]}, {"timestamp": 1735846000317000, "fields": [{"key": "event.log", "type": "string", "value": "nlHandlerVersion = LATEST"}]}, {"timestamp": 1735846000317000, "fields": [{"key": "event.log", "type": "string", "value": "worksheetFacetPayload = worksheet_id: \"5f92ed57-6310-43c7-9184-7acb9e57829c\"\nworksheet_name: \"TSEMBED\"\ncolumn_details {\n  column_name: \"Account Name\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"5f26ac42-582b-4f09-84ad-c42ea7f2b791\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"dca81639-647e-4fb4-b6af-27d1c0d7aa8b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Account Createddate\"\n  data_type: DATE\n  col_type: ATTRIBUTE\n  guid: \"d70acc35-030b-4a0f-942a-aa9d01b8d5d5\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"9b9ae546-a6e0-42f6-906f-2363505a3904\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Account Type\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"21524f1c-e44a-4364-b65a-54926e5277ce\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"f5548ed5-12f3-4a9c-966d-fd8bb42f39d2\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingpostalcode\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"a1b21320-adea-4390-b24a-7462d38bf456\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"9cdab7d4-d71c-4dbb-b5ad-2b709edba8f8\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Phone\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"d33978b7-487e-4311-9637-ae3affd65976\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"0933b5bf-888c-4052-bca6-a74dd12a658c\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Website\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"0686530e-7218-4e00-99a8-19a8bf4a06f0\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"295c2f8e-2c40-470f-b1ee-1eb557199beb\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippinglongitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"fbaf4150-929a-4e76-9bc5-0ee90bc2d1cf\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"8f5737f7-45a4-41b3-850b-d13dc7719b09\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingcity\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"b9449654-bc94-4860-9d42-50d38f6fdf2f\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"f80485b7-adba-4f40-8fca-1910400ef7f9\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingpostalcode\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"0e05497f-054e-4c84-948d-89646c67042c\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"bbe29e1b-e29f-4561-8b3a-33c570d1209b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Createdbyid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"af765d93-1060-4e92-af86-9c47e7283810\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"6371710b-1718-487d-9993-5e2d050e57da\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Account Ownerid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"9c10e880-abef-4a3e-9347-a466ad5a24b2\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"9da19e76-209d-4c7b-9146-4765fead576a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Tickersymbol\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"77a233c6-0f5f-46a5-80c5-58c938c7fe26\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"34e55fa7-7f48-4b8d-b5e6-4a12941f1572\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Active C\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"49e834db-6126-4a68-aa38-1d90f1645384\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"012ecb09-66cd-47b1-b303-47709250e1e6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingcity\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"604446b1-bf48-4b78-82d8-855dac21c8d2\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"23e371d8-81e7-4c33-9ff8-e7cb7af09da4\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Accountnumber\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"848ca949-7d12-43e0-baf3-0f4dd01ad661\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"38370d07-1f32-4ebe-9bc4-58b7c14bb94a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billinglatitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"af6f7ebd-bb91-49ba-8a0c-434e8b795333\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"8b64bbb7-bf38-44f1-b118-2d11abec1ff0\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingcountry\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"69c14d6a-dab1-4950-ab06-0cf7232933a2\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"b629caf4-ef7f-4e7c-a812-f6e1716de164\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Annualrevenue\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"7e1f49f3-344a-47a9-9dd6-0a980b44d417\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"d4d3545a-3279-445e-95a8-51d6ff9cc0a0\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingstreet\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"65274e01-ab4a-47fc-8e0d-70ff5592a4d4\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"95166ea0-9ba4-4d8b-870e-7e81fa433b95\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"SF Opp Link\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"faff01d3-0476-405a-8256-af207e8b8819\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billinggeocodeaccuracy\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"38dbf124-f601-4e28-af4f-6e2efddf7595\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"1078265f-9f15-4012-b3b3-95d4aabeac6b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingcountry\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"18d7f1bd-7102-4f7e-a14c-82c61f07e203\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"514d9496-696f-43b0-bb3d-d6562dacdd4a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Numberofemployees\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"9ed653d5-74e4-4aba-931e-2d534f25434b\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"817aac67-5011-47ce-a062-99c4e6c94de2\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Parentid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"04c411f4-c986-4878-b422-f898ff785638\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"6e5aba8b-ac28-496a-80b8-1e556f72fa1d\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippinglatitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"1a2d309d-7fdd-446c-be3d-f2af32aed8a1\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"21c3d171-f7da-457f-858b-d6705be1b110\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingstreet\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"12592b79-fe4c-429d-b838-847b0a04033f\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"1b2c53f4-3b2e-4789-bca8-ef1f8b39756a\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Isclosed\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"39012fb3-5df9-44e3-a0d7-739c981cde07\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"308dfb84-6244-4935-8927-282a4d1a29f6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Lastactivitydate\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"5f3a5253-1c15-4020-ba05-394da062a4b3\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"2a56b0bd-979c-4616-8029-813aba444f5b\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Createddate\"\n  data_type: DATE\n  col_type: ATTRIBUTE\n  guid: \"ccca8f82-83a5-4e06-a409-a946ce1b98ca\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"ecfd2be5-78cd-4225-93e5-aa135694d870\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Name\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"c2a5962a-fe88-433d-8dc9-901339901013\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"47fb3214-efe9-4317-84a3-59613faedf88\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Closedate\"\n  data_type: DATE\n  col_type: ATTRIBUTE\n  guid: \"3fb5dfa5-7eb9-4ddf-8ac0-450db097e093\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"0ba211b9-b93e-4a31-b655-601acba160e4\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Iswon\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"cddc0149-87c3-48a7-ad34-fbd08d276667\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"b3968ab5-9558-4fc3-a9d2-fbc2b6239785\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Accountid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"061439eb-cd65-4808-a0ab-14ff9b497e88\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"b260869d-8deb-45d5-baca-aab5f99f4b5f\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Forecastcategory\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"f0a25a61-db9f-491a-bcb9-81a101203036\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"3494a4a2-0cab-44bf-8160-16300b4e283f\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Description\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"66414b98-29a7-4479-9776-7473b20420ea\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"4ef19d18-00b4-444b-a9e2-45874dbcb60d\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Amount\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"c8449fee-340f-4dfa-b790-6826089a9fd1\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a1eb1b38-f42c-4774-8795-5a3a0bbb3241\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Type\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"344c0273-d437-40b9-88a9-6694b8090e43\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a62adebf-e2a5-4020-9c1d-2174f25c32a2\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Stagename\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"4fe13431-9237-4652-ad06-78c682876d60\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"fa1a77af-689d-4a59-b249-e907a3448872\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Ownerid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"20d909cd-2a2d-477a-8cab-dce37149978a\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"5bec33ac-97d5-4ab7-973e-ba5cb77cb5c6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Expectedrevenue\"\n  data_type: INT64\n  col_type: MEASURE\n  guid: \"7be227c3-88bb-48d0-a457-472b00735ba6\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"45e1c432-7cd2-478e-ac74-5fe85b7e5377\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billingstate\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"d0d34b90-2ca9-4be6-aa1e-972ad5dd0d02\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"7b0eb1a6-0358-434e-b30e-bcfdaf86e1b4\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Billinglongitude\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"4080f840-4f73-483a-9f37-88787629eff0\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"144b0a65-cb7a-4b35-9e4a-bed872e98ae6\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Shippingstate\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"56fa83a3-4a05-4733-8e61-512c1ae5d2b7\"\n  table_name: \"TSEMBED Dev Org Export - Account\"\n  base_column_id: \"b9c39977-9291-476d-8747-6e8c9605f7b9\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Partneraccountid\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"755ea752-bc47-4192-919f-db0e8cdc291e\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"64a6e816-e516-4fbd-be17-dae394d2760f\"\n  is_group_aggregate: false\n}\ncolumn_details {\n  column_name: \"Id\"\n  data_type: VARCHAR\n  col_type: ATTRIBUTE\n  guid: \"da430c99-1045-4b93-a088-93a70a017218\"\n  table_name: \"TSEMBED Dev Org - Opps\"\n  base_column_id: \"a1c7819d-78aa-4818-a4b6-63dbc08cefaa\"\n  is_group_aggregate: false\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "ab44467670247a60", "flags": 1, "operationName": "lambda$getAnswerSuggestionFuture$33", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "89f32e0b6fee8354"}], "startTime": 1735846000318000, "duration": 3729517, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846004047000, "fields": [{"key": "event.log", "type": "string", "value": "Sage TML token list = [[Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] [Description] [Forecastcategory] [Accountid] [Iswon] [Closedate] [Name] [Createddate] [Lastactivitydate] [Isclosed] [Shippingstreet] [Shippinglatitude] [Parentid] [Numberofemployees] [Shippingcountry] [Billinggeocodeaccuracy] [SF Opp Link] [Billingstreet] [Annualrevenue] [Billingcountry] [Billinglatitude] [Accountnumber] [Shippingcity] [Active C] [Tickersymbol] [Account Ownerid] [Createdbyid] [Shippingpostalcode] [Billingcity] [Shippinglongitude] [Website] [Phone] [Billingpostalcode] [Account Type] [Account Createddate] [Account Name]]"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "2326003f6d2aa36d", "flags": 1, "operationName": "getSageQueryGenResults", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ab44467670247a60"}], "startTime": 1735846000319000, "duration": 3728634, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000319000, "fields": [{"key": "event.log", "type": "string", "value": "Couldnt find cache value for key: fa794c92-1470-11ee-8c81-cbe72_5f92ed57-6310-43c7-9184-7acb9e57829c"}]}, {"timestamp": 1735846000320000, "fields": [{"key": "event.log", "type": "string", "value": "Populated properties in WorksheetFacetPayload"}]}, {"timestamp": 1735846000324000, "fields": [{"key": "event.log", "type": "string", "value": "Sage query gen cache hit = false"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "e82789ec8a98d095", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ca460be52fa89363"}], "startTime": 1735846000320000, "duration": 73, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "4aeb9dc6565790ae", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ca460be52fa89363"}], "startTime": 1735846000320000, "duration": 3918, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "e33e1511686f31e0", "flags": 1, "operationName": "getCachedSageQueryGenResultFromElastic", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "2326003f6d2aa36d"}], "startTime": 1735846000320000, "duration": 4607, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "ca460be52fa89363", "flags": 1, "operationName": "fetch", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "e33e1511686f31e0"}], "startTime": 1735846000320000, "duration": 4554, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000320000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=00000844-4d3c-81bc-877f-b1179c5153f5 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"5f92ed57-6310-43c7-9184-7acb9e57829c\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"fa794c92-1470-11ee-8c81-cbe72\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"match_phrase\":{\"NL_QUERY\":{\"query\":\"show details\"}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 1\"}}},{\"term\":{\"ORG_ID\":{\"value\":\"33363357\"}}},{\"bool\":{\"minimum_should_match\":\"1\",\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"00000844-4d3c-81bc-877f-b1179c5153f5\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}}]}},\"size\":10}"}]}, {"timestamp": 1735846000324000, "fields": [{"key": "event.log", "type": "string", "value": "search-response : SearchResponse: {\"took\":1,\"timed_out\":false,\"_shards\":{\"failed\":0.0,\"successful\":1.0,\"total\":1.0,\"skipped\":0.0},\"hits\":{\"total\":{\"relation\":\"eq\",\"value\":0},\"hits\":[],\"max_score\":null}}"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "f4b4fcbbfaa36745", "flags": 1, "operationName": "getEntriesForNLQuery", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "7156caae5145cdbc"}], "startTime": 1735846000324000, "duration": 4333, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "aabeff3e-ee32-4e8f-848b-c8b6a8636a65"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "7156caae5145cdbc", "flags": 1, "operationName": "getSageQueryResultsFromQB", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "2326003f6d2aa36d"}], "startTime": 1735846000324000, "duration": 4396, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000329000, "fields": [{"key": "event.log", "type": "string", "value": "Found 0 entries from question bank for query show details"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "02529a0fbe9a9587", "flags": 1, "operationName": "getSchemaFromQH", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ab44467670247a60"}], "startTime": 1735846000329000, "duration": 811, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "358e514cc3324fb1", "flags": 1, "operationName": "generateSageQueries", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "2326003f6d2aa36d"}], "startTime": 1735846000329000, "duration": 3717781, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000329000, "fields": [{"key": "event.log", "type": "string", "value": "NLPConfig: NLPConfig(dateTokenExtractionHeuristics=false, dateSQLFunctionHeuristics=true, dateSQLFunctionDefinitionV2=false, nl2TMLPromptGeneration=false, comparisonHeuristic=true, dateAggregationHeuristic=true, nlHandlerVersion=STABLE, removeOverlappingColumnDetailSampleValues=false, includeColumnSynonymsInPrompt=true, generateColumnMap=false, includeColumnValueSynonymsInPrompt=false, forEachHeuristic=true, seasonHeuristic=true, bypassCache=false, isColdStart=false, useZeroShotTMLPromptGeneration=true, includeColumnTableInfo=true, literacyPromptingEnabled=true, noSage=false, doNotReplaceWildcard=false, maxNumSelectItems=5, cotPromptingEnabled=true)"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "cb54d3ef52462970", "flags": 1, "operationName": "fetchKnnEntries", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ab44467670247a60"}], "startTime": 1735846000329000, "duration": 18696, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000348000, "fields": [{"key": "event.log", "type": "string", "value": "Feedback Column scores: "}]}, {"timestamp": 1735846000348000, "fields": [{"key": "event.log", "type": "string", "value": "Columns dropped from Knn Search "}]}, {"timestamp": 1735846000348000, "fields": [{"key": "event.log", "type": "string", "value": "Final Column scores: "}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "066db28df3031af8", "flags": 1, "operationName": "getSchemaFromDescriptors", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "5f05073887287dff"}], "startTime": 1735846000329000, "duration": 23393, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "5f05073887287dff", "flags": 1, "operationName": "getSchema", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "358e514cc3324fb1"}], "startTime": 1735846000329000, "duration": 23858, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000353000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from NL-to-SQL map: "}]}, {"timestamp": 1735846000353000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Query Hypothesis: "}]}, {"timestamp": 1735846000353000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from KNN search on saved answers: "}]}, {"timestamp": 1735846000353000, "fields": [{"key": "event.log", "type": "string", "value": "Columns from Semantic Value Search: "}]}, {"timestamp": 1735846000353000, "fields": [{"key": "event.log", "type": "string", "value": "Query Hypothesis column, sample values: {}"}]}, {"timestamp": 1735846000353000, "fields": [{"key": "event.log", "type": "string", "value": "Final Ranked Query Relevant Columns: "}]}, {"timestamp": 1735846000353000, "fields": [{"key": "event.log", "type": "string", "value": "Final Query relevant column, sample values: {}"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "e6bb7c2b6fa01ff6", "flags": 1, "operationName": "KNNSearch", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "cb54d3ef52462970"}], "startTime": 1735846000330000, "duration": 17420, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000331000, "fields": [{"key": "event.log", "type": "string", "value": "Fetching KNN for query: show details"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "cae8b3234dff58e8", "flags": 1, "operationName": "fetchSchemaFromConvContext", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ab44467670247a60"}], "startTime": 1735846000330000, "duration": 739, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "8713cf8d44135536", "flags": 1, "operationName": "fetchNLSqlMappingsForQuery", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ab44467670247a60"}], "startTime": 1735846000330000, "duration": 6029, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "47603640ca1313d7", "flags": 1, "operationName": "fetchRelevantFeedbackForQuery", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "8713cf8d44135536"}], "startTime": 1735846000330000, "duration": 5095, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "b40ac65638d32f26", "flags": 1, "operationName": "getSearchRequest", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "e5210864ae8ba092"}], "startTime": 1735846000331000, "duration": 226, "tags": [{"key": "NLSqlMappingRequest.worksheet", "type": "string", "value": "5f92ed57-6310-43c7-9184-7acb9e57829c"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "532ddd1b440bac58", "flags": 1, "operationName": "searcher.search.DataFetch.search", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "e5210864ae8ba092"}], "startTime": 1735846000331000, "duration": 3748, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "c799607b0008df87", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "e6bb7c2b6fa01ff6"}], "startTime": 1735846000331000, "duration": 11519, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "e5210864ae8ba092", "flags": 1, "operationName": "ElasticNLSqlMappingFetcher.fetch", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "47603640ca1313d7"}], "startTime": 1735846000331000, "duration": 4703, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000331000, "fields": [{"key": "event.log", "type": "string", "value": "search-request : SearchRequest: POST /nl_sql_mapping_index/_search?typed_keys=true&preference=00000844-4d3c-81bc-877f-b1179c5153f5 {\"query\":{\"bool\":{\"filter\":[{\"term\":{\"WORKSHEET_ID\":{\"value\":\"5f92ed57-6310-43c7-9184-7acb9e57829c\"}}},{\"term\":{\"TENANT_ID\":{\"value\":\"fa794c92-1470-11ee-8c81-cbe72\"}}},{\"term\":{\"IS_ARCHIVED\":{\"value\":false}}},{\"bool\":{\"minimum_should_match\":\"1\",\"must\":[{\"term\":{\"ORG_ID\":{\"value\":\"33363357\"}}}],\"should\":[{\"bool\":{\"must\":[{\"match\":{\"USER_ID\":{\"operator\":\"and\",\"query\":\"00000844-4d3c-81bc-877f-b1179c5153f5\"}}},{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"WORKSHEET_USER\"}}}]}},{\"bool\":{\"must\":[{\"match\":{\"MAPPING_SCOPE\":{\"operator\":\"and\",\"query\":\"GLOBAL\"}}}]}}]}},{\"range\":{\"UP_VOTES\":{\"gte\":1}}},{\"script\":{\"script\":{\"params\":{},\"lang\":\"painless\",\"source\":\"(doc.containsKey('UP_VOTES') && doc['UP_VOTES'].size() > 0 ? doc['UP_VOTES'].value : 0) - (doc.containsKey('DOWN_VOTES') && doc['DOWN_VOTES'].size() > 0 ? doc['DOWN_VOTES'].value : 0) >= 0\"}}}],\"minimum_should_match\":\"1\",\"should\":[{\"match\":{\"PARENT_QUERY\":{\"query\":\"show details\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"show\"}}},{\"match_phrase_prefix\":{\"NL_QUERY\":{\"query\":\"details\"}}}]}},\"size\":20,\"track_scores\":true}"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "74a3a23fe5ffb3e5", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "47603640ca1313d7"}], "startTime": 1735846000331000, "duration": 164, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "b353ff9feaac2e72", "flags": 1, "operationName": "extractNouns", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "e5210864ae8ba092"}], "startTime": 1735846000335000, "duration": 122, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "0328155c1d43952f", "flags": 1, "operationName": "searchByEmbedding", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "e6bb7c2b6fa01ff6"}], "startTime": 1735846000342000, "duration": 5293, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "aabeff3e-ee32-4e8f-848b-c8b6a8636a65"}, {"key": "user.id", "type": "string", "value": "00000844-4d3c-81bc-877f-b1179c5153f5"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "4a34b48b60cf5930", "flags": 1, "operationName": "applyImpressionWeightedFiltering", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "cb54d3ef52462970"}], "startTime": 1735846000348000, "duration": 69, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000348000, "fields": [{"key": "event.log", "type": "string", "value": "Total Answers Filtered out: 0"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "fb9c13bc9f7c9613", "flags": 1, "operationName": "fetchSemanticValueMatches", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ab44467670247a60"}], "startTime": 1735846000349000, "duration": 3628, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "a70c7d8de2ed8fd1", "flags": 1, "operationName": "selectColumns", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "059e84cc73962e90"}], "startTime": 1735846000353000, "duration": 176, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "059e84cc73962e90", "flags": 1, "operationName": "filterColumnDetails", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "358e514cc3324fb1"}], "startTime": 1735846000353000, "duration": 597, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000353000, "fields": [{"key": "event.log", "type": "string", "value": "Original Column Details: Id,Partneraccountid,Shippingstate,Billinglongitude,Billingstate,Expectedrevenue,Ownerid,Stagename,Type,Amount,Description,Forecastcategory,Accountid,Iswon,Closedate,Name,Createddate,Lastactivitydate,Isclosed,Shippingstreet,Shippinglatitude,Parentid,Numberofemployees,Shippingcountry,Billinggeocodeaccuracy,SF Opp Link,Billingstreet,Annualrevenue,Billingcountry,Billinglatitude,Accountnumber,Shippingcity,Active C,Tickersymbol,Account Ownerid,Createdbyid,Shippingpostalcode,Billingcity,Shippinglongitude,Website,Phone,Billingpostalcode,Account Type,Account Createddate,Account Name"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "ccd19e378a26c039", "flags": 1, "operationName": "mergeSchemas", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "5f05073887287dff"}], "startTime": 1735846000353000, "duration": 119, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "6007bafec968b8ef", "flags": 1, "operationName": "generateTMLResponse", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "7825c25615f2a3f8"}], "startTime": 1735846000354000, "duration": 3691675, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "1d935ab3bb6486d5", "flags": 1, "operationName": "generateResponse", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "6007bafec968b8ef"}], "startTime": 1735846000354000, "duration": 3691637, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "7825c25615f2a3f8", "flags": 1, "operationName": "generateQueries", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "358e514cc3324fb1"}], "startTime": 1735846000354000, "duration": 3691698, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "8d680879b81d04e0", "flags": 1, "operationName": "encode", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "1d935ab3bb6486d5"}], "startTime": 1735846000369000, "duration": 10537, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "eb350a12b64bd33d", "flags": 1, "operationName": "getEmbeddingScoresForExamples", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "1d935ab3bb6486d5"}], "startTime": 1735846000390000, "duration": 253834, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "3c9d26e11014e9e8", "flags": 1, "operationName": "batchEncode", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "eb350a12b64bd33d"}], "startTime": 1735846000390000, "duration": 252641, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "8727b229dd8971b1", "flags": 1, "operationName": "getTMLResponseInfoTranslation", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "1d935ab3bb6486d5"}], "startTime": 1735846000647000, "duration": 3397409, "tags": [{"key": "x.request.id", "type": "string", "value": "aabeff3e-ee32-4e8f-848b-c8b6a8636a65"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846004044000, "fields": [{"key": "event.log", "type": "string", "value": "LLM response = {\n  \"rephrasedQuery\": \"Show all details\",\n  \"reasoning\": {\n    \"assumptions\": \"The user wants to see all available details from the table.\",\n    \"stepByStepThinking\": \"Since the user query is asking for all details, we will include all columns in the output.\"\n  },\n  \"tokens\": \"[Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] [Description] [Forecastcategory] [Accountid] [Iswon] [Closedate] [Name] [Createddate] [Lastactivitydate] [Isclosed] [Shippingstreet] [Shippinglatitude] [Parentid] [Numberofemployees] [Shippingcountry] [Billinggeocodeaccuracy] [SF Opp Link] [Billingstreet] [Annualrevenue] [Billingcountry] [Billinglatitude] [Accountnumber] [Shippingcity] [Active C] [Tickersymbol] [Account Ownerid] [Createdbyid] [Shippingpostalcode] [Billingcity] [Shippinglongitude] [Website] [Phone] [Billingpostalcode] [Account Type] [Account Createddate] [Account Name]\"\n}"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "53649288bd3c57a0", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "8727b229dd8971b1"}], "startTime": 1735846000648000, "duration": 16497, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "3d598a6b629a8029", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "8727b229dd8971b1"}], "startTime": 1735846000665000, "duration": 112, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "79b85f33981ba580", "flags": 1, "operationName": "LLMGatewayNLPService::getResponsesFromLLM", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "8727b229dd8971b1"}], "startTime": 1735846000665000, "duration": 3378647, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846000668000, "fields": [{"key": "event.log", "type": "string", "value": "Chat Completion prompt = \nSYSTEM:\n**Task:**\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\n\nYou are given the following:\n1. Definition & rules of the language.\n2. References for which functions and keywords to use with examples.\n3. Table Schema with column names, their data type, synonyms & sample values.\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\n5. Chat History, if any, containing all the previous interactions between user and assistant.\n\n**Definitions and Rules of the Phrase Token Language:**\n\n### **Key Definitions**\n\n1. **Column Types**\n\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\n\n2. **Output Columns**\n\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `' '`.\n- **Examples**:\n  - **Output Column**: [column]\n  - **Filter Applied**: [column] = 'value'\n\n3. **Filters**\n\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `' '`. The general format is `[column] operator 'value'`.\n- **Filter Logic**:\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\n    - **Example**: [column] = 'value1' [column] = 'value2'\n    *(Matches records where `column` is 'value1' **or** 'value2')*\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\n    - **Example**: [column1] = 'value1' [column2] = 'value2'\n    *(Matches records where `column1` is 'value1' **and** `column2` is 'value2')*\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].'value'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\n\n4. **Formulas**\n\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\n- **Usage**:\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\n- **Structure**:\n  - **Formulas Field**:\n    \"formulas\": [\n      {\n        \"name\": \"<formula_name>\",\n        \"expression\": \"<formula_expression>\"\n      },\n      ...\n    ]\n  - **Tokens Field Example**:\n    {\n      \"tokens\": \"[Formula Name] by [Column Name]\",\n      \"formulas\": [ ... ]\n    }\n- **Key Points**:\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user's query, for example, pick a relevant substring of the query.\n  - **Expressions**:\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\n    - Refer to the examples provided later for formula syntax and better understanding.\n  - **Dependencies**:\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \"unique users\", expression: \"unique count ( user id )\", then you cannot apply \"sum ( unique users )\"\" because it is already aggregated i.e. \"group_aggregate ( sum ( unique users ) , { } , { } )\" is incorrect because it will fail formula grammar check. The correct expression should be: \"group_aggregate ( unique users , { } , { } )\" i.e. without any aggregation function applied on aggregated formula/column.\n\n**5. Column and Value Selection**\n\n- **Column Selection**:\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user's query. Columns are sorted by relevance in the schema, with the most relevant first.\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\n\n- **Value Selection**:\n  - **Use Schema Values**:\n    - When applying filters, prioritize sample values from the schema that match the user's query.\n  - **If Values Are Missing**:\n    - If matching values are not found in the schema, you may:\n    - Select the nearest appropriate value from the schema.\n    - Generate a suitable value based on the query context.\n    Choose the approach that best captures the user's intent, without bias towards the schema.\n  - **Ensure Relevance**:\n    - Only include values that make sense within the context of the query.\n    - Avoid illogical or irrelevant values.\n\n### **Table Schema**\n\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\n\nCREATE TABLE TSEMBED (\nId text /*. Group: TSEMBED Dev Org - Opps.*/,\nPartneraccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\nShippingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\nExpectedrevenue int /*. Group: TSEMBED Dev Org - Opps.*/,\nOwnerid text /*. Group: TSEMBED Dev Org - Opps.*/,\nStagename text /*. Group: TSEMBED Dev Org - Opps.*/,\nType text /*. Group: TSEMBED Dev Org - Opps.*/,\nAmount int /*. Group: TSEMBED Dev Org - Opps.*/,\nDescription text /*. Group: TSEMBED Dev Org - Opps.*/,\nForecastcategory text /*. Group: TSEMBED Dev Org - Opps.*/,\nAccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\nIswon int /*. Group: TSEMBED Dev Org - Opps.*/,\nClosedate date /* Current year is 2025.. Group: TSEMBED Dev Org - Opps.*/,\nName text /*. Group: TSEMBED Dev Org - Opps.*/,\nCreateddate date /*. Group: TSEMBED Dev Org - Opps.*/,\nLastactivitydate text /*. Group: TSEMBED Dev Org - Opps.*/,\nIsclosed int /*. Group: TSEMBED Dev Org - Opps.*/,\nShippingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nParentid text /*. Group: TSEMBED Dev Org Export - Account.*/,\nNumberofemployees int /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillinggeocodeaccuracy text /*. Group: TSEMBED Dev Org Export - Account.*/,\nSF Opp Link text /*. Group: TSEMBED Dev Org - Opps.*/,\nBillingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAnnualrevenue int /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccountnumber text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\nActive C text /*. Group: TSEMBED Dev Org Export - Account.*/,\nTickersymbol text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccount Ownerid text /*. Group: TSEMBED Dev Org Export - Account.*/,\nCreatedbyid text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\nShippinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\nWebsite text /*. Group: TSEMBED Dev Org Export - Account.*/,\nPhone text /*. Group: TSEMBED Dev Org Export - Account.*/,\nBillingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccount Type text /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccount Createddate date /*. Group: TSEMBED Dev Org Export - Account.*/,\nAccount Name text /*. Group: TSEMBED Dev Org Export - Account.*/)\n\n### **Supported Keyword and Function References with Examples**\n\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\n\n**Relevant Keywords for Phrase Tokens**\n\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\n\n{\"function\":\"top|bottom n\",\"description\":\"Generates the top (or bottom) n items from a sorted result. Substitute 'n' with number specified by the user in query. When 'sort by' is used with 'top', it automatically implies sorting is done in descending order. If 'bottom' is used with 'sort by', then it is in ascending order by default.\",\"example\":[\"top 10 [Id] sort by [Expectedrevenue]\",\"bottom 25 [Id] sort by count [Id]\"]}\n{\"function\":\"sort by\",\"example\":[\"sort by [Expectedrevenue] ascending\",\"sort by count [Id] descending\"]}\n{\"function\":\"by\",\"description\":\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\",\"example\":[\"by [Expectedrevenue]\"]}\n{\"function\":\"begins|ends with\",\"description\":\"Returns all column values that begins or ends with a value defined in quotes.\",\"example\":[\"[Id] begins with 'a0_value0'\",\"[Id] ends with 'a0_value0'\"]}\n{\"function\":\"contains|not contains\",\"description\":\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\",\"example\":[\"[Id] contains 'a0_value0'\",\"[Id] contains 'a0_value0' 'a0_value1'\",\"[Id] not contains 'a0_value0'\"]}\n{\"function\":\"vs\",\"description\":\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = 'east' vs [region] = 'west'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = 'value1' vs [attribute] = 'value2'\",\"example\":[\"[Expectedrevenue] [Id] = 'a0_value0' vs [Id] = 'a0_value1'\",\"[Expectedrevenue] [Closedate] = 'this year' vs [Closedate] = 'last year'\",\"[Amount] [Partneraccountid] = 'a1_value0' vs [Partneraccountid] = 'a1_value1' vs [Partneraccountid] = 'a1_value2'\"]}\n{\"function\":\"growth of\",\"description\":\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\",\"example\":[\"growth of [Expectedrevenue] by [Closedate] [Closedate].'daily'\"]}\n{\"function\":\"unique count\",\"description\":\"Similar to SQL's SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"unique count [Id]\"]}\n{\"function\":\"count\",\"description\":\"Similar to SQL's SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\",\"example\":[\"count [Id]\"]}\n{\"function\":\"in|not in\",\"description\":\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user's query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using 'in' or 'not in' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn't support use of 'vs' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where 'subsearch' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using 'not in'.\",\"example\":[\"[Id] in ([Id] [Id] begins with 'a0_value0' [Expectedrevenue] > 100 top 10 [Id] sort by [Amount] descending)\",\"[Id] not in ([Id] [Id] begins with 'a0_value0' [Expectedrevenue] > 100 top 10 [Id] sort by [Amount] descending)\"]}\n{\"function\":\"sum|average|min|max\",\"description\":\"Similar to SQL's SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\",\"example\":[\"sum [Expectedrevenue]\",\"average [Expectedrevenue]\"]}\n{\"function\":\"for each\",\"description\":\"Used on attributes i.e. columns with type text.\",\"example\":[\"for each [Id]\"]}\n\n\n**Function References for Formulas**\n\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\n\n{\"function\":\"average\",\"description\":\"Returns the average of all the values of a column.\",\"example\":[\"average ( Expectedrevenue )\"]}\n{\"function\":\"count\",\"description\":\"Returns the number of rows in the table containing the column.\",\"example\":[\"count ( Id )\"]}\n{\"function\":\"count_if\",\"description\":\"Returns the number of rows in the table containing the column that meet a given criteria.\",\"example\":[\"count_if ( (Expectedrevenue > 10), Id )\",\"count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\"]}\n{\"function\":\"cumulative_average\",\"description\":\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_average (Expectedrevenue, Id, Partneraccountid)\"]}\n{\"function\":\"cumulative_sum\",\"description\":\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\",\"example\":[\"cumulative_sum (Expectedrevenue, Id)\"]}\n{\"function\":\"group_aggregate\",\"description\":\"**Summary of the `group_aggregate` Function**\n\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\n\n**Function Syntax:**\n```\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\n```\n\n**Parameters:**\n\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\n   - `sum(measure0)`\n   - `count(attribute0)`\n   - `unique count (attribute0)`\n   - `average(measure1)`\n   - `avg(measure1)`\n\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\n   - **`query_groups()`**: Includes all groupings from the main query.\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\n\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\n   - **`query_filters()`**: Includes all filters from the main query.\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\n\n**Usage Notes:**\n\n- **Grouping Modifications:**\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\n\n- **Filter Modifications:**\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\n    - Example: `query_filters() + {attribute0 = 'value'}` adds a new filter condition.\n\n- **Process `grouping_set`**:\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\n  - **`query_groups()`**: Use the groupings defined in the main query.\n  - **Modify Groupings with `+` and `-`**:\n    - **Adding Groupings**: Combine main query groupings with additional columns.\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\n\n- **Process `filter_set`**:\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\n  - **`query_filters()`**: Use filters defined in the main query.\n  - **Modify Filters with `+` and `-`**:\n    - **Adding Filters**: Include additional filter conditions.\n    - **Excluding Filters**: Remove filters related to specific columns.\n\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\n\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\n\n**Key Concepts:**\n\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\n\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\n\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\n\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\n\n**Summary of Operators:**\n\n- **Groupings**:\n  - **`{ }`**: No groupings.\n  - **`query_groups()`**: Use main query groupings.\n  - **`+ {columns}`**: Add columns to groupings.\n  - **`- {columns}`**: Remove columns from groupings.\n\n- **Filters**:\n  - **`{ }`**: No filters.\n  - **`query_filters()`**: Use main query filters.\n  - **`+ {conditions}`**: Add filter conditions.\n  - **`- {columns}`**: Remove filters on columns.\n\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\",\"example\":[\"group_aggregate ( sum ( Expectedrevenue ) , { Id } , { } )\",\"group_aggregate ( stddev ( Expectedrevenue ) , { } , { } )\",\"group_aggregate ( variance ( Expectedrevenue ), { Id , Partneraccountid }, { day_of_week ( Closedate ) = 'friday' } )\",\"group_aggregate ( average ( Amount ), query_groups ( ), query_filters ( ) )\",\"group_aggregate ( count ( Partneraccountid ), query_groups ( ) + { Id }, query_filters ( ) - { Partneraccountid } )\",\"group_aggregate ( unique count ( Partneraccountid ) , query_groups ( ) + { Id }, query_filters ( ) + { Partneraccountid != 'a1_value0' } )\"]}\n{\"function\":\"max\",\"description\":\"Returns the maximum value of a column.\",\"example\":[\"max ( Expectedrevenue )\"]}\n{\"function\":\"min\",\"description\":\"Returns the minimum value of a column.\",\"example\":[\"min (Expectedrevenue)\"]}\n{\"function\":\"moving_average\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\",\"example\":[\"moving_average (Expectedrevenue, 2, 1, Id)\"]}\n{\"function\":\"moving_sum\",\"description\":\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\u2026Current + Num2) with both end points being included in the window. For example, '1,1' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\",\"example\":[\"moving_sum ( Expectedrevenue, 2, 1, Id )\"]}\n{\"function\":\"percentile\",\"description\":\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\",\"example\":[\"percentile ( Expectedrevenue , 99 , 'asc' )\",\"percentile ( Expectedrevenue , 95 , 'desc' )\"]}\n{\"function\":\"stddev\",\"description\":\"Returns the standard deviation of all values of a column.\",\"example\":[\"stddev ( Expectedrevenue )\"]}\n{\"function\":\"sum\",\"description\":\"Returns the sum of all the values of a numeric column i.e. measure.\",\"example\":[\"sum ( Expectedrevenue )\"]}\n{\"function\":\"unique count\",\"description\":\"Returns the number of unique values of a column.\",\"example\":[\"unique count ( Id )\"]}\n{\"function\":\"unique_count_if\",\"description\":\"Returns the number of unique values of a column provided it meets a criteria.\",\"example\":[\"unique_count_if ( (Expectedrevenue > 10) , Id )\",\"unique_count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\"]}\n{\"function\":\"variance\",\"description\":\"Returns the variance of all the values of a column.\",\"example\":[\"variance ( Expectedrevenue )\"]}\n{\"function\":\"in|not in\",\"description\":\"Function that takes a column name and a list of values, used in 'formulas' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\",\"example\":[\"Id in { 'a0_value0' , 'a0_value1' }\",\"Id not in { 'a0_value0' , 'a0_value1' ,'a0_value2' }\"]}\n{\"function\":\"to_date\",\"description\":\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like 'march 2024' in formula language, since 'march 2024' is not a valid formula keyword but only valid in main tokens query.\",\"example\":[\"to_date ('2024-05-16', '%Y-%m-%d')\",\"Closedate >= to_date ('03/01/2024', '%m/%d/%Y') and Closedate <= to_date ('03/31/2024', '%m/%d/%Y')\"]}\n{\"function\":\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\",\"description\":\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords 'this year', 'this day', 'last year', 'last 2 quarters', so on in formula language.\",\"example\":[\"diff_days ( Closedate, today ( ) ) = 0\",\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\",\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\",\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\"]}\n{\"function\":\"if-else\",\"description\":\"if-else statements similar to the ones in programming languages, only use them in 'formulas' field.\",\"example\":[\"if ( Expectedrevenue > 100 ) then 'High' else 'Low'\",\"if ( Expectedrevenue > 100 ) then 'High' else if ( Amount > 100 and Id = 'a0_value0' ) then 'Medium' else 'Low'\"]}\n{\"function\":\"year|month|day\",\"description\":\"Functions below that are used to extract year, month, and day from a date column or even today() function.\",\"example\":[\"year ( Closedate ) = 2024\",\"month ( Closedate ) = 'June'\",\"day ( today ( ) ) = 2\"]}\n\n\n**Date Keywords**\n\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\n\n{\"function\":\"last|next month\",\"example\":[\"[Closedate] = 'last month'\"]}\n{\"function\":\"last|next n days\",\"example\":[\"[Closedate] = 'last 7 days'\",\"[Closedate] = 'next 7 days'\"]}\n{\"function\":\"last|next n months\",\"example\":[\"[Closedate] = 'last 12 months'\"]}\n{\"function\":\"last|next n quarters\",\"example\":[\"[Closedate] = 'last 12 quarters'\"]}\n{\"function\":\"last|next n weeks\",\"example\":[\"[Closedate] = 'last 12 weeks'\"]}\n{\"function\":\"last|next n years\",\"example\":[\"[Closedate] = 'last 12 years'\"]}\n{\"function\":\"last|next quarter\",\"example\":[\"[Closedate] = 'last quarter'\"]}\n{\"function\":\"last|next week\",\"example\":[\"[Closedate] = 'last week'\"]}\n{\"function\":\"last|next year\",\"example\":[\"[Closedate] = 'last year'\"]}\n{\"function\":\"<month>\",\"example\":[\"[Closedate] = 'march'\",\"[Closedate] = 'april'\"]}\n{\"function\":\"<year>\",\"example\":[\"[Closedate] = '2024'\"]}\n{\"function\":\"<weekday>\",\"example\":[\"[Closedate] = 'Saturday'\",\"[Closedate] = 'Monday'\"]}\n{\"function\":\"<month_year>\",\"example\":[\"[Closedate] = 'march 2024'\",\"[Closedate] = 'april 2024'\"]}\n{\"function\":\"this day|month|year|quarter|week\",\"example\":[\"[Closedate] = 'this day'\",\"[Closedate] = 'this quarter'\"]}\n{\"function\":\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\",\"example\":[\"[Closedate] = 'last 2 quarters for each year'\",\"[Closedate] = 'last 10 weeks for each month'\"]}\n{\"function\":\"yearly|quarterly|monthly|weekly|daily|hourly\",\"description\":\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\",\"example\":[\"[Closedate].yearly\",\"[Closedate].quarterly\",\"[Closedate].monthly\",\"[Closedate].weekly\",\"[Closedate].daily\"]}\n{\"function\":\"between ... and ...\",\"description\":\"Selects records where the date is between the two specified dates. The dates must be in the format 'MM/dd/yyyy'. 'january 2024' type of dates are not supported, they have to be in a date format.\",\"example\":[\"[Closedate] between '01/30/2012' and '01/30/2014'\"]}\n{\"function\":\"month over month|quarter over quarter|year over year|week over week\",\"description\":\"Only used with 'growth of' keyword. The 'year over year' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The 'month over month' keyword compares data between the same time period from different months.\",\"example\":[\"growth of [Expectedrevenue] by [Closedate] [Closedate].daily month over month\",\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly year over year\",\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly quarter over quarter\"]}\n{\"function\":\"day|week of month|quarter|year\",\"description\":\"Returns the day|week number of the month quarter or year for the date value. Example, 'day of month' for 13th Jan would be 13. 'day of year' for 13th Jan would be 13. 'week of month' for 13th Jan would be 2.\",\"example\":[\"[Closedate].'day of month'\",\"[Closedate].'month of year'\",\"[Closedate].'week of year'\"]}\n{\"function\":\"n months|weeks|days|quarters|years ago\",\"example\":[\"[Closedate] = '10 months ago'\",\"[Closedate] = '5 years ago'\"]}\n{\"function\":\"detailed\",\"description\":\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\",\"example\":[\"[Closedate] detailed\"]}\n\n\n**Instructions:**\n\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\n\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\n\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today's date in\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\n\n### **Additional Rules for Generating Phrase Tokens**\n\n1. **Including Output Columns**\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\n    - Choose the output column based on the context of the query.\n    - **Example**:\n       - *Invalid*: `{\"tokens\": \"[column1] = 'value1' [column2] = 'value2'\"}`\n       - *Valid*: `{\"tokens\": \"[column1] = 'value1' [column2] = 'value2' [column3]\"}`\n2. **Expanding Month Abbreviations**\n    - Expand month abbreviations (e.g., 'Jan', 'Feb') to full names when used as **date filters** in phrase tokens.\n    - Do **not** expand them if used as filter values in **non-date columns**.\n3. **Count and Unique Count Usage**\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\n    - Do **not** apply them to **measures** or numeric columns.\n4. **Numeric Comparisons in Formulas**\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\n5. **Representing Date Filters in Formulas**\n    - In **formula expressions**, represent date filters like `'last month'` using functions such as `diff_months` or `to_date` that calculate the date range.\n6. **Avoid Redundant Formulas**\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don't need to create an additional formula for it.\n    - **Example to Avoid**:\n       - `{\"tokens\": \"[Measure]\", \"formulas\": [{\"name\": \"Total Measure\", \"expression\": \"sum(Measure)\"}]}`\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\n7. **Filtering on Null Values**\n    - When filtering on **null values**, encapsulate `'null'` in single quotes and curly braces `{ }`, like `'{null}'`.\n    - **Example**: `[column] != '{null}'`\n8. **Growth of phrase cannot co-exist with versus phrase**\n    - If there is a growth phrase like: 'growth of sum [measure] by [date] [date].monthly', it cannot co-exist with '[attribute] = 'value' vs [attribute] = 'value''. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = 'value' [attribute] = 'value' where 'vs' keyword is removed.\n9. **Avoid Counting and Grouping on the Same Column**\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\n10. **Avoid adding 'by' keyword to date bucket**\n    - When using date bucket in the final answer, do not add 'by' keyword. Remove by keyword and just add date bucket alone.\n11. **Query-on-Query Intent**:\n     - **Definition**:\n        - Occurs when the user's query references previous results or includes subquery logic, similar to SQL subqueries.\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\u2014conditions on the **same column** that cannot be true simultaneously in a single row.\n     - **Handling Subqueries**:\n        - Represent such queries using the `in` or `not in` keywords.\n     - **Syntax**:\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\n     - **Application**:\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\n        - To determine if a query has subquery intent, rephrase the user's query to make it clear and unambiguous, accurately capturing their intent.\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\n\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\n\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\n\nsub_queries represent a separate view (similar to SQL view) of data that is joined to main query using anchor_column_id. The return_column_id is the output of the sub_query. Both anchor_column_id & return_column_id need to be output columns in the sub_queries' tokens field for the join to be valid. sub_queries are used for cohort analysis, where multiple sub_queries represent cohorts & their labels (exposed through formulas) are used for cohort analysis using some measure or aggregated attribute in the main query.\n\n**Single Query Examples**\n\n{\"query\":\"show me Expectedrevenue for week of 11/19/2024\",\"desc\":\"First find the week number using IN filter, then apply a filter on the year 2024 to only take into account week number in current year\",\"tokens\":\"[Expectedrevenue] [Closedate] in ( [Closedate] [Closedate].'week of year' [Closedate] = '11/19/2024' ) [Closedate] = '2024'\"}\n{\"query\":\"show me Expectedrevenue for week starting from 11/19/2024\",\"desc\":\"This requires assuming the first day of the week is mentioned in the query (start date) & then use 'between' to calculate the week range of 7 days.\",\"tokens\":\"[Expectedrevenue] [Closedate] between '11/19/2024' and '11/25/2024'\"}\n{\"query\":\"take the 3 biggest Id by Expectedrevenue. show me how their Expectedrevenue has changed over the years\",\"desc\":\"First, find the top 3 Id by Expectedrevenue. Then, for these Id, display their Expectedrevenue per year to show how it has changed over the years by using IN sub-query to join with the main query.\",\"tokens\":\"[Id] [Expectedrevenue] [Closedate].yearly [Id] in ( [Id] top 3 [Id] sort by sum [Expectedrevenue] descending )\"}\n{\"query\":\"show me Id that have Expectedrevenue in the last three months and have no Expectedrevenue prior\",\"desc\":\"In this query, we use a sub query to filter the Id that have no Expectedrevenue prior.\",\"tokens\":\"[Id] [Expectedrevenue] > 0 [Closedate] = 'last 3 months' [Id] not in ( [Id] [Expectedrevenue] > 0 [Closedate] < 'last 3 months' )\"}\n{\"query\":\"show Ids with the highest Expectedrevenue this year\",\"tokens\":\"[Id] sort by [Expectedrevenue] descending [Closedate] = 'this year'\"}\n{\"query\":\"display Ids for which Expectedrevenue increased this year\",\"desc\":\"To compute this first compute Expectedrevenue per Id this year and last year. Then compute for which Id it increased by doing a difference.\",\"tokens\":\"[Id] [date] = 'this year' [Expectedrevenue increased this year] = 'true'\",\"formulas\":[{\"name\":\"Expectedrevenue last year\",\"expression\":\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = -1 } )\"},{\"name\":\"Expectedrevenue this year\",\"expression\":\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = 0 } )\"},{\"name\":\"Expectedrevenue increased this year\",\"expression\":\"Expectedrevenue this year > Expectedrevenue last year\"}]}\n{\"query\":\"show Id with highest Expectedrevenue in every year.\",\"desc\":\"'for each' phrase is used when using 'top x' phrase with a date bucketing filter.\",\"tokens\":\"top 10 [Id] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\"}\n{\"query\":\"Identify the top 10 Id in Expectedrevenue, and for each, show the top 3 Partneraccountid with the highest Amount\",\"tokens\":\"top 3 [Partneraccountid] for each [Id] sort by [Amount] [categorize based on rank] = 'top 10 Id by Expectedrevenue'\",\"formulas\":[{\"name\":\"categorize based on rank\",\"expression\":\"if ( top Id by Expectedrevenue <= 10 ) then 'top 10 Id by Expectedrevenue' else 'everything else'\"}],\"sub_queries\":[{\"tokens\":\"[Id] [rank based on Expectedrevenue]\",\"formulas\":[{\"name\":\"rank based on Expectedrevenue\",\"expression\":\"rank ( sum ( Expectedrevenue ) , 'desc' )\"}],\"cohort_config\":{\"name\":\"top Id by Expectedrevenue\",\"return_column_id\":\"rank based on Expectedrevenue\",\"anchor_column_id\":\"Id\"}}]}\n{\"query\":\"display top 10 Ids by Partneraccountid\",\"desc\":\"Since the user did not specify on what criteria to return top 10 attributes, select a measure i.e. numeric column on best effort basis automatically.\",\"tokens\":\"top 10 [Id] sort by [Expectedrevenue] by [Partneraccountid]\"}\n{\"query\":\"show me bottom 3 Expectedrevenue Ids in q2 2023 vs bottom 3 Expectedrevenue Ids in q1 2023\",\"tokens\":\"[Expectedrevenue] [categorize based on rank] [categorize based on rank] = 'bottom 3 ranked Id by Expectedrevenue in q2 2023' [categorize based on rank] = 'bottom 3 ranked Id by Expectedrevenue in q1 2023'\",\"formulas\":[{\"name\":\"categorize based on rank\",\"expression\":\"if ( bottom ranked Id by Expectedrevenue in q2 2023 <= 3 ) then 'bottom 3 ranked Id by Expectedrevenue in q2 2023' else if ( bottom ranked Id by Expectedrevenue in q1 2023 <= 3 ) then 'bottom 3 ranked Id by Expectedrevenue in q1 2023' else 'everything else'\"}],\"sub_queries\":[{\"tokens\":\"[Id] [rank based on Expectedrevenue] [Closedate] = 'q2 2023'\",\"formulas\":[{\"name\":\"rank based on Expectedrevenue\",\"expression\":\"rank ( sum ( Expectedrevenue ) , 'asc' )\"}],\"cohort_config\":{\"name\":\"bottom ranked Id by Expectedrevenue in q2 2023\",\"return_column_id\":\"rank based on Expectedrevenue\",\"anchor_column_id\":\"Id\"}},{\"tokens\":\"[Id] [rank based on Expectedrevenue] [Closedate] = 'q1 2023'\",\"formulas\":[{\"name\":\"rank based on Expectedrevenue\",\"expression\":\"rank ( sum ( Expectedrevenue ) , 'asc' )\"}],\"cohort_config\":{\"name\":\"bottom ranked Id by Expectedrevenue in q1 2023\",\"return_column_id\":\"rank based on Expectedrevenue\",\"anchor_column_id\":\"Id\"}}]}\n{\"query\":\"show Expectedrevenue per two weeks\",\"desc\":\"two weeks is bi-weekly aggregated sum of a measure. To achieve this, first use weekly date bucket in main query, so that the date granularity can be used in the moving_sum formula. Then use moving_sum formula to calculate sum of Expectedrevenue with (1,0) parameters, which implies a window size of 2 weeks, previous & current week.\",\"tokens\":\"[Expectedrevenue per two weeks] [Closedate].weekly\",\"formulas\":[{\"name\":\"Expectedrevenue per two weeks\",\"expression\":\"moving_sum ( Expectedrevenue , 1 , 0 , Closedate )\"}]}\n{\"query\":\"what is the ratio of the a1_value0 & a1_value1 to the total Id\",\"desc\":\"In this query, we are determining the ratio of records where 'Partneraccountid' is either 'a1_value0' or 'a1_value1' to the total count of 'Id'. The main query groups the data based on any specified groupings and applies any existing filters (though none are specified here). The total count of 'Id' (denominator) is calculated using 'group_aggregate(count(Id), query_groups(), query_filters())', which counts 'Id' across the groupings and filters of the main query. The numerator, representing the total where 'Partneraccountid' equals 'a1_value0' or 'a1_value1', is obtained using 'group_aggregate(count(Partneraccountid), query_groups(), query_filters() + { Partneraccountid = 'a1_value0', Partneraccountid = 'a1_value1' })', adding filters for the specific 'Partneraccountid' values. The ratio is then determined by dividing the numerator by the denominator.\",\"tokens\":\"[ratio] [total Id]\",\"formulas\":[{\"name\":\"total Id\",\"expression\":\"group_aggregate ( count ( Id ) , query_groups ( ) , query_filters ( ) )\"},{\"name\":\"total Partneraccountid with Partneraccountid = a1_value0 & Partneraccountid = a1_value1\",\"expression\":\"group_aggregate ( count ( Partneraccountid ) , query_groups ( ) , query_filters ( ) + { Partneraccountid = 'a1_value0' , Partneraccountid = 'a1_value1' } )\"},{\"name\":\"ratio\",\"expression\":\"total Partneraccountid with Partneraccountid = a1_value0 & Partneraccountid = a1_value1 / total Id\"}]}\n{\"query\":\"show distinct values for Partneraccountid\",\"desc\":\"Returning just the output column acts as a group by <column> in SQL\",\"tokens\":\"[Partneraccountid]\"}\n{\"query\":\"show Ids that have Expectedrevenue more than 95 percentile and show me their Expectedrevenue\",\"desc\":\"This template is designed to identify the attributes whose associated 'measure' values exceed the 95th percentile of all 'measure' values in the dataset. It includes a calculation of the 95th percentile value and then applies a filter to count only those attributes where their 'measure' exceeds this percentile threshold. Comparison with percentile function can only be done with an aggregation like sum, average so on. So sum ( measure ) is used for comparison.\",\"tokens\":\"[Id] [Expectedrevenue more than 95 percentile] = true [Expectedrevenue]\",\"formulas\":[{\"name\":\"Expectedrevenue more than 95 percentile\",\"expression\":\"rank_percentile ( sum ( Expectedrevenue ) , 'desc' ) > 95\"}]}\n{\"query\":\"what is total count Id in march 2024 as percentage of total count Partneraccountid in march 2023\",\"tokens\":\"[percentage of Id in March 2024 over Partneraccountid in March 2023]\",\"formulas\":[{\"name\":\"Total Count Id in March 2024\",\"expression\":\"count_if( ( Closedate >= to_date ( '03/01/2024' , '%m/%d/%Y' ) and Closedate <= to_date ( '03/31/2024' , '%m/%d/%Y' ) ), Id)\"},{\"name\":\"Total Count Partneraccountid in March 2023\",\"expression\":\"count_if( ( Closedate >= to_date ( '03/01/2023' , '%m/%d/%Y' ) and Closedate <= to_date ( '03/31/2023' , '%m/%d/%Y' ) ), Partneraccountid)\"},{\"name\":\"percentage of Id in March 2024 over Partneraccountid in March 2023\",\"expression\":\"Total Count Id in March 2024 / Total Count Partneraccountid in March 2023 * 100\"}]}\n\nUSER:\n### **User Query**\n\nUser Query: show details\n\n\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\n\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\u2014never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query's intent.\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\u2014only their names should be included.\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\n\n\n### **Step-by-Step Guidance for Generating Phrase Tokens**\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\n\n1. **Rephrase the User's Query**\n   - Rephrase the latest user's query to make it clear and unambiguous, accurately capturing the user's intent.\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\n   - The rephrased query should be easily translatable into SQL for data retrieval.\n   - Use the rephrased query to generate the phrase tokens.\n2. **Consult Provided Resources**\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\n3. **Generate Phrase Tokens Methodically**\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\n4. **Ensure Strict Compliance**\n   - Follow all instructions exactly as given.\n   - Do **not** invent or assume any information not provided.\n   - Avoid adding any unlisted elements.\n5. **Review for Accuracy**\n   - Verify that the tokens fully represent the user's query and adhere to all guidelines.\n   - Check for any errors or omissions before finalizing.\n\n### **Response Format**\n\nThe response should be well-formatted JSON as shown below:\n{\n  \"rephrasedQuery\": \"\",\n  \"reasoning\": {\n    \"assumptions\": \"\",\n    \"stepByStepThinking\": \"\"\n  },\n  \"tokens\": \"\",\n  \"formulas\": [\n    {\n      \"name\": \"\",\n      \"expression\": \"\"\n    }\n  ]\n}\n"}]}, {"timestamp": 1735846000678000, "fields": [{"key": "event.log", "type": "string", "value": "Completion Request = headers {\n  tenant_id: \"fa794c92-1470-11ee-8c81-cbe72\"\n  client_id: \"eureka-searcher\"\n  request_id: \"aabeff3e-ee32-4e8f-848b-c8b6a8636a65\"\n  org_id: \"33363357\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"**Task:**\\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\\n\\nYou are given the following:\\n1. Definition & rules of the language.\\n2. References for which functions and keywords to use with examples.\\n3. Table Schema with column names, their data type, synonyms & sample values.\\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\\n5. Chat History, if any, containing all the previous interactions between user and assistant.\\n\\n**Definitions and Rules of the Phrase Token Language:**\\n\\n### **Key Definitions**\\n\\n1. **Column Types**\\n\\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\\n\\n2. **Output Columns**\\n\\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `\\' \\'`.\\n- **Examples**:\\n  - **Output Column**: [column]\\n  - **Filter Applied**: [column] = \\'value\\'\\n\\n3. **Filters**\\n\\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `\\' \\'`. The general format is `[column] operator \\'value\\'`.\\n- **Filter Logic**:\\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\\n    - **Example**: [column] = \\'value1\\' [column] = \\'value2\\'\\n    *(Matches records where `column` is \\'value1\\' **or** \\'value2\\')*\\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\\n    - **Example**: [column1] = \\'value1\\' [column2] = \\'value2\\'\\n    *(Matches records where `column1` is \\'value1\\' **and** `column2` is \\'value2\\')*\\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].\\'value\\'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\\n\\n4. **Formulas**\\n\\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\\n- **Usage**:\\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\\n- **Structure**:\\n  - **Formulas Field**:\\n    \\\"formulas\\\": [\\n      {\\n        \\\"name\\\": \\\"<formula_name>\\\",\\n        \\\"expression\\\": \\\"<formula_expression>\\\"\\n      },\\n      ...\\n    ]\\n  - **Tokens Field Example**:\\n    {\\n      \\\"tokens\\\": \\\"[Formula Name] by [Column Name]\\\",\\n      \\\"formulas\\\": [ ... ]\\n    }\\n- **Key Points**:\\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user\\'s query, for example, pick a relevant substring of the query.\\n  - **Expressions**:\\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\\n    - Refer to the examples provided later for formula syntax and better understanding.\\n  - **Dependencies**:\\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\", then you cannot apply \\\"sum ( unique users )\\\"\\\" because it is already aggregated i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n**5. Column and Value Selection**\\n\\n- **Column Selection**:\\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user\\'s query. Columns are sorted by relevance in the schema, with the most relevant first.\\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\\n\\n- **Value Selection**:\\n  - **Use Schema Values**:\\n    - When applying filters, prioritize sample values from the schema that match the user\\'s query.\\n  - **If Values Are Missing**:\\n    - If matching values are not found in the schema, you may:\\n    - Select the nearest appropriate value from the schema.\\n    - Generate a suitable value based on the query context.\\n    Choose the approach that best captures the user\\'s intent, without bias towards the schema.\\n  - **Ensure Relevance**:\\n    - Only include values that make sense within the context of the query.\\n    - Avoid illogical or irrelevant values.\\n\\n### **Table Schema**\\n\\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\\n\\nCREATE TABLE TSEMBED (\\nId text /*. Group: TSEMBED Dev Org - Opps.*/,\\nPartneraccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nExpectedrevenue int /*. Group: TSEMBED Dev Org - Opps.*/,\\nOwnerid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nStagename text /*. Group: TSEMBED Dev Org - Opps.*/,\\nType text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAmount int /*. Group: TSEMBED Dev Org - Opps.*/,\\nDescription text /*. Group: TSEMBED Dev Org - Opps.*/,\\nForecastcategory text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nIswon int /*. Group: TSEMBED Dev Org - Opps.*/,\\nClosedate date /* Current year is 2025.. Group: TSEMBED Dev Org - Opps.*/,\\nName text /*. Group: TSEMBED Dev Org - Opps.*/,\\nCreateddate date /*. Group: TSEMBED Dev Org - Opps.*/,\\nLastactivitydate text /*. Group: TSEMBED Dev Org - Opps.*/,\\nIsclosed int /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nParentid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nNumberofemployees int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinggeocodeaccuracy text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nSF Opp Link text /*. Group: TSEMBED Dev Org - Opps.*/,\\nBillingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAnnualrevenue int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccountnumber text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nActive C text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nTickersymbol text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Ownerid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nCreatedbyid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nWebsite text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nPhone text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Type text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Createddate date /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Name text /*. Group: TSEMBED Dev Org Export - Account.*/)\\n\\n### **Supported Keyword and Function References with Examples**\\n\\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\\n\\n**Relevant Keywords for Phrase Tokens**\\n\\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\\n\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [Id] sort by [Expectedrevenue]\\\",\\\"bottom 25 [Id] sort by count [Id]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Expectedrevenue] ascending\\\",\\\"sort by count [Id] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[Id] begins with \\'a0_value0\\'\\\",\\\"[Id] ends with \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[Id] contains \\'a0_value0\\'\\\",\\\"[Id] contains \\'a0_value0\\' \\'a0_value1\\'\\\",\\\"[Id] not contains \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Expectedrevenue] [Id] = \\'a0_value0\\' vs [Id] = \\'a0_value1\\'\\\",\\\"[Expectedrevenue] [Closedate] = \\'this year\\' vs [Closedate] = \\'last year\\'\\\",\\\"[Amount] [Partneraccountid] = \\'a1_value0\\' vs [Partneraccountid] = \\'a1_value1\\' vs [Partneraccountid] = \\'a1_value2\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [Id]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [Id]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[Id] in ([Id] [Id] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [Id] sort by [Amount] descending)\\\",\\\"[Id] not in ([Id] [Id] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [Id] sort by [Amount] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Expectedrevenue]\\\",\\\"average [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [Id]\\\"]}\\n\\n\\n**Function References for Formulas**\\n\\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\\n\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( Id )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Expectedrevenue > 10), Id )\\\",\\\"count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Expectedrevenue, Id, Partneraccountid)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Expectedrevenue, Id)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Expectedrevenue ) , { Id } , { } )\\\",\\\"group_aggregate ( stddev ( Expectedrevenue ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Expectedrevenue ), { Id , Partneraccountid }, { day_of_week ( Closedate ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Amount ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( Partneraccountid ), query_groups ( ) + { Id }, query_filters ( ) - { Partneraccountid } )\\\",\\\"group_aggregate ( unique count ( Partneraccountid ) , query_groups ( ) + { Id }, query_filters ( ) + { Partneraccountid != \\'a1_value0\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Expectedrevenue)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Expectedrevenue, 2, 1, Id)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Expectedrevenue, 2, 1, Id )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Expectedrevenue , 99 , \\'asc\\' )\\\",\\\"percentile ( Expectedrevenue , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( Id )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Expectedrevenue > 10) , Id )\\\",\\\"unique_count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"Id in { \\'a0_value0\\' , \\'a0_value1\\' }\\\",\\\"Id not in { \\'a0_value0\\' , \\'a0_value1\\' ,\\'a0_value2\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Closedate >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Closedate <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Closedate, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else if ( Amount > 100 and Id = \\'a0_value0\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Closedate ) = 2024\\\",\\\"month ( Closedate ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\n**Date Keywords**\\n\\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\\n\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Closedate] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 7 days\\'\\\",\\\"[Closedate] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Closedate] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Closedate] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Closedate] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march\\'\\\",\\\"[Closedate] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Closedate] = \\'Saturday\\'\\\",\\\"[Closedate] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march 2024\\'\\\",\\\"[Closedate] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Closedate] = \\'this day\\'\\\",\\\"[Closedate] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 2 quarters for each year\\'\\\",\\\"[Closedate] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Closedate].yearly\\\",\\\"[Closedate].quarterly\\\",\\\"[Closedate].monthly\\\",\\\"[Closedate].weekly\\\",\\\"[Closedate].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Closedate] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].daily month over month\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly year over year\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Closedate].\\'day of month\\'\\\",\\\"[Closedate].\\'month of year\\'\\\",\\\"[Closedate].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Closedate] = \\'10 months ago\\'\\\",\\\"[Closedate] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Closedate] detailed\\\"]}\\n\\n\\n**Instructions:**\\n\\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\\n\\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\\n\\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today\\'s date in\\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\\n\\n### **Additional Rules for Generating Phrase Tokens**\\n\\n1. **Including Output Columns**\\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\\n    - Choose the output column based on the context of the query.\\n    - **Example**:\\n       - *Invalid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"}`\\n       - *Valid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column3]\\\"}`\\n2. **Expanding Month Abbreviations**\\n    - Expand month abbreviations (e.g., \\'Jan\\', \\'Feb\\') to full names when used as **date filters** in phrase tokens.\\n    - Do **not** expand them if used as filter values in **non-date columns**.\\n3. **Count and Unique Count Usage**\\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\\n    - Do **not** apply them to **measures** or numeric columns.\\n4. **Numeric Comparisons in Formulas**\\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\\n5. **Representing Date Filters in Formulas**\\n    - In **formula expressions**, represent date filters like `\\'last month\\'` using functions such as `diff_months` or `to_date` that calculate the date range.\\n6. **Avoid Redundant Formulas**\\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don\\'t need to create an additional formula for it.\\n    - **Example to Avoid**:\\n       - `{\\\"tokens\\\": \\\"[Measure]\\\", \\\"formulas\\\": [{\\\"name\\\": \\\"Total Measure\\\", \\\"expression\\\": \\\"sum(Measure)\\\"}]}`\\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\\n7. **Filtering on Null Values**\\n    - When filtering on **null values**, encapsulate `\\'null\\'` in single quotes and curly braces `{ }`, like `\\'{null}\\'`.\\n    - **Example**: `[column] != \\'{null}\\'`\\n8. **Growth of phrase cannot co-exist with versus phrase**\\n    - If there is a growth phrase like: \\'growth of sum [measure] by [date] [date].monthly\\', it cannot co-exist with \\'[attribute] = \\'value\\' vs [attribute] = \\'value\\'\\'. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = \\'value\\' [attribute] = \\'value\\' where \\'vs\\' keyword is removed.\\n9. **Avoid Counting and Grouping on the Same Column**\\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\\n10. **Avoid adding \\'by\\' keyword to date bucket**\\n    - When using date bucket in the final answer, do not add \\'by\\' keyword. Remove by keyword and just add date bucket alone.\\n11. **Query-on-Query Intent**:\\n     - **Definition**:\\n        - Occurs when the user\\'s query references previous results or includes subquery logic, similar to SQL subqueries.\\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\\342\\200\\224conditions on the **same column** that cannot be true simultaneously in a single row.\\n     - **Handling Subqueries**:\\n        - Represent such queries using the `in` or `not in` keywords.\\n     - **Syntax**:\\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\\n     - **Application**:\\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\\n        - To determine if a query has subquery intent, rephrase the user\\'s query to make it clear and unambiguous, accurately capturing their intent.\\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\\n\\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\\n\\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\\n\\nsub_queries represent a separate view (similar to SQL view) of data that is joined to main query using anchor_column_id. The return_column_id is the output of the sub_query. Both anchor_column_id & return_column_id need to be output columns in the sub_queries\\' tokens field for the join to be valid. sub_queries are used for cohort analysis, where multiple sub_queries represent cohorts & their labels (exposed through formulas) are used for cohort analysis using some measure or aggregated attribute in the main query.\\n\\n**Single Query Examples**\\n\\n{\\\"query\\\":\\\"show me Expectedrevenue for week of 11/19/2024\\\",\\\"desc\\\":\\\"First find the week number using IN filter, then apply a filter on the year 2024 to only take into account week number in current year\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [Closedate] in ( [Closedate] [Closedate].\\'week of year\\' [Closedate] = \\'11/19/2024\\' ) [Closedate] = \\'2024\\'\\\"}\\n{\\\"query\\\":\\\"show me Expectedrevenue for week starting from 11/19/2024\\\",\\\"desc\\\":\\\"This requires assuming the first day of the week is mentioned in the query (start date) & then use \\'between\\' to calculate the week range of 7 days.\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [Closedate] between \\'11/19/2024\\' and \\'11/25/2024\\'\\\"}\\n{\\\"query\\\":\\\"take the 3 biggest Id by Expectedrevenue. show me how their Expectedrevenue has changed over the years\\\",\\\"desc\\\":\\\"First, find the top 3 Id by Expectedrevenue. Then, for these Id, display their Expectedrevenue per year to show how it has changed over the years by using IN sub-query to join with the main query.\\\",\\\"tokens\\\":\\\"[Id] [Expectedrevenue] [Closedate].yearly [Id] in ( [Id] top 3 [Id] sort by sum [Expectedrevenue] descending )\\\"}\\n{\\\"query\\\":\\\"show me Id that have Expectedrevenue in the last three months and have no Expectedrevenue prior\\\",\\\"desc\\\":\\\"In this query, we use a sub query to filter the Id that have no Expectedrevenue prior.\\\",\\\"tokens\\\":\\\"[Id] [Expectedrevenue] > 0 [Closedate] = \\'last 3 months\\' [Id] not in ( [Id] [Expectedrevenue] > 0 [Closedate] < \\'last 3 months\\' )\\\"}\\n{\\\"query\\\":\\\"show Ids with the highest Expectedrevenue this year\\\",\\\"tokens\\\":\\\"[Id] sort by [Expectedrevenue] descending [Closedate] = \\'this year\\'\\\"}\\n{\\\"query\\\":\\\"display Ids for which Expectedrevenue increased this year\\\",\\\"desc\\\":\\\"To compute this first compute Expectedrevenue per Id this year and last year. Then compute for which Id it increased by doing a difference.\\\",\\\"tokens\\\":\\\"[Id] [date] = \\'this year\\' [Expectedrevenue increased this year] = \\'true\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue last year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue this year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue increased this year\\\",\\\"expression\\\":\\\"Expectedrevenue this year > Expectedrevenue last year\\\"}]}\\n{\\\"query\\\":\\\"show Id with highest Expectedrevenue in every year.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [Id] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\\\"}\\n{\\\"query\\\":\\\"Identify the top 10 Id in Expectedrevenue, and for each, show the top 3 Partneraccountid with the highest Amount\\\",\\\"tokens\\\":\\\"top 3 [Partneraccountid] for each [Id] sort by [Amount] [categorize based on rank] = \\'top 10 Id by Expectedrevenue\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"categorize based on rank\\\",\\\"expression\\\":\\\"if ( top Id by Expectedrevenue <= 10 ) then \\'top 10 Id by Expectedrevenue\\' else \\'everything else\\'\\\"}],\\\"sub_queries\\\":[{\\\"tokens\\\":\\\"[Id] [rank based on Expectedrevenue]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"rank based on Expectedrevenue\\\",\\\"expression\\\":\\\"rank ( sum ( Expectedrevenue ) , \\'desc\\' )\\\"}],\\\"cohort_config\\\":{\\\"name\\\":\\\"top Id by Expectedrevenue\\\",\\\"return_column_id\\\":\\\"rank based on Expectedrevenue\\\",\\\"anchor_column_id\\\":\\\"Id\\\"}}]}\\n{\\\"query\\\":\\\"display top 10 Ids by Partneraccountid\\\",\\\"desc\\\":\\\"Since the user did not specify on what criteria to return top 10 attributes, select a measure i.e. numeric column on best effort basis automatically.\\\",\\\"tokens\\\":\\\"top 10 [Id] sort by [Expectedrevenue] by [Partneraccountid]\\\"}\\n{\\\"query\\\":\\\"show me bottom 3 Expectedrevenue Ids in q2 2023 vs bottom 3 Expectedrevenue Ids in q1 2023\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [categorize based on rank] [categorize based on rank] = \\'bottom 3 ranked Id by Expectedrevenue in q2 2023\\' [categorize based on rank] = \\'bottom 3 ranked Id by Expectedrevenue in q1 2023\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"categorize based on rank\\\",\\\"expression\\\":\\\"if ( bottom ranked Id by Expectedrevenue in q2 2023 <= 3 ) then \\'bottom 3 ranked Id by Expectedrevenue in q2 2023\\' else if ( bottom ranked Id by Expectedrevenue in q1 2023 <= 3 ) then \\'bottom 3 ranked Id by Expectedrevenue in q1 2023\\' else \\'everything else\\'\\\"}],\\\"sub_queries\\\":[{\\\"tokens\\\":\\\"[Id] [rank based on Expectedrevenue] [Closedate] = \\'q2 2023\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"rank based on Expectedrevenue\\\",\\\"expression\\\":\\\"rank ( sum ( Expectedrevenue ) , \\'asc\\' )\\\"}],\\\"cohort_config\\\":{\\\"name\\\":\\\"bottom ranked Id by Expectedrevenue in q2 2023\\\",\\\"return_column_id\\\":\\\"rank based on Expectedrevenue\\\",\\\"anchor_column_id\\\":\\\"Id\\\"}},{\\\"tokens\\\":\\\"[Id] [rank based on Expectedrevenue] [Closedate] = \\'q1 2023\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"rank based on Expectedrevenue\\\",\\\"expression\\\":\\\"rank ( sum ( Expectedrevenue ) , \\'asc\\' )\\\"}],\\\"cohort_config\\\":{\\\"name\\\":\\\"bottom ranked Id by Expectedrevenue in q1 2023\\\",\\\"return_column_id\\\":\\\"rank based on Expectedrevenue\\\",\\\"anchor_column_id\\\":\\\"Id\\\"}}]}\\n{\\\"query\\\":\\\"show Expectedrevenue per two weeks\\\",\\\"desc\\\":\\\"two weeks is bi-weekly aggregated sum of a measure. To achieve this, first use weekly date bucket in main query, so that the date granularity can be used in the moving_sum formula. Then use moving_sum formula to calculate sum of Expectedrevenue with (1,0) parameters, which implies a window size of 2 weeks, previous & current week.\\\",\\\"tokens\\\":\\\"[Expectedrevenue per two weeks] [Closedate].weekly\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue per two weeks\\\",\\\"expression\\\":\\\"moving_sum ( Expectedrevenue , 1 , 0 , Closedate )\\\"}]}\\n{\\\"query\\\":\\\"what is the ratio of the a1_value0 & a1_value1 to the total Id\\\",\\\"desc\\\":\\\"In this query, we are determining the ratio of records where \\'Partneraccountid\\' is either \\'a1_value0\\' or \\'a1_value1\\' to the total count of \\'Id\\'. The main query groups the data based on any specified groupings and applies any existing filters (though none are specified here). The total count of \\'Id\\' (denominator) is calculated using \\'group_aggregate(count(Id), query_groups(), query_filters())\\', which counts \\'Id\\' across the groupings and filters of the main query. The numerator, representing the total where \\'Partneraccountid\\' equals \\'a1_value0\\' or \\'a1_value1\\', is obtained using \\'group_aggregate(count(Partneraccountid), query_groups(), query_filters() + { Partneraccountid = \\'a1_value0\\', Partneraccountid = \\'a1_value1\\' })\\', adding filters for the specific \\'Partneraccountid\\' values. The ratio is then determined by dividing the numerator by the denominator.\\\",\\\"tokens\\\":\\\"[ratio] [total Id]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"total Id\\\",\\\"expression\\\":\\\"group_aggregate ( count ( Id ) , query_groups ( ) , query_filters ( ) )\\\"},{\\\"name\\\":\\\"total Partneraccountid with Partneraccountid = a1_value0 & Partneraccountid = a1_value1\\\",\\\"expression\\\":\\\"group_aggregate ( count ( Partneraccountid ) , query_groups ( ) , query_filters ( ) + { Partneraccountid = \\'a1_value0\\' , Partneraccountid = \\'a1_value1\\' } )\\\"},{\\\"name\\\":\\\"ratio\\\",\\\"expression\\\":\\\"total Partneraccountid with Partneraccountid = a1_value0 & Partneraccountid = a1_value1 / total Id\\\"}]}\\n{\\\"query\\\":\\\"show distinct values for Partneraccountid\\\",\\\"desc\\\":\\\"Returning just the output column acts as a group by <column> in SQL\\\",\\\"tokens\\\":\\\"[Partneraccountid]\\\"}\\n{\\\"query\\\":\\\"show Ids that have Expectedrevenue more than 95 percentile and show me their Expectedrevenue\\\",\\\"desc\\\":\\\"This template is designed to identify the attributes whose associated \\'measure\\' values exceed the 95th percentile of all \\'measure\\' values in the dataset. It includes a calculation of the 95th percentile value and then applies a filter to count only those attributes where their \\'measure\\' exceeds this percentile threshold. Comparison with percentile function can only be done with an aggregation like sum, average so on. So sum ( measure ) is used for comparison.\\\",\\\"tokens\\\":\\\"[Id] [Expectedrevenue more than 95 percentile] = true [Expectedrevenue]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue more than 95 percentile\\\",\\\"expression\\\":\\\"rank_percentile ( sum ( Expectedrevenue ) , \\'desc\\' ) > 95\\\"}]}\\n{\\\"query\\\":\\\"what is total count Id in march 2024 as percentage of total count Partneraccountid in march 2023\\\",\\\"tokens\\\":\\\"[percentage of Id in March 2024 over Partneraccountid in March 2023]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Total Count Id in March 2024\\\",\\\"expression\\\":\\\"count_if( ( Closedate >= to_date ( \\'03/01/2024\\' , \\'%m/%d/%Y\\' ) and Closedate <= to_date ( \\'03/31/2024\\' , \\'%m/%d/%Y\\' ) ), Id)\\\"},{\\\"name\\\":\\\"Total Count Partneraccountid in March 2023\\\",\\\"expression\\\":\\\"count_if( ( Closedate >= to_date ( \\'03/01/2023\\' , \\'%m/%d/%Y\\' ) and Closedate <= to_date ( \\'03/31/2023\\' , \\'%m/%d/%Y\\' ) ), Partneraccountid)\\\"},{\\\"name\\\":\\\"percentage of Id in March 2024 over Partneraccountid in March 2023\\\",\\\"expression\\\":\\\"Total Count Id in March 2024 / Total Count Partneraccountid in March 2023 * 100\\\"}]}\"\n}\nchat_messages {\n  role: USER\n  content: \"### **User Query**\\n\\nUser Query: show details\\n\\n\\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\\342\\200\\224only their names should be included.\\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\\n\\n\\n### **Step-by-Step Guidance for Generating Phrase Tokens**\\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\\n\\n1. **Rephrase the User\\'s Query**\\n   - Rephrase the latest user\\'s query to make it clear and unambiguous, accurately capturing the user\\'s intent.\\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\\n   - The rephrased query should be easily translatable into SQL for data retrieval.\\n   - Use the rephrased query to generate the phrase tokens.\\n2. **Consult Provided Resources**\\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\\n3. **Generate Phrase Tokens Methodically**\\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\\n4. **Ensure Strict Compliance**\\n   - Follow all instructions exactly as given.\\n   - Do **not** invent or assume any information not provided.\\n   - Avoid adding any unlisted elements.\\n5. **Review for Accuracy**\\n   - Verify that the tokens fully represent the user\\'s query and adhere to all guidelines.\\n   - Check for any errors or omissions before finalizing.\\n\\n### **Response Format**\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"rephrasedQuery\\\": \\\"\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"\\\",\\n    \\\"stepByStepThinking\\\": \\\"\\\"\\n  },\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\": [\\n    {\\n      \\\"name\\\": \\\"\\\",\\n      \\\"expression\\\": \\\"\\\"\\n    }\\n  ]\\n}\"\n}\n"}]}, {"timestamp": 1735846004044000, "fields": [{"key": "event.log", "type": "string", "value": "Response from LLM Gateway:\ncompletions {\n  id: \"chatcmpl-AlL840mJIwZ8K9AbaCErv4lWryOol\"\n  created: 1735846000\n  choices {\n    text: \"{\\n  \\\"rephrasedQuery\\\": \\\"Show all details\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The user wants to see all available details from the table.\\\",\\n    \\\"stepByStepThinking\\\": \\\"Since the user query is asking for all details, we will include all columns in the output.\\\"\\n  },\\n  \\\"tokens\\\": \\\"[Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] [Description] [Forecastcategory] [Accountid] [Iswon] [Closedate] [Name] [Createddate] [Lastactivitydate] [Isclosed] [Shippingstreet] [Shippinglatitude] [Parentid] [Numberofemployees] [Shippingcountry] [Billinggeocodeaccuracy] [SF Opp Link] [Billingstreet] [Annualrevenue] [Billingcountry] [Billinglatitude] [Accountnumber] [Shippingcity] [Active C] [Tickersymbol] [Account Ownerid] [Createdbyid] [Shippingpostalcode] [Billingcity] [Shippinglongitude] [Website] [Phone] [Billingpostalcode] [Account Type] [Account Createddate] [Account Name]\\\"\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 260\n    prompt_tokens: 11200\n    total_tokens: 11460\n  }\n}\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "e8f186a4e6c680ca", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "79b85f33981ba580"}], "startTime": 1735846000666000, "duration": 231, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "279739f2836eb221", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "79b85f33981ba580"}], "startTime": 1735846000667000, "duration": 77, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "787ec6b0c2f69392", "flags": 1, "operationName": "FTLTemplateRendering", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "79b85f33981ba580"}], "startTime": 1735846000668000, "duration": 93, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "2dbd0fe692ad2e3b", "flags": 1, "operationName": "getResponseFromTimedRPCCall", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ab44467670247a60"}], "startTime": 1735846000681000, "duration": 3361731, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "ef4400db5b36ba3a", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "2dbd0fe692ad2e3b"}], "startTime": 1735846000681000, "duration": 3361639, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "cfcbe7291d77a462", "flags": 1, "operationName": "eureka.llmgateway.LLMCompletionsService/Complete", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ef4400db5b36ba3a"}], "startTime": 1735846000683000, "duration": 3359092, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.llmgateway.LLMCompletionsService/Complete"}, {"key": "peer.address", "type": "string", "value": "10.252.226.13:33976"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "517e7de62d18f9f3", "flags": 1, "operationName": "getModelsForTenantAndOrg", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "d6453bc3d6f45cba"}], "startTime": 1735846000684000, "duration": 170, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "9b654f1c1174ba89", "flags": 1, "operationName": "complete", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "cfcbe7291d77a462"}], "startTime": 1735846000684000, "duration": 3358018, "tags": [{"key": "component", "type": "string", "value": "eureka-llm-gateway"}, {"key": "pod.name", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc"}, {"key": "x.request.id", "type": "string", "value": "aabeff3e-ee32-4e8f-848b-c8b6a8636a65"}, {"key": "self.ip", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc/10.252.224.191"}, {"key": "client.name", "type": "string", "value": "eureka-searcher"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846004042000, "fields": [{"key": "event.log", "type": "string", "value": "Completions response = completions {\n  id: \"chatcmpl-AlL840mJIwZ8K9AbaCErv4lWryOol\"\n  created: 1735846000\n  choices {\n    text: \"{\\n  \\\"rephrasedQuery\\\": \\\"Show all details\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"The user wants to see all available details from the table.\\\",\\n    \\\"stepByStepThinking\\\": \\\"Since the user query is asking for all details, we will include all columns in the output.\\\"\\n  },\\n  \\\"tokens\\\": \\\"[Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] [Description] [Forecastcategory] [Accountid] [Iswon] [Closedate] [Name] [Createddate] [Lastactivitydate] [Isclosed] [Shippingstreet] [Shippinglatitude] [Parentid] [Numberofemployees] [Shippingcountry] [Billinggeocodeaccuracy] [SF Opp Link] [Billingstreet] [Annualrevenue] [Billingcountry] [Billinglatitude] [Accountnumber] [Shippingcity] [Active C] [Tickersymbol] [Account Ownerid] [Createdbyid] [Shippingpostalcode] [Billingcity] [Shippinglongitude] [Website] [Phone] [Billingpostalcode] [Account Type] [Account Createddate] [Account Name]\\\"\\n}\"\n    index: 0\n    finish_reason: \"stop\"\n  }\n  usage {\n    completion_tokens: 260\n    prompt_tokens: 11200\n    total_tokens: 11460\n  }\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "d6453bc3d6f45cba", "flags": 1, "operationName": "getLLMConfigMap", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "9b261e2d271b5328"}], "startTime": 1735846000684000, "duration": 214, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "9b261e2d271b5328", "flags": 1, "operationName": "getProtoResponseWithCustomModel", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "9b654f1c1174ba89"}], "startTime": 1735846000684000, "duration": 3357511, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846000686000, "fields": [{"key": "event.log", "type": "string", "value": "Completions proto request: headers {\n  tenant_id: \"fa794c92-1470-11ee-8c81-cbe72\"\n  client_id: \"eureka-searcher\"\n  request_id: \"aabeff3e-ee32-4e8f-848b-c8b6a8636a65\"\n  org_id: \"33363357\"\n  model_type: GPT4_O\n}\nconfig_overrides {\n  azure_config {\n    max_tokens: 4000\n    temperature: 0.0\n    n: 1\n    stop: \"###\"\n    cache_level: 2\n    llm_api: CHAT_API\n    strict_json_output: true\n  }\n}\nforce_fetch: false\nchat_messages {\n  role: SYSTEM\n  content: \"**Task:**\\nYour task is to generate **phrase tokens** (a new simple keyword-based language) for a given natural language query.\\n\\nYou are given the following:\\n1. Definition & rules of the language.\\n2. References for which functions and keywords to use with examples.\\n3. Table Schema with column names, their data type, synonyms & sample values.\\n4. Examples of similar queries & their tokens from users feedback mappings along with few synthetic examples.\\n5. Chat History, if any, containing all the previous interactions between user and assistant.\\n\\n**Definitions and Rules of the Phrase Token Language:**\\n\\n### **Key Definitions**\\n\\n1. **Column Types**\\n\\n- **Measure**: Columns with numeric data types (`int`, `double`, `long`, `float`).\\n- **Attribute**: Columns with categorical data types (`text`, `bool`, `date`).\\n\\n2. **Output Columns**\\n\\n- **Definition**: Columns that are enclosed in square brackets `[]` without any filters applied. They represent the columns used in `SELECT` clauses.\\n- **Syntax**: In phrase tokens, column names are enclosed within `[]`. Filters applied to them are specified immediately after the column using an operator and the value enclosed within single quotes `\\' \\'`.\\n- **Examples**:\\n  - **Output Column**: [column]\\n  - **Filter Applied**: [column] = \\'value\\'\\n\\n3. **Filters**\\n\\n- **Syntax**: Filters are applied to columns using operators such as `=`, `!=`, `<`, `>`, `<=`, `>=`, with filter values enclosed in single quotes `\\' \\'`. The general format is `[column] operator \\'value\\'`.\\n- **Filter Logic**:\\n  - **Same Column (OR Condition)**: Multiple filters on the **same column** behave as **OR** conditions.\\n    - **Example**: [column] = \\'value1\\' [column] = \\'value2\\'\\n    *(Matches records where `column` is \\'value1\\' **or** \\'value2\\')*\\n  - **Different Columns (AND Condition)**: Filters on **different columns** behave as **AND** conditions.\\n    - **Example**: [column1] = \\'value1\\' [column2] = \\'value2\\'\\n    *(Matches records where `column1` is \\'value1\\' **and** `column2` is \\'value2\\')*\\n- **Note on Alternate Syntax**: Filters can also be represented in the form `[column] = [column].\\'value\\'`. However, when **generating** phrase tokens, **do not use** this syntax; it is provided here only for understanding purposes.\\n\\n4. **Formulas**\\n\\n- **Definition**: In the phrase token language, a **formula** is a named expression used to perform calculations or aggregations on data columns. Formulas allow you to define complex computations that can be referenced by name within your tokens.\\n- **Usage**:\\n  - **Declaration**: Formulas are declared in the `formulas` field as a list of objects, each containing a `name` and an `expression`.\\n  - **Reference in Tokens**: The formula names can be included in the `tokens` field to use the computed values in your queries.\\n- **Structure**:\\n  - **Formulas Field**:\\n    \\\"formulas\\\": [\\n      {\\n        \\\"name\\\": \\\"<formula_name>\\\",\\n        \\\"expression\\\": \\\"<formula_expression>\\\"\\n      },\\n      ...\\n    ]\\n  - **Tokens Field Example**:\\n    {\\n      \\\"tokens\\\": \\\"[Formula Name] by [Column Name]\\\",\\n      \\\"formulas\\\": [ ... ]\\n    }\\n- **Key Points**:\\n  - **Relevant Naming**: Choose formula names that are meaningful and relevant to the user\\'s query, for example, pick a relevant substring of the query.\\n  - **Expressions**:\\n    - Use functions provided in the function reference (details provided later) and operators to define the calculation in the `expression` field.\\n    - Do **not** include column names in brackets `[ ]` inside formula expressions.\\n    - Refer to the examples provided later for formula syntax and better understanding.\\n  - **Dependencies**:\\n    - Formulas can reference other formulas if needed; ensure all **dependent formulas** are included in the `formulas` field.\\n    - A **dependent formula** is any formula that is referenced or required for the calculation of another formula. This includes any aggregations or calculations that rely on the results of other formulas.\\n    - DO NOT add aggregation on an already aggregated formula or column. Example: formula name: \\\"unique users\\\", expression: \\\"unique count ( user id )\\\", then you cannot apply \\\"sum ( unique users )\\\"\\\" because it is already aggregated i.e. \\\"group_aggregate ( sum ( unique users ) , { } , { } )\\\" is incorrect because it will fail formula grammar check. The correct expression should be: \\\"group_aggregate ( unique users , { } , { } )\\\" i.e. without any aggregation function applied on aggregated formula/column.\\n\\n**5. Column and Value Selection**\\n\\n- **Column Selection**:\\n  - **Use Provided Columns Only**: Use **only** the columns listed in the schema. Do not invent or use any columns not provided.\\n  - **Prioritize Relevant Columns**: Focus on columns most relevant to the user\\'s query. Columns are sorted by relevance in the schema, with the most relevant first.\\n  - **Best Effort Selection**: If an exact match is not found, select the closest matching column from the schema. Do not return an empty answer.\\n\\n- **Value Selection**:\\n  - **Use Schema Values**:\\n    - When applying filters, prioritize sample values from the schema that match the user\\'s query.\\n  - **If Values Are Missing**:\\n    - If matching values are not found in the schema, you may:\\n    - Select the nearest appropriate value from the schema.\\n    - Generate a suitable value based on the query context.\\n    Choose the approach that best captures the user\\'s intent, without bias towards the schema.\\n  - **Ensure Relevance**:\\n    - Only include values that make sense within the context of the query.\\n    - Avoid illogical or irrelevant values.\\n\\n### **Table Schema**\\n\\n- **Description**: This section provides the table schema, including column names, data types, synonyms, and sample values. Use this schema to select appropriate columns and values when generating phrase tokens.\\n\\nCREATE TABLE TSEMBED (\\nId text /*. Group: TSEMBED Dev Org - Opps.*/,\\nPartneraccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingstate text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nExpectedrevenue int /*. Group: TSEMBED Dev Org - Opps.*/,\\nOwnerid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nStagename text /*. Group: TSEMBED Dev Org - Opps.*/,\\nType text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAmount int /*. Group: TSEMBED Dev Org - Opps.*/,\\nDescription text /*. Group: TSEMBED Dev Org - Opps.*/,\\nForecastcategory text /*. Group: TSEMBED Dev Org - Opps.*/,\\nAccountid text /*. Group: TSEMBED Dev Org - Opps.*/,\\nIswon int /*. Group: TSEMBED Dev Org - Opps.*/,\\nClosedate date /* Current year is 2025.. Group: TSEMBED Dev Org - Opps.*/,\\nName text /*. Group: TSEMBED Dev Org - Opps.*/,\\nCreateddate date /*. Group: TSEMBED Dev Org - Opps.*/,\\nLastactivitydate text /*. Group: TSEMBED Dev Org - Opps.*/,\\nIsclosed int /*. Group: TSEMBED Dev Org - Opps.*/,\\nShippingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nParentid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nNumberofemployees int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinggeocodeaccuracy text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nSF Opp Link text /*. Group: TSEMBED Dev Org - Opps.*/,\\nBillingstreet text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAnnualrevenue int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcountry text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillinglatitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccountnumber text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nActive C text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nTickersymbol text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Ownerid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nCreatedbyid text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingcity text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nShippinglongitude text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nWebsite text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nPhone text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nBillingpostalcode int /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Type text /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Createddate date /*. Group: TSEMBED Dev Org Export - Account.*/,\\nAccount Name text /*. Group: TSEMBED Dev Org Export - Account.*/)\\n\\n### **Supported Keyword and Function References with Examples**\\n\\n- **Description**: This section lists the allowed functions and keywords that can be used in the phrase token language, along with their descriptions and usage examples.\\n\\n**Relevant Keywords for Phrase Tokens**\\n\\n*(These keywords are used in the `tokens` field and are **not** relevant for formula expressions, which have different functions.)*\\n\\n{\\\"function\\\":\\\"top|bottom n\\\",\\\"description\\\":\\\"Generates the top (or bottom) n items from a sorted result. Substitute \\'n\\' with number specified by the user in query. When \\'sort by\\' is used with \\'top\\', it automatically implies sorting is done in descending order. If \\'bottom\\' is used with \\'sort by\\', then it is in ascending order by default.\\\",\\\"example\\\":[\\\"top 10 [Id] sort by [Expectedrevenue]\\\",\\\"bottom 25 [Id] sort by count [Id]\\\"]}\\n{\\\"function\\\":\\\"sort by\\\",\\\"example\\\":[\\\"sort by [Expectedrevenue] ascending\\\",\\\"sort by count [Id] descending\\\"]}\\n{\\\"function\\\":\\\"by\\\",\\\"description\\\":\\\"Treats the measure as an attribute and groups the result set by it. Not used in formula expressions.\\\",\\\"example\\\":[\\\"by [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"begins|ends with\\\",\\\"description\\\":\\\"Returns all column values that begins or ends with a value defined in quotes.\\\",\\\"example\\\":[\\\"[Id] begins with \\'a0_value0\\'\\\",\\\"[Id] ends with \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"contains|not contains\\\",\\\"description\\\":\\\"Returns all column values that contains (or not contains) a value or any of the values defined in quotes. Use this when there is NO EXACT value match. The syntax below is for tokens language only, not formula.\\\",\\\"example\\\":[\\\"[Id] contains \\'a0_value0\\'\\\",\\\"[Id] contains \\'a0_value0\\' \\'a0_value1\\'\\\",\\\"[Id] not contains \\'a0_value0\\'\\\"]}\\n{\\\"function\\\":\\\"vs\\\",\\\"description\\\":\\\"Versus keyword to compare different values. The comparison is done based on a numeric value. Example: revenue [region] = \\'east\\' vs [region] = \\'west\\'. This compares revenue from different region values i.e. east and west. Comparisons can be done on measures or aggregations. Syntax for versus is always of the form: [measure|count [attribute]] [attribute] = \\'value1\\' vs [attribute] = \\'value2\\'\\\",\\\"example\\\":[\\\"[Expectedrevenue] [Id] = \\'a0_value0\\' vs [Id] = \\'a0_value1\\'\\\",\\\"[Expectedrevenue] [Closedate] = \\'this year\\' vs [Closedate] = \\'last year\\'\\\",\\\"[Amount] [Partneraccountid] = \\'a1_value0\\' vs [Partneraccountid] = \\'a1_value1\\' vs [Partneraccountid] = \\'a1_value2\\'\\\"]}\\n{\\\"function\\\":\\\"growth of\\\",\\\"description\\\":\\\"The growth of keyword is used to calculate the percentage change in measure for a particular value of an attribute over a specified time period.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].\\'daily\\'\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(DISTINCT expression) to count unique values. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"unique count [Id]\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT COUNT(expression) to count all rows. Used on attribute i.e. columns with type text, unless explicit feedback given by users.\\\",\\\"example\\\":[\\\"count [Id]\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Performs Query in|not in query searches (intersection of two sets or handling subquery logic similar to SQL subqueries). Use when the user\\'s query references previous results, includes subquery intent, or has mutually exclusive conditions on the same attribute that cannot be true simultaneously in a single row. Represent such queries using \\'in\\' or \\'not in\\' keywords. Must match last attribute before keyword with first attribute inside subsearch. Doesn\\'t support use of \\'vs\\' keyword. Syntax: [attribute] in|not in ([attribute] subsearch), where \\'subsearch\\' can be another set of tokens. For complex queries, rephrase or break into sub-parts to clarify intent; when showing absence of a measure or column, its best to first find its presence and then exclude those rows using \\'not in\\'.\\\",\\\"example\\\":[\\\"[Id] in ([Id] [Id] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [Id] sort by [Amount] descending)\\\",\\\"[Id] not in ([Id] [Id] begins with \\'a0_value0\\' [Expectedrevenue] > 100 top 10 [Id] sort by [Amount] descending)\\\"]}\\n{\\\"function\\\":\\\"sum|average|min|max\\\",\\\"description\\\":\\\"Similar to SQL\\'s SELECT SUM(expression) (or AVG(expression)) to sum (or average) values for a measure i.e. numeric column or numeric expression.\\\",\\\"example\\\":[\\\"sum [Expectedrevenue]\\\",\\\"average [Expectedrevenue]\\\"]}\\n{\\\"function\\\":\\\"for each\\\",\\\"description\\\":\\\"Used on attributes i.e. columns with type text.\\\",\\\"example\\\":[\\\"for each [Id]\\\"]}\\n\\n\\n**Function References for Formulas**\\n\\n*(These functions are valid **only** for formula expressions. Use only relevant functions if required.)*\\n\\n{\\\"function\\\":\\\"average\\\",\\\"description\\\":\\\"Returns the average of all the values of a column.\\\",\\\"example\\\":[\\\"average ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"count\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column.\\\",\\\"example\\\":[\\\"count ( Id )\\\"]}\\n{\\\"function\\\":\\\"count_if\\\",\\\"description\\\":\\\"Returns the number of rows in the table containing the column that meet a given criteria.\\\",\\\"example\\\":[\\\"count_if ( (Expectedrevenue > 10), Id )\\\",\\\"count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"cumulative_average\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the average of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_average (Expectedrevenue, Id, Partneraccountid)\\\"]}\\n{\\\"function\\\":\\\"cumulative_sum\\\",\\\"description\\\":\\\"Takes a measure and one or more attributes. Returns the sum of the measure, accumulated by the attribute(s) in the order specified.\\\",\\\"example\\\":[\\\"cumulative_sum (Expectedrevenue, Id)\\\"]}\\n{\\\"function\\\":\\\"group_aggregate\\\",\\\"description\\\":\\\"**Summary of the `group_aggregate` Function**\\n\\nThe `group_aggregate` function is a versatile tool for performing aggregations on SQL databases with customized grouping and filtering options. It allows for dynamic manipulation of groupings and filters beyond what is specified in the main query, enabling complex calculations like percentages and contributions.\\n\\n**Function Syntax:**\\n```\\ngroup_aggregate(aggregate_expression, grouping_set, filter_set)\\n```\\n\\n**Parameters:**\\n\\n1. **`aggregate_expression`**: The aggregation operation to perform. Examples include:\\n   - `sum(measure0)`\\n   - `count(attribute0)`\\n   - `unique count (attribute0)`\\n   - `average(measure1)`\\n   - `avg(measure1)`\\n\\n2. **`grouping_set`**: Defines how data is grouped during aggregation. It can be modified using:\\n   - **`{ }`**: An empty set indicating no groupings are used from the main query.\\n   - **`query_groups()`**: Includes all groupings from the main query.\\n   - **`query_groups() + {column1, column2, ...}`**: Adds specific columns to the groupings from the main query.\\n   - **`query_groups() - {column1, column2, ...}`**: Excludes specific columns from the groupings of the main query.\\n\\n3. **`filter_set`**: Specifies filters to apply before aggregation. It can be adjusted using:\\n   - **`{ }`**: An empty set indicating no filters from the main query are used.\\n   - **`query_filters()`**: Includes all filters from the main query.\\n   - **`query_filters() + {condition}`**: Adds new filter conditions to those from the main query.\\n   - **`query_filters() - {column_name}`**: Excludes filters applied on the specified column from the main query.\\n\\n**Usage Notes:**\\n\\n- **Grouping Modifications:**\\n  - **No Groupings**: Using `{ }` means the aggregation ignores all groupings from the main query.\\n  - **Include All Groupings**: `query_groups()` uses all existing groupings from the main query.\\n  - **Exclude Groupings**: Subtract columns from `query_groups()` to exclude them.\\n    - Example: `query_groups() - {attribute0}` removes `attribute0` from the grouping.\\n  - **Add Groupings**: Add columns to `query_groups()` to include additional groupings.\\n    - Example: `query_groups() + {attribute1}` adds `attribute1` to the grouping.\\n\\n- **Filter Modifications:**\\n  - **No Filters**: Using `{ }` means the aggregation ignores all filters from the main query.\\n  - **Include All Filters**: `query_filters()` applies all existing filters from the main query.\\n  - **Exclude Filters**: Subtract columns from `query_filters()` to exclude their filters.\\n    - Example: `query_filters() - {column_name}` removes filters on `column_name`.\\n  - **Add Filters**: Add conditions to `query_filters()` for additional filtering.\\n    - Example: `query_filters() + {attribute0 = \\'value\\'}` adds a new filter condition.\\n\\n- **Process `grouping_set`**:\\n  - **Empty Grouping `{ }`**: Perform the aggregation without grouping (i.e., over the entire dataset or filtered dataset).\\n  - **`query_groups()`**: Use the groupings defined in the main query.\\n  - **Modify Groupings with `+` and `-`**:\\n    - **Adding Groupings**: Combine main query groupings with additional columns.\\n    - **Excluding Groupings**: Remove specified columns from the main query groupings.\\n\\n- **Process `filter_set`**:\\n  - **Empty Filters `{ }`**: Apply no filters from the main query.\\n  - **`query_filters()`**: Use filters defined in the main query.\\n  - **Modify Filters with `+` and `-`**:\\n    - **Adding Filters**: Include additional filter conditions.\\n    - **Excluding Filters**: Remove filters related to specific columns.\\n\\n- **Apply Filters and Groupings**: Before performing the aggregation, apply the defined filters and groupings to the dataset.\\n\\n- **Return Correct Results**: Ensure the function returns accurate aggregation results based on the modified groupings and filters.\\n\\n**Key Concepts:**\\n\\n- **Flexible Grouping**: The ability to adjust groupings allows for calculations at different aggregation levels without altering the main query structure.\\n\\n- **Dynamic Filtering**: Modifying filters lets users focus on specific subsets of data or exclude certain conditions, enabling more precise analysis.\\n\\n- **Percentage Calculations**: By adjusting groupings and filters, you can compute numerators and denominators needed for percentage-based metrics.\\n\\n- **Combination of Operations**: The `group_aggregate` function supports combining multiple operations, such as excluding a grouping while adding a filter, for sophisticated queries.\\n\\n**Summary of Operators:**\\n\\n- **Groupings**:\\n  - **`{ }`**: No groupings.\\n  - **`query_groups()`**: Use main query groupings.\\n  - **`+ {columns}`**: Add columns to groupings.\\n  - **`- {columns}`**: Remove columns from groupings.\\n\\n- **Filters**:\\n  - **`{ }`**: No filters.\\n  - **`query_filters()`**: Use main query filters.\\n  - **`+ {conditions}`**: Add filter conditions.\\n  - **`- {columns}`**: Remove filters on columns.\\n\\nBy following these guidelines and understanding the examples provided, you can implement the `group_aggregate` function to perform advanced aggregations with customized grouping and filtering, enabling detailed data analysis and reporting.\\\",\\\"example\\\":[\\\"group_aggregate ( sum ( Expectedrevenue ) , { Id } , { } )\\\",\\\"group_aggregate ( stddev ( Expectedrevenue ) , { } , { } )\\\",\\\"group_aggregate ( variance ( Expectedrevenue ), { Id , Partneraccountid }, { day_of_week ( Closedate ) = \\'friday\\' } )\\\",\\\"group_aggregate ( average ( Amount ), query_groups ( ), query_filters ( ) )\\\",\\\"group_aggregate ( count ( Partneraccountid ), query_groups ( ) + { Id }, query_filters ( ) - { Partneraccountid } )\\\",\\\"group_aggregate ( unique count ( Partneraccountid ) , query_groups ( ) + { Id }, query_filters ( ) + { Partneraccountid != \\'a1_value0\\' } )\\\"]}\\n{\\\"function\\\":\\\"max\\\",\\\"description\\\":\\\"Returns the maximum value of a column.\\\",\\\"example\\\":[\\\"max ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"min\\\",\\\"description\\\":\\\"Returns the minimum value of a column.\\\",\\\"example\\\":[\\\"min (Expectedrevenue)\\\"]}\\n{\\\"function\\\":\\\"moving_average\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1, Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the average of the measure over the given window. The attributes are the ordering columns used to compute the moving average.\\\",\\\"example\\\":[\\\"moving_average (Expectedrevenue, 2, 1, Id)\\\"]}\\n{\\\"function\\\":\\\"moving_sum\\\",\\\"description\\\":\\\"Takes a measure, two integers to define the window to aggregate over, and one or more attributes. The window is (current - Num1\\342\\200\\246Current + Num2) with both end points being included in the window. For example, \\'1,1\\' will have a window size of 3. To define a window that begins before Current, specify a negative number for Num2. Returns the sum of the measure over the given window. The attributes are the ordering columns used to compute the moving minimum.\\\",\\\"example\\\":[\\\"moving_sum ( Expectedrevenue, 2, 1, Id )\\\"]}\\n{\\\"function\\\":\\\"percentile\\\",\\\"description\\\":\\\"Returns the value of the measure from the row that has a rank_percentile less than or equal to N.\\\",\\\"example\\\":[\\\"percentile ( Expectedrevenue , 99 , \\'asc\\' )\\\",\\\"percentile ( Expectedrevenue , 95 , \\'desc\\' )\\\"]}\\n{\\\"function\\\":\\\"stddev\\\",\\\"description\\\":\\\"Returns the standard deviation of all values of a column.\\\",\\\"example\\\":[\\\"stddev ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"sum\\\",\\\"description\\\":\\\"Returns the sum of all the values of a numeric column i.e. measure.\\\",\\\"example\\\":[\\\"sum ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"unique count\\\",\\\"description\\\":\\\"Returns the number of unique values of a column.\\\",\\\"example\\\":[\\\"unique count ( Id )\\\"]}\\n{\\\"function\\\":\\\"unique_count_if\\\",\\\"description\\\":\\\"Returns the number of unique values of a column provided it meets a criteria.\\\",\\\"example\\\":[\\\"unique_count_if ( (Expectedrevenue > 10) , Id )\\\",\\\"unique_count_if ( (Expectedrevenue > 10) , month ( Closedate ) )\\\"]}\\n{\\\"function\\\":\\\"variance\\\",\\\"description\\\":\\\"Returns the variance of all the values of a column.\\\",\\\"example\\\":[\\\"variance ( Expectedrevenue )\\\"]}\\n{\\\"function\\\":\\\"in|not in\\\",\\\"description\\\":\\\"Function that takes a column name and a list of values, used in \\'formulas\\' field only. It checks each column value against the list of values in the formula, and returns true if the column value matches one of the values.\\\",\\\"example\\\":[\\\"Id in { \\'a0_value0\\' , \\'a0_value1\\' }\\\",\\\"Id not in { \\'a0_value0\\' , \\'a0_value1\\' ,\\'a0_value2\\' }\\\"]}\\n{\\\"function\\\":\\\"to_date\\\",\\\"description\\\":\\\"Accepts a date represented as an integer or text string, and a second string parameter that can include strptime date formatting elements. Replaces all the valid strptime date formatting elements with their string counterparts and returns the result. Does not accept epoch formatted dates as input. Does not accept datetime values. Only accepts month, day, and year. Can be used to represent raw date keywords like \\'march 2024\\' in formula language, since \\'march 2024\\' is not a valid formula keyword but only valid in main tokens query.\\\",\\\"example\\\":[\\\"to_date (\\'2024-05-16\\', \\'%Y-%m-%d\\')\\\",\\\"Closedate >= to_date (\\'03/01/2024\\', \\'%m/%d/%Y\\') and Closedate <= to_date (\\'03/31/2024\\', \\'%m/%d/%Y\\')\\\"]}\\n{\\\"function\\\":\\\"diff_days|diff_hours|diff_minutes|diff_months|diff_quarters|diff_time|diff_weeks|diff_years\\\",\\\"description\\\":\\\"Subtracts the second date from the first date and returns the result in number of days|hours|minutes|so on. Can be used to represent date keywords \\'this year\\', \\'this day\\', \\'last year\\', \\'last 2 quarters\\', so on in formula language.\\\",\\\"example\\\":[\\\"diff_days ( Closedate, today ( ) ) = 0\\\",\\\"diff_years ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_quarters ( 01/01/2014, 03/31/2014 ) = 0\\\",\\\"diff_months ( 12/25/2013, 01/01/2014 ) = -1\\\",\\\"diff_days ( 01/15/2014, 01/17/2014 ) = -2\\\"]}\\n{\\\"function\\\":\\\"if-else\\\",\\\"description\\\":\\\"if-else statements similar to the ones in programming languages, only use them in \\'formulas\\' field.\\\",\\\"example\\\":[\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else \\'Low\\'\\\",\\\"if ( Expectedrevenue > 100 ) then \\'High\\' else if ( Amount > 100 and Id = \\'a0_value0\\' ) then \\'Medium\\' else \\'Low\\'\\\"]}\\n{\\\"function\\\":\\\"year|month|day\\\",\\\"description\\\":\\\"Functions below that are used to extract year, month, and day from a date column or even today() function.\\\",\\\"example\\\":[\\\"year ( Closedate ) = 2024\\\",\\\"month ( Closedate ) = \\'June\\'\\\",\\\"day ( today ( ) ) = 2\\\"]}\\n\\n\\n**Date Keywords**\\n\\n*(These date keywords are valid **only** in the `tokens` field and are **not valid** for formula expressions.)*\\n\\n{\\\"function\\\":\\\"last|next month\\\",\\\"example\\\":[\\\"[Closedate] = \\'last month\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n days\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 7 days\\'\\\",\\\"[Closedate] = \\'next 7 days\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n months\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 months\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n quarters\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 quarters\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n weeks\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 weeks\\'\\\"]}\\n{\\\"function\\\":\\\"last|next n years\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 12 years\\'\\\"]}\\n{\\\"function\\\":\\\"last|next quarter\\\",\\\"example\\\":[\\\"[Closedate] = \\'last quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last|next week\\\",\\\"example\\\":[\\\"[Closedate] = \\'last week\\'\\\"]}\\n{\\\"function\\\":\\\"last|next year\\\",\\\"example\\\":[\\\"[Closedate] = \\'last year\\'\\\"]}\\n{\\\"function\\\":\\\"<month>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march\\'\\\",\\\"[Closedate] = \\'april\\'\\\"]}\\n{\\\"function\\\":\\\"<year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'2024\\'\\\"]}\\n{\\\"function\\\":\\\"<weekday>\\\",\\\"example\\\":[\\\"[Closedate] = \\'Saturday\\'\\\",\\\"[Closedate] = \\'Monday\\'\\\"]}\\n{\\\"function\\\":\\\"<month_year>\\\",\\\"example\\\":[\\\"[Closedate] = \\'march 2024\\'\\\",\\\"[Closedate] = \\'april 2024\\'\\\"]}\\n{\\\"function\\\":\\\"this day|month|year|quarter|week\\\",\\\"example\\\":[\\\"[Closedate] = \\'this day\\'\\\",\\\"[Closedate] = \\'this quarter\\'\\\"]}\\n{\\\"function\\\":\\\"last n quarters|weeks|months|years|days for each year|month|week|quarter|day\\\",\\\"example\\\":[\\\"[Closedate] = \\'last 2 quarters for each year\\'\\\",\\\"[Closedate] = \\'last 10 weeks for each month\\'\\\"]}\\n{\\\"function\\\":\\\"yearly|quarterly|monthly|weekly|daily|hourly\\\",\\\"description\\\":\\\"These are date bucketing keywords that are also used in SQL expressions in GROUP BY\\\",\\\"example\\\":[\\\"[Closedate].yearly\\\",\\\"[Closedate].quarterly\\\",\\\"[Closedate].monthly\\\",\\\"[Closedate].weekly\\\",\\\"[Closedate].daily\\\"]}\\n{\\\"function\\\":\\\"between ... and ...\\\",\\\"description\\\":\\\"Selects records where the date is between the two specified dates. The dates must be in the format \\'MM/dd/yyyy\\'. \\'january 2024\\' type of dates are not supported, they have to be in a date format.\\\",\\\"example\\\":[\\\"[Closedate] between \\'01/30/2012\\' and \\'01/30/2014\\'\\\"]}\\n{\\\"function\\\":\\\"month over month|quarter over quarter|year over year|week over week\\\",\\\"description\\\":\\\"Only used with \\'growth of\\' keyword. The \\'year over year\\' keyword compares data between the same time period from different years. For example, it will allow you to compare sales from June of this year to the sales from June of last year. The \\'month over month\\' keyword compares data between the same time period from different months.\\\",\\\"example\\\":[\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].daily month over month\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly year over year\\\",\\\"growth of [Expectedrevenue] by [Closedate] [Closedate].monthly quarter over quarter\\\"]}\\n{\\\"function\\\":\\\"day|week of month|quarter|year\\\",\\\"description\\\":\\\"Returns the day|week number of the month quarter or year for the date value. Example, \\'day of month\\' for 13th Jan would be 13. \\'day of year\\' for 13th Jan would be 13. \\'week of month\\' for 13th Jan would be 2.\\\",\\\"example\\\":[\\\"[Closedate].\\'day of month\\'\\\",\\\"[Closedate].\\'month of year\\'\\\",\\\"[Closedate].\\'week of year\\'\\\"]}\\n{\\\"function\\\":\\\"n months|weeks|days|quarters|years ago\\\",\\\"example\\\":[\\\"[Closedate] = \\'10 months ago\\'\\\",\\\"[Closedate] = \\'5 years ago\\'\\\"]}\\n{\\\"function\\\":\\\"detailed\\\",\\\"description\\\":\\\"Is similar to GROUP BY <date_column_name> in SQL but also returns date value down to the millisecond granularity\\\",\\\"example\\\":[\\\"[Closedate] detailed\\\"]}\\n\\n\\n**Instructions:**\\n\\n - **Strict Adherence**: You must **strictly adhere** to using only the functions and keywords listed in this section. **Do not introduce** any functions or keywords that are not provided here.\\n\\n - **Understanding Usage**: Go through each keyword and function, read the descriptions and examples, and ensure you understand how they are used. These will play an important role in generating accurate phrase tokens.\\n\\n - **Focus on Date Keywords**: Date keywords are especially crucial. Pay close attention to their correct usage as they significantly affect the interpretation of time-based queries. If you cannot express the query using the provided date keywords, and the query can be solved using actual dates, then use specific dates. **For reference today\\'s date in\\n   MM/dd/yyyy format: 01/02/2025**. Ensure that you use dates in the specified format.\\n\\n### **Additional Rules for Generating Phrase Tokens**\\n\\n1. **Including Output Columns**\\n    - If the final `tokens` contain only filters, add a relevant **output column** to make the answer valid.\\n    - Choose the output column based on the context of the query.\\n    - **Example**:\\n       - *Invalid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\'\\\"}`\\n       - *Valid*: `{\\\"tokens\\\": \\\"[column1] = \\'value1\\' [column2] = \\'value2\\' [column3]\\\"}`\\n2. **Expanding Month Abbreviations**\\n    - Expand month abbreviations (e.g., \\'Jan\\', \\'Feb\\') to full names when used as **date filters** in phrase tokens.\\n    - Do **not** expand them if used as filter values in **non-date columns**.\\n3. **Count and Unique Count Usage**\\n    - `count` and `unique count` keywords (or formula functions) are allowed **only** on **attributes** (text or date type columns).\\n    - Do **not** apply them to **measures** or numeric columns.\\n4. **Numeric Comparisons in Formulas**\\n    - Perform comparisons between numeric (i.e measure) columns **within formulas**, not directly in the `tokens` field.\\n    - **Invalid in Tokens**: `[Measure] > sum [Measure]`\\n    - **Valid in Formula Expression**: `Measure > sum(Measure)`\\n5. **Representing Date Filters in Formulas**\\n    - In **formula expressions**, represent date filters like `\\'last month\\'` using functions such as `diff_months` or `to_date` that calculate the date range.\\n6. **Avoid Redundant Formulas**\\n    - Do not create formulas that duplicate default behaviors. In the `tokens` field, `[column]` implicitly includes the default aggregation (such as `sum` for measures). Therefore, unless further calculation or a different aggregation is required, you don\\'t need to create an additional formula for it.\\n    - **Example to Avoid**:\\n       - `{\\\"tokens\\\": \\\"[Measure]\\\", \\\"formulas\\\": [{\\\"name\\\": \\\"Total Measure\\\", \\\"expression\\\": \\\"sum(Measure)\\\"}]}`\\n       - *Explanation*: `[Measure]` already implies `sum(Measure)`; the formula is redundant.\\n7. **Filtering on Null Values**\\n    - When filtering on **null values**, encapsulate `\\'null\\'` in single quotes and curly braces `{ }`, like `\\'{null}\\'`.\\n    - **Example**: `[column] != \\'{null}\\'`\\n8. **Growth of phrase cannot co-exist with versus phrase**\\n    - If there is a growth phrase like: \\'growth of sum [measure] by [date] [date].monthly\\', it cannot co-exist with \\'[attribute] = \\'value\\' vs [attribute] = \\'value\\'\\'. If this happens, pick the filters from versus keyword to make it work with growth of phrase, i.e. [attribute] = \\'value\\' [attribute] = \\'value\\' where \\'vs\\' keyword is removed.\\n9. **Avoid Counting and Grouping on the Same Column**\\n    - When performing a count aggregation on a column, do not group by that same column unless your intention is to count occurrences of each distinct value. Grouping by the same column while counting will typically return a count of one for each unique value, which may not provide meaningful insight. Instead, if you want the total count of non-null entries in the column, use the count without grouping or consider grouping by a different, relevant column.\\n10. **Avoid adding \\'by\\' keyword to date bucket**\\n    - When using date bucket in the final answer, do not add \\'by\\' keyword. Remove by keyword and just add date bucket alone.\\n11. **Query-on-Query Intent**:\\n     - **Definition**:\\n        - Occurs when the user\\'s query references previous results or includes subquery logic, similar to SQL subqueries.\\n        - Can also be applied in cases when the query includes **mutually exclusive conditions**\\342\\200\\224conditions on the **same column** that cannot be true simultaneously in a single row.\\n     - **Handling Subqueries**:\\n        - Represent such queries using the `in` or `not in` keywords.\\n     - **Syntax**:\\n        - `[Attribute] in ( [Attribute] Subquery_Tokens )`\\n     - **Application**:\\n        - Use this approach both for queries building upon previous responses and for single queries that have subquery intent.\\n        - To determine if a query has subquery intent, rephrase the user\\'s query to make it clear and unambiguous, accurately capturing their intent.\\n        - If the query is complex, break it into sub-parts to simplify understanding and effectively address each component.\\n        - When the query requires showing the absence of a measure or column, it is best to first find the presence of the measure or column and then exclude those rows using `not in`.\\n\\n### **SYNTHETIC EXAMPLES OF NL QUERY TO PHRASE TOKENS TRANSLATION**\\n\\nBelow are synthetic examples of natural language (NL) queries translated into phrase tokens, including the usage of formulas. These examples are provided to help you understand how to construct phrase tokens according to the defined rules and guidelines of the phrase token language.\\n\\nsub_queries represent a separate view (similar to SQL view) of data that is joined to main query using anchor_column_id. The return_column_id is the output of the sub_query. Both anchor_column_id & return_column_id need to be output columns in the sub_queries\\' tokens field for the join to be valid. sub_queries are used for cohort analysis, where multiple sub_queries represent cohorts & their labels (exposed through formulas) are used for cohort analysis using some measure or aggregated attribute in the main query.\\n\\n**Single Query Examples**\\n\\n{\\\"query\\\":\\\"show me Expectedrevenue for week of 11/19/2024\\\",\\\"desc\\\":\\\"First find the week number using IN filter, then apply a filter on the year 2024 to only take into account week number in current year\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [Closedate] in ( [Closedate] [Closedate].\\'week of year\\' [Closedate] = \\'11/19/2024\\' ) [Closedate] = \\'2024\\'\\\"}\\n{\\\"query\\\":\\\"show me Expectedrevenue for week starting from 11/19/2024\\\",\\\"desc\\\":\\\"This requires assuming the first day of the week is mentioned in the query (start date) & then use \\'between\\' to calculate the week range of 7 days.\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [Closedate] between \\'11/19/2024\\' and \\'11/25/2024\\'\\\"}\\n{\\\"query\\\":\\\"take the 3 biggest Id by Expectedrevenue. show me how their Expectedrevenue has changed over the years\\\",\\\"desc\\\":\\\"First, find the top 3 Id by Expectedrevenue. Then, for these Id, display their Expectedrevenue per year to show how it has changed over the years by using IN sub-query to join with the main query.\\\",\\\"tokens\\\":\\\"[Id] [Expectedrevenue] [Closedate].yearly [Id] in ( [Id] top 3 [Id] sort by sum [Expectedrevenue] descending )\\\"}\\n{\\\"query\\\":\\\"show me Id that have Expectedrevenue in the last three months and have no Expectedrevenue prior\\\",\\\"desc\\\":\\\"In this query, we use a sub query to filter the Id that have no Expectedrevenue prior.\\\",\\\"tokens\\\":\\\"[Id] [Expectedrevenue] > 0 [Closedate] = \\'last 3 months\\' [Id] not in ( [Id] [Expectedrevenue] > 0 [Closedate] < \\'last 3 months\\' )\\\"}\\n{\\\"query\\\":\\\"show Ids with the highest Expectedrevenue this year\\\",\\\"tokens\\\":\\\"[Id] sort by [Expectedrevenue] descending [Closedate] = \\'this year\\'\\\"}\\n{\\\"query\\\":\\\"display Ids for which Expectedrevenue increased this year\\\",\\\"desc\\\":\\\"To compute this first compute Expectedrevenue per Id this year and last year. Then compute for which Id it increased by doing a difference.\\\",\\\"tokens\\\":\\\"[Id] [date] = \\'this year\\' [Expectedrevenue increased this year] = \\'true\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue last year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = -1 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue this year\\\",\\\"expression\\\":\\\"group_aggregate ( sum ( Expectedrevenue ) , query_groups ( ) , { diff_years ( Closedate, today ( ) ) = 0 } )\\\"},{\\\"name\\\":\\\"Expectedrevenue increased this year\\\",\\\"expression\\\":\\\"Expectedrevenue this year > Expectedrevenue last year\\\"}]}\\n{\\\"query\\\":\\\"show Id with highest Expectedrevenue in every year.\\\",\\\"desc\\\":\\\"\\'for each\\' phrase is used when using \\'top x\\' phrase with a date bucketing filter.\\\",\\\"tokens\\\":\\\"top 10 [Id] sort by sum [Expectedrevenue] for each [Closedate] [Closedate].yearly\\\"}\\n{\\\"query\\\":\\\"Identify the top 10 Id in Expectedrevenue, and for each, show the top 3 Partneraccountid with the highest Amount\\\",\\\"tokens\\\":\\\"top 3 [Partneraccountid] for each [Id] sort by [Amount] [categorize based on rank] = \\'top 10 Id by Expectedrevenue\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"categorize based on rank\\\",\\\"expression\\\":\\\"if ( top Id by Expectedrevenue <= 10 ) then \\'top 10 Id by Expectedrevenue\\' else \\'everything else\\'\\\"}],\\\"sub_queries\\\":[{\\\"tokens\\\":\\\"[Id] [rank based on Expectedrevenue]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"rank based on Expectedrevenue\\\",\\\"expression\\\":\\\"rank ( sum ( Expectedrevenue ) , \\'desc\\' )\\\"}],\\\"cohort_config\\\":{\\\"name\\\":\\\"top Id by Expectedrevenue\\\",\\\"return_column_id\\\":\\\"rank based on Expectedrevenue\\\",\\\"anchor_column_id\\\":\\\"Id\\\"}}]}\\n{\\\"query\\\":\\\"display top 10 Ids by Partneraccountid\\\",\\\"desc\\\":\\\"Since the user did not specify on what criteria to return top 10 attributes, select a measure i.e. numeric column on best effort basis automatically.\\\",\\\"tokens\\\":\\\"top 10 [Id] sort by [Expectedrevenue] by [Partneraccountid]\\\"}\\n{\\\"query\\\":\\\"show me bottom 3 Expectedrevenue Ids in q2 2023 vs bottom 3 Expectedrevenue Ids in q1 2023\\\",\\\"tokens\\\":\\\"[Expectedrevenue] [categorize based on rank] [categorize based on rank] = \\'bottom 3 ranked Id by Expectedrevenue in q2 2023\\' [categorize based on rank] = \\'bottom 3 ranked Id by Expectedrevenue in q1 2023\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"categorize based on rank\\\",\\\"expression\\\":\\\"if ( bottom ranked Id by Expectedrevenue in q2 2023 <= 3 ) then \\'bottom 3 ranked Id by Expectedrevenue in q2 2023\\' else if ( bottom ranked Id by Expectedrevenue in q1 2023 <= 3 ) then \\'bottom 3 ranked Id by Expectedrevenue in q1 2023\\' else \\'everything else\\'\\\"}],\\\"sub_queries\\\":[{\\\"tokens\\\":\\\"[Id] [rank based on Expectedrevenue] [Closedate] = \\'q2 2023\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"rank based on Expectedrevenue\\\",\\\"expression\\\":\\\"rank ( sum ( Expectedrevenue ) , \\'asc\\' )\\\"}],\\\"cohort_config\\\":{\\\"name\\\":\\\"bottom ranked Id by Expectedrevenue in q2 2023\\\",\\\"return_column_id\\\":\\\"rank based on Expectedrevenue\\\",\\\"anchor_column_id\\\":\\\"Id\\\"}},{\\\"tokens\\\":\\\"[Id] [rank based on Expectedrevenue] [Closedate] = \\'q1 2023\\'\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"rank based on Expectedrevenue\\\",\\\"expression\\\":\\\"rank ( sum ( Expectedrevenue ) , \\'asc\\' )\\\"}],\\\"cohort_config\\\":{\\\"name\\\":\\\"bottom ranked Id by Expectedrevenue in q1 2023\\\",\\\"return_column_id\\\":\\\"rank based on Expectedrevenue\\\",\\\"anchor_column_id\\\":\\\"Id\\\"}}]}\\n{\\\"query\\\":\\\"show Expectedrevenue per two weeks\\\",\\\"desc\\\":\\\"two weeks is bi-weekly aggregated sum of a measure. To achieve this, first use weekly date bucket in main query, so that the date granularity can be used in the moving_sum formula. Then use moving_sum formula to calculate sum of Expectedrevenue with (1,0) parameters, which implies a window size of 2 weeks, previous & current week.\\\",\\\"tokens\\\":\\\"[Expectedrevenue per two weeks] [Closedate].weekly\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue per two weeks\\\",\\\"expression\\\":\\\"moving_sum ( Expectedrevenue , 1 , 0 , Closedate )\\\"}]}\\n{\\\"query\\\":\\\"what is the ratio of the a1_value0 & a1_value1 to the total Id\\\",\\\"desc\\\":\\\"In this query, we are determining the ratio of records where \\'Partneraccountid\\' is either \\'a1_value0\\' or \\'a1_value1\\' to the total count of \\'Id\\'. The main query groups the data based on any specified groupings and applies any existing filters (though none are specified here). The total count of \\'Id\\' (denominator) is calculated using \\'group_aggregate(count(Id), query_groups(), query_filters())\\', which counts \\'Id\\' across the groupings and filters of the main query. The numerator, representing the total where \\'Partneraccountid\\' equals \\'a1_value0\\' or \\'a1_value1\\', is obtained using \\'group_aggregate(count(Partneraccountid), query_groups(), query_filters() + { Partneraccountid = \\'a1_value0\\', Partneraccountid = \\'a1_value1\\' })\\', adding filters for the specific \\'Partneraccountid\\' values. The ratio is then determined by dividing the numerator by the denominator.\\\",\\\"tokens\\\":\\\"[ratio] [total Id]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"total Id\\\",\\\"expression\\\":\\\"group_aggregate ( count ( Id ) , query_groups ( ) , query_filters ( ) )\\\"},{\\\"name\\\":\\\"total Partneraccountid with Partneraccountid = a1_value0 & Partneraccountid = a1_value1\\\",\\\"expression\\\":\\\"group_aggregate ( count ( Partneraccountid ) , query_groups ( ) , query_filters ( ) + { Partneraccountid = \\'a1_value0\\' , Partneraccountid = \\'a1_value1\\' } )\\\"},{\\\"name\\\":\\\"ratio\\\",\\\"expression\\\":\\\"total Partneraccountid with Partneraccountid = a1_value0 & Partneraccountid = a1_value1 / total Id\\\"}]}\\n{\\\"query\\\":\\\"show distinct values for Partneraccountid\\\",\\\"desc\\\":\\\"Returning just the output column acts as a group by <column> in SQL\\\",\\\"tokens\\\":\\\"[Partneraccountid]\\\"}\\n{\\\"query\\\":\\\"show Ids that have Expectedrevenue more than 95 percentile and show me their Expectedrevenue\\\",\\\"desc\\\":\\\"This template is designed to identify the attributes whose associated \\'measure\\' values exceed the 95th percentile of all \\'measure\\' values in the dataset. It includes a calculation of the 95th percentile value and then applies a filter to count only those attributes where their \\'measure\\' exceeds this percentile threshold. Comparison with percentile function can only be done with an aggregation like sum, average so on. So sum ( measure ) is used for comparison.\\\",\\\"tokens\\\":\\\"[Id] [Expectedrevenue more than 95 percentile] = true [Expectedrevenue]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Expectedrevenue more than 95 percentile\\\",\\\"expression\\\":\\\"rank_percentile ( sum ( Expectedrevenue ) , \\'desc\\' ) > 95\\\"}]}\\n{\\\"query\\\":\\\"what is total count Id in march 2024 as percentage of total count Partneraccountid in march 2023\\\",\\\"tokens\\\":\\\"[percentage of Id in March 2024 over Partneraccountid in March 2023]\\\",\\\"formulas\\\":[{\\\"name\\\":\\\"Total Count Id in March 2024\\\",\\\"expression\\\":\\\"count_if( ( Closedate >= to_date ( \\'03/01/2024\\' , \\'%m/%d/%Y\\' ) and Closedate <= to_date ( \\'03/31/2024\\' , \\'%m/%d/%Y\\' ) ), Id)\\\"},{\\\"name\\\":\\\"Total Count Partneraccountid in March 2023\\\",\\\"expression\\\":\\\"count_if( ( Closedate >= to_date ( \\'03/01/2023\\' , \\'%m/%d/%Y\\' ) and Closedate <= to_date ( \\'03/31/2023\\' , \\'%m/%d/%Y\\' ) ), Partneraccountid)\\\"},{\\\"name\\\":\\\"percentage of Id in March 2024 over Partneraccountid in March 2023\\\",\\\"expression\\\":\\\"Total Count Id in March 2024 / Total Count Partneraccountid in March 2023 * 100\\\"}]}\"\n}\nchat_messages {\n  role: USER\n  content: \"### **User Query**\\n\\nUser Query: show details\\n\\n\\n### **Important Instructions Applicable to Both Single-Shot and Follow-Up Queries**\\n\\n**Optimize Formula Usage**: Begin by attempting to answer the query using standard keywords and functions. If accuracy cannot be achieved without formulas, proceed to use them\\342\\200\\224never compromising on accuracy. When using formulas, revisit and adjust any earlier tokens or keywords added to avoid formulas, eliminating conflicts or redundancies, and ensure the final response is accurate, coherent, and fully aligned with the query\\'s intent.\\n**Include Formula Names in Tokens for Display**: If there are formulas that need to be displayed in the answer, ensure their names are included in the `tokens` field. - This allows the formulas to be rendered properly in the UI. **Do not include** the actual formula expressions directly in the `tokens` field\\342\\200\\224only their names should be included.\\n**Keep Reasoning Concise**: Ensure the assumptions is short & concise, focusing only on changes from the previous query(if any), avoiding unnecessary assumptions for straightforward queries.\\n\\n\\n### **Step-by-Step Guidance for Generating Phrase Tokens**\\nTo ensure accurate and compliant phrase tokens, **think step by step** by following these steps:\\n\\n1. **Rephrase the User\\'s Query**\\n   - Rephrase the latest user\\'s query to make it clear and unambiguous, accurately capturing the user\\'s intent.\\n   - If the query is complex and can be broken into sub-parts, do so to simplify understanding and address each component effectively.\\n   - The rephrased query should be easily translatable into SQL for data retrieval.\\n   - Use the rephrased query to generate the phrase tokens.\\n2. **Consult Provided Resources**\\n   - Review all definitions, rules/instructions, functions, keywords, schema, examples, and previous chat messages provided.\\n3. **Generate Phrase Tokens Methodically**\\n   - Construct phrase tokens one element at a time, applying relevant rules and keywords.\\n   - Before adding each token, check for compatibility with the existing tokens and ensure adherence to all guidelines.\\n   - Ensure the tokens formed so far are accurate, relevant, and free of conflicts or redundancies.\\n4. **Ensure Strict Compliance**\\n   - Follow all instructions exactly as given.\\n   - Do **not** invent or assume any information not provided.\\n   - Avoid adding any unlisted elements.\\n5. **Review for Accuracy**\\n   - Verify that the tokens fully represent the user\\'s query and adhere to all guidelines.\\n   - Check for any errors or omissions before finalizing.\\n\\n### **Response Format**\\n\\nThe response should be well-formatted JSON as shown below:\\n{\\n  \\\"rephrasedQuery\\\": \\\"\\\",\\n  \\\"reasoning\\\": {\\n    \\\"assumptions\\\": \\\"\\\",\\n    \\\"stepByStepThinking\\\": \\\"\\\"\\n  },\\n  \\\"tokens\\\": \\\"\\\",\\n  \\\"formulas\\\": [\\n    {\\n      \\\"name\\\": \\\"\\\",\\n      \\\"expression\\\": \\\"\\\"\\n    }\\n  ]\\n}\"\n}\n"}]}], "processID": "p5", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "1d55e5f8cb2c158f", "flags": 1, "operationName": "getLLMApiProperties", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "9b261e2d271b5328"}], "startTime": 1735846000685000, "duration": 314, "tags": [{"key": "is-custom-model", "type": "string", "value": "false"}, {"key": "api-version", "type": "string", "value": "2024-02-01"}, {"key": "endpoint", "type": "string", "value": "https://llm-staging-east-us-2.openai.azure.com/"}, {"key": "deployment-id", "type": "string", "value": "eureka-gpt-4o"}, {"key": "client-name", "type": "string", "value": "eureka-searcher"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "0d73f5b515c565a4", "flags": 1, "operationName": "getDefaultModel", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "1d55e5f8cb2c158f"}], "startTime": 1735846000685000, "duration": 22, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "88b191f8a7fa7c77", "flags": 1, "operationName": "get", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ce34b0d07f13f589"}], "startTime": 1735846000686000, "duration": 941, "tags": [{"key": "cacheHit", "type": "string", "value": "false"}, {"key": "get.key", "type": "string", "value": "eureka-gpt-4o--1783731967"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=ce34b0d07f13f589; skipping clock skew adjustment"]}, {"traceID": "63f84a6bb2864730", "spanID": "f4e89376083e01b4", "flags": 1, "operationName": "chatCompletion", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ce34b0d07f13f589"}], "startTime": 1735846000690000, "duration": 3350872, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=ce34b0d07f13f589; skipping clock skew adjustment"]}, {"traceID": "63f84a6bb2864730", "spanID": "ff55a635ad672d91", "flags": 1, "operationName": "put", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ce34b0d07f13f589"}], "startTime": 1735846004041000, "duration": 1097, "tags": [{"key": "put.key", "type": "string", "value": "eureka-gpt-4o--1783731967"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p5", "warnings": ["invalid parent span IDs=ce34b0d07f13f589; skipping clock skew adjustment"]}, {"traceID": "63f84a6bb2864730", "spanID": "13bdee1f295a39b8", "flags": 1, "operationName": "getResultFromTML", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "1d935ab3bb6486d5"}], "startTime": 1735846004044000, "duration": 1502, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846004044000, "fields": [{"key": "event.log", "type": "string", "value": "Using TML translation directly: tokens: \"[Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] [Description] [Forecastcategory] [Accountid] [Iswon] [Closedate] [Name] [Createddate] [Lastactivitydate] [Isclosed] [Shippingstreet] [Shippinglatitude] [Parentid] [Numberofemployees] [Shippingcountry] [Billinggeocodeaccuracy] [SF Opp Link] [Billingstreet] [Annualrevenue] [Billingcountry] [Billinglatitude] [Accountnumber] [Shippingcity] [Active C] [Tickersymbol] [Account Ownerid] [Createdbyid] [Shippingpostalcode] [Billingcity] [Shippinglongitude] [Website] [Phone] [Billingpostalcode] [Account Type] [Account Createddate] [Account Name]\"\nreasoning {\n  assumptions: \"The user wants to see all available details from the table.\"\n  step_by_step_thinking: \"Since the user query is asking for all details, we will include all columns in the output.\"\n}\nrephrased_query: \"Show all details\"\n"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "4a685868bcaa350a", "flags": 1, "operationName": "TMLPostProcessor.process", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "13bdee1f295a39b8"}], "startTime": 1735846004044000, "duration": 1299, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846004046000, "fields": [{"key": "event.log", "type": "string", "value": "Post processed tokens: [Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] [Description] [Forecastcategory] [Accountid] [Iswon] [Closedate] [Name] [Createddate] [Lastactivitydate] [Isclosed] [Shippingstreet] [Shippinglatitude] [Parentid] [Numberofemployees] [Shippingcountry] [Billinggeocodeaccuracy] [SF Opp Link] [Billingstreet] [Annualrevenue] [Billingcountry] [Billinglatitude] [Accountnumber] [Shippingcity] [Active C] [Tickersymbol] [Account Ownerid] [Createdbyid] [Shippingpostalcode] [Billingcity] [Shippinglongitude] [Website] [Phone] [Billingpostalcode] [Account Type] [Account Createddate] [Account Name]"}]}], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "461308c71553cb39", "flags": 1, "operationName": "translateTokens", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "4a685868bcaa350a"}], "startTime": 1735846004045000, "duration": 22, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "cafbeba68556ed43", "flags": 1, "operationName": "populateConvAssistDebugInfo", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "44c45fec96bf8358"}], "startTime": 1735846004048000, "duration": 72, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "2ebbb24f0a88c898", "flags": 1, "operationName": "hasIndex", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "fec12f235e4bd239"}], "startTime": 1735846004048000, "duration": 3226, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "c667e1802e54bd42", "flags": 1, "operationName": "updateSearchHistoryRepository", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "ea7b276c13d562f7"}], "startTime": 1735846004048000, "duration": 14898, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "ea7b276c13d562f7", "flags": 1, "operationName": "updateSearchHistoryRepositoryAsync", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "89f32e0b6fee8354"}], "startTime": 1735846004048000, "duration": 14982, "tags": [{"key": "component", "type": "string", "value": "eureka-searcher"}, {"key": "pod.name", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "x.request.id", "type": "string", "value": "aabeff3e-ee32-4e8f-848b-c8b6a8636a65"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "self.ip", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp/10.252.226.13"}, {"key": "tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "fec12f235e4bd239", "flags": 1, "operationName": "createIndex", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "c667e1802e54bd42"}], "startTime": 1735846004048000, "duration": 6506, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "83deac9160348671", "flags": 1, "operationName": "updateDefaultIngestPipeline", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "fec12f235e4bd239"}], "startTime": 1735846004052000, "duration": 2999, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "5ed523f616a44e55", "flags": 1, "operationName": "_update_conversation_save", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "10ae938aa4cbdb5f"}], "startTime": 1735846004052371, "duration": 3589, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "a4a67558d149f94f", "flags": 1, "operationName": "add_conv", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "5ed523f616a44e55"}], "startTime": 1735846004054149, "duration": 1766, "tags": [{"key": "conv.id", "type": "string", "value": "18c492df-bddf-4779-a135-0b543b63c222"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p3", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "d0e974d594cb66f4", "flags": 1, "operationName": "getExistingDocument", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "c667e1802e54bd42"}], "startTime": 1735846004055000, "duration": 3299, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "17befa7c05ab6ef8", "flags": 1, "operationName": "others.others.getExistingDocument.get", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "d0e974d594cb66f4"}], "startTime": 1735846004055000, "duration": 2947, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p4", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "d2564472771bc669", "flags": 1, "operationName": "handleGraphQl.serialize", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "e48b46a0682bdd05"}], "startTime": 1735846004131000, "duration": 303, "tags": [{"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p2", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "95cd6a2190cebe29", "flags": 1, "operationName": "getFilteredResponse", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "63f84a6bb2864730"}], "startTime": 1735846004162116, "duration": 338907, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "d0b1297378d18b35", "flags": 1, "operationName": "StringFilterHeuristic.apply", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "95cd6a2190cebe29"}], "startTime": 1735846004162596, "duration": 74572, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "243d8becea3a7fae", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "d0b1297378d18b35"}], "startTime": 1735846004164157, "duration": 72888, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "span.kind", "type": "string", "value": "client"}, {"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [], "processID": "p1", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "e99817bc73c73eb7", "flags": 1, "operationName": "applyFilterHeuristics", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "181ef86396dccccd"}], "startTime": 1735846004205000, "duration": 205, "tags": [{"key": "query.updated", "type": "string", "value": "false"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846004205000, "fields": [{"key": "event.log", "type": "string", "value": "ValueHeuristicsResponse query: \"[Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] [Description] [Forecastcategory] [Accountid] [Iswon] [Closedate] [Name] [Createddate] [Lastactivitydate] [Isclosed] [Shippingstreet] [Shippinglatitude] [Parentid] [Numberofemployees] [Shippingcountry] [Billinggeocodeaccuracy] [SF Opp Link] [Billingstreet] [Annualrevenue] [Billingcountry] [Billinglatitude] [Accountnumber] [Shippingcity] [Active C] [Tickersymbol] [Account Ownerid] [Createdbyid] [Shippingpostalcode] [Billingcity] [Shippinglongitude] [Website] [Phone] [Billingpostalcode] [Account Type] [Account Createddate] [Account Name]\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "181ef86396dccccd", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "68fcc79665300d04"}], "startTime": 1735846004205000, "duration": 728, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "x.request.id", "type": "string", "value": "aabeff3e-ee32-4e8f-848b-c8b6a8636a65"}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh/10.252.224.19"}, {"key": "x.tenant.id", "type": "string", "value": "fa794c92-1470-11ee-8c81-cbe72"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [{"timestamp": 1735846004205000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic request: ([Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] [Description] [Forecastcategory] [Accountid] [Iswon] [Closedate] [Name] [Createddate] [Lastactivitydate] [Isclosed] [Shippingstreet] [Shippinglatitude] [Parentid] [Numberofemployees] [Shippingcountry] [Billinggeocodeaccuracy] [SF Opp Link] [Billingstreet] [Annualrevenue] [Billingcountry] [Billinglatitude] [Accountnumber] [Shippingcity] [Active C] [Tickersymbol] [Account Ownerid] [Createdbyid] [Shippingpostalcode] [Billingcity] [Shippinglongitude] [Website] [Phone] [Billingpostalcode] [Account Type] [Account Createddate] [Account Name],[])"}]}, {"timestamp": 1735846004205000, "fields": [{"key": "event.log", "type": "string", "value": "Apply string filter heuristic response: query: \"[Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] [Description] [Forecastcategory] [Accountid] [Iswon] [Closedate] [Name] [Createddate] [Lastactivitydate] [Isclosed] [Shippingstreet] [Shippinglatitude] [Parentid] [Numberofemployees] [Shippingcountry] [Billinggeocodeaccuracy] [SF Opp Link] [Billingstreet] [Annualrevenue] [Billingcountry] [Billinglatitude] [Accountnumber] [Shippingcity] [Active C] [Tickersymbol] [Account Ownerid] [Createdbyid] [Shippingpostalcode] [Billingcity] [Shippinglongitude] [Website] [Phone] [Billingpostalcode] [Account Type] [Account Createddate] [Account Name]\"\n"}]}], "processID": "p6", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "68fcc79665300d04", "flags": 1, "operationName": "applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "0baa888e9160735f"}], "startTime": 1735846004205000, "duration": 940, "tags": [{"key": "component", "type": "string", "value": "eureka-metadata-service"}, {"key": "pod.name", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "x.request.id", "type": "string", "value": "c15450a38db120a89967d55db30eed8b"}, {"key": "user.id", "type": "string", "value": ""}, {"key": "self.ip", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh/10.252.224.19"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "0baa888e9160735f", "flags": 1, "operationName": "eureka.metadata.MetadataService/applyValueHeuristic", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "243d8becea3a7fae"}], "startTime": 1735846004205000, "duration": 1626, "tags": [{"key": "component", "type": "string", "value": "java-grpc"}, {"key": "span.kind", "type": "string", "value": "server"}, {"key": "grpc.method_name", "type": "string", "value": "eureka.metadata.MetadataService/applyValueHeuristic"}, {"key": "peer.address", "type": "string", "value": "10.252.226.251:57864"}, {"key": "grpc.status", "type": "string", "value": "OK"}, {"key": "grpc.method_type", "type": "string", "value": "UNARY"}, {"key": "internal.span.format", "type": "string", "value": "proto"}], "logs": [], "processID": "p6", "warnings": null}, {"traceID": "63f84a6bb2864730", "spanID": "4e164d31d0fd0ade", "flags": 1, "operationName": "sanitizeTMLQuery", "references": [{"refType": "CHILD_OF", "traceID": "63f84a6bb2864730", "spanID": "95cd6a2190cebe29"}], "startTime": 1735846004254825, "duration": 146875, "tags": [{"key": "internal.span.format", "type": "string", "value": "jaeger"}], "logs": [{"timestamp": 1735846004255137, "fields": [{"key": "event.log", "type": "string", "value": "TML query Before Sanitization: [[Id] [Partneraccountid] [Shippingstate] [Billinglongitude] [Billingstate] [Expectedrevenue] [Ownerid] [Stagename] [Type] [Amount] [Description] [Forecastcategory] [Accountid] [Iswon] [Closedate] [Name] [Createddate] [Lastactivitydate] [Isclosed] [Shippingstreet] [Shippinglatitude] [Parentid] [Numberofemployees] [Shippingcountry] [Billinggeocodeaccuracy] [SF Opp Link] [Billingstreet] [Annualrevenue] [Billingcountry] [Billinglatitude] [Accountnumber] [Shippingcity] [Active C] [Tickersymbol] [Account Ownerid] [Createdbyid] [Shippingpostalcode] [Billingcity] [Shippinglongitude] [Website] [Phone] [Billingpostalcode] [Account Type] [Account Createddate] [Account Name]]"}]}, {"timestamp": 1735846004401592, "fields": [{"key": "event.log", "type": "string", "value": "TML query After Sanitization: [[Expectedrevenue] [Amount] [Iswon] [Isclosed] [Numberofemployees] [Annualrevenue] [Shippingpostalcode] [Billingpostalcode] [Closedate] [Closedate].monthly [Createddate] [Createddate].monthly [Account Createddate] [Account Createddate].monthly [Account Name] [Account Type] [Website] [Billingcity] [Tickersymbol] [Ownerid] [Createdbyid] [Forecastcategory] [Type] [Name] [Stagename] [Active C] [Billinggeocodeaccuracy] [Lastactivitydate] [Accountid] [Partneraccountid] [Billinglatitude] [Id] [Shippingstate] [Accountnumber] [Billingstate] [Shippingcity] [Billinglongitude] [Description] [Shippingstreet] [Shippinglatitude] [Shippinglongitude] [Account Ownerid] [Parentid] [Shippingcountry] [Billingstreet] [SF Opp Link] [Phone] [Billingcountry]]"}]}], "processID": "p1", "warnings": null}], "processes": {"p1": {"serviceName": "eureka-agent", "tags": [{"key": "hostname", "type": "string", "value": "ip-10-254-128-10.ec2.internal"}, {"key": "ip", "type": "string", "value": "10.254.128.10"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p2": {"serviceName": "eureka-graphql", "tags": [{"key": "hostname", "type": "string", "value": "eureka-graphql-78454cc76-fvvw4"}, {"key": "ip", "type": "string", "value": "10.252.225.72"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p3": {"serviceName": "convassist", "tags": [{"key": "hostname", "type": "string", "value": "convassist-5db97bf549-rwxlq"}, {"key": "ip", "type": "string", "value": "10.252.225.166"}, {"key": "jaeger.version", "type": "string", "value": "Python-4.8.0"}]}, "p4": {"serviceName": "eureka-searcher", "tags": [{"key": "hostname", "type": "string", "value": "eureka-searcher-66c9786549-xbmfp"}, {"key": "ip", "type": "string", "value": "10.252.226.13"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p5": {"serviceName": "eureka-llm-gateway", "tags": [{"key": "hostname", "type": "string", "value": "eureka-llmgateway-ff4f8f5f9-wqhrc"}, {"key": "ip", "type": "string", "value": "10.252.224.191"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}, "p6": {"serviceName": "eureka-metadata-service", "tags": [{"key": "hostname", "type": "string", "value": "eureka-metadata-7fddf6d998-zbbqh"}, {"key": "ip", "type": "string", "value": "10.252.224.19"}, {"key": "jaeger.version", "type": "string", "value": "Java-1.8.0"}]}}, "warnings": null}], "total": 0, "limit": 0, "offset": 0, "errors": null}